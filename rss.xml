<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Naon's log]]></title><description><![CDATA[우당탕탕 개발 블로그]]></description><link>https://nanaon.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 10 Jun 2020 10:40:04 GMT</lastBuildDate><item><title><![CDATA[Daily log - 17일차]]></title><description><![CDATA[2020년 6월 10일 수요일에는 이것을 했습니다.]]></description><link>https://nanaon.github.io/posts/day17</link><guid isPermaLink="false">https://nanaon.github.io/posts/day17</guid><pubDate>Wed, 10 Jun 2020 20:31:32 GMT</pubDate><content:encoded>&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;/media/200610-day17.JPG&quot; alt=&quot;day17&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;오전-10시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%A4%EC%A0%84-10%EC%8B%9C&quot; aria-label=&quot;오전 10시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오전 10시&lt;/h3&gt;
&lt;p&gt;코드카타 3일차 진행. 문제를 못 풀더라도 시작하고 1시간 지났을 때 과감하게 덮어야 하는데 조금만 더하면 풀릴 것 같아서 포기할 수 없었다. 결국 12시 가까이 되어서야 풀었고 오전은 이렇게 바이바이.&lt;/p&gt;
&lt;h3 id=&quot;오후-12시-반&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%A4%ED%9B%84-12%EC%8B%9C-%EB%B0%98&quot; aria-label=&quot;오후 12시 반 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오후 12시 반&lt;/h3&gt;
&lt;p&gt;오후 2시 HTTP 세션을 위해 미리 수업 자료를 읽었다. 분명 한글로 써있는데 무슨 말인지 머리에 안 들어와서 멘붕.&lt;/p&gt;
&lt;h3 id=&quot;오후-2시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%A4%ED%9B%84-2%EC%8B%9C&quot; aria-label=&quot;오후 2시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오후 2시&lt;/h3&gt;
&lt;p&gt;장고 온라인 강의 영상에서 HTTP가 무엇인지 살짝 들었던 터라 그래도 수월하지 않을까 싶었는데 역시 어려웠다… 하지만 이번 세션 실습 과제는 정말 흥미진진했다. 더 주세요 더!!! 미궁게임 좋아하던 초딩이 자라서 방탈출 카페 출석도장 찍고 http 방탈출도 즐겨한다네요~&lt;/p&gt;
&lt;h3 id=&quot;오후-4시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%A4%ED%9B%84-4%EC%8B%9C&quot; aria-label=&quot;오후 4시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오후 4시&lt;/h3&gt;
&lt;p&gt;산란한 정신을 붙잡고 장고 레플릿 시작. 아직 코드 따라 치는 수준에서 벗어나지 못했지만 하나하나 뜯어보자니 끝도 없을 것 같아서 일단 해보면서 익히기로 했다. ‘그걸 모를 때도 있었지~’ 할 날이 오겠지?&lt;/p&gt;
&lt;h3 id=&quot;저녁&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%80%EB%85%81&quot; aria-label=&quot;저녁 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;저녁&lt;/h3&gt;
&lt;p&gt;HTTP 관련 내용 정리하고 위스타그램 실습 시작한다. 내일 끝낼 수 있었으면 좋겠네.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Web - HTTP 기초]]></title><description><![CDATA[HTTP 구조와 핵심 요소]]></description><link>https://nanaon.github.io/posts/til33</link><guid isPermaLink="false">https://nanaon.github.io/posts/til33</guid><pubDate>Wed, 10 Jun 2020 15:20:32 GMT</pubDate><content:encoded>&lt;h3 id=&quot;http란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#http%EB%9E%80&quot; aria-label=&quot;http란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTP란?&lt;/h3&gt;
&lt;p&gt;HyperText Transfer Protocol 줄임말로, 하이퍼텍스트 문서(HTML)를 교환하기 위해 만들어진 통신 규약(protocol)이다. 즉, 웹 상에서 클라이언트와 서버 간 혹은 서버끼리 통신을 할 때 어떤 방식으로 할지 정해놓은 규칙이다. 주소 맨 앞에 있는 &lt;code class=&quot;language-text&quot;&gt;http://&lt;/code&gt; 가 이 프로토콜로 정보를 교환하겠다는 뜻이다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;http-특징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#http-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;http 특징 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTP 특징&lt;/h3&gt;
&lt;p&gt;HTTP는 클라이언트가 요청을 보내면 서버가 응답하는 요청(request) - 응답(reponse) 구조다. 클라이언트가 특정 웹 페이지나 이미지를 요청하면 서버에서 요청에 해당하는 정보를 응답해 클라이언트가 웹 페이지를 볼 수 있게 하는 식이다. 클라이언트에게 응답 후에는 연결을 바로 끊기 때문에 각 요청 - 응답은 독립적으로 이루어진다. 보통 클라이언트와 서버는 n:1 관계이므로 계속해서 연결을 유지해놓을 수가 없기 때문이다. 하지만 클라이언트의 요청을 기억해놓을 필요가 있을 때(예: 장바구니에 담은 물건)에는 쿠키나 세션을 이용한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;http-request-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#http-request-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;http request 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTP Request 구조&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Start line&lt;/li&gt;
&lt;li&gt;Headers&lt;/li&gt;
&lt;li&gt;Body&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;start-line&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#start-line&quot; aria-label=&quot;start line permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Start line&lt;/h4&gt;
&lt;p&gt;HTTP request 첫 줄이다. HTTP 메서드, request target uri, HTTP 버전 세 가지로 구성된다.
&lt;code class=&quot;language-text&quot;&gt;GET www.naver.com HTTP/1.1&lt;/code&gt;은 브라우저 주소창에 &lt;code class=&quot;language-text&quot;&gt;www.naver.com&lt;/code&gt;을 입력해서 네이버 웹 사이트를 불러와달라는 요청을 한 것과 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP 메서드&lt;/strong&gt;란 해당 request가 의도한 것이 무엇인지 정의하는 부분이다. 여러 종류가 있는데, 주로 쓰이는 것은 &lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;POST&lt;/code&gt; 방식이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;아주 단순하게 생각하면 이렇다.&lt;br&gt;
POST - 생성 (예: 새 글 생성)&lt;br&gt;
GET - 조회 (예: 검색 결과 받아오기)&lt;br&gt;
PUT - 수정 (예: 댓글 수정)&lt;br&gt;
DELETE - 삭제 (예: 글 삭제)&lt;br&gt;
등등&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;request target uri&lt;/strong&gt;란 해당 request가 전송되는 목표 uri다. &lt;code class=&quot;language-text&quot;&gt;https://www.naver.com/NOTICE&lt;/code&gt; 에서 &lt;code class=&quot;language-text&quot;&gt;/NOTICE&lt;/code&gt; 부분이다.&lt;/p&gt;
&lt;h4 id=&quot;headers&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#headers&quot; aria-label=&quot;headers permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Headers&lt;/h4&gt;
&lt;p&gt;해당 request에 대한 추가 정보를 담고 있는 부분이다. Host, User-Agent, Accept, Connection, Content-Type, Content-Length, Date, Connection, Cache-Control, Content-Language, Content-Encoding 등의 key가 있고, 해당하는 value가 &lt;code class=&quot;language-text&quot;&gt;key:value&lt;/code&gt; 형태로 표시된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Accept: */*
Accept-Encoding: gzip, deflate
Connection: keep-alive
Content-Type: application/json
Content-Length: 257
Host: google.com #접속한 주소
User-Agent: HTTPie/0.9.3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;body&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#body&quot; aria-label=&quot;body permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Body&lt;/h4&gt;
&lt;p&gt;request 실제 내용이 담기는 부분이다. 회원 가입 시 사용자가 이름, 아이디, 비밀번호 값을 입력한다고 할 때 body에 이 정보가 담겨 POST 메서드로 서버에 전송된다. 있는 것을 불러오기만 하는 GET request는 대부분 body가 없다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;POST /payment-sync HTTP/1.1

Accept: application/json
Accept-Encoding: gzip, deflate
Connection: keep-alive
Content-Length: 83
Content-Type: application/json
Host: intropython.com
User-Agent: HTTPie/0.9.3

# body 부분
{
    &amp;quot;imp_uid&amp;quot;: &amp;quot;imp_1234567890&amp;quot;,
    &amp;quot;merchant_uid&amp;quot;: &amp;quot;order_id_8237352&amp;quot;,
    &amp;quot;status&amp;quot;: &amp;quot;paid&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;http-response-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#http-response-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;http response 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTP Response 구조&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Status line&lt;/li&gt;
&lt;li&gt;Headers&lt;/li&gt;
&lt;li&gt;Body&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;status-line&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#status-line&quot; aria-label=&quot;status line permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Status line&lt;/h4&gt;
&lt;p&gt;Response 상태가 어떤지 나타내주는 부분이다. HTTP 버전, Status 코드, Status 텍스트로 구성된다. &lt;code class=&quot;language-text&quot;&gt;HTTP/1.1 404 Not Found&lt;/code&gt;라는 status line은 HTTP 1.1 버전이며 404 에러, 즉 요청한 url을 찾을 수 없다는 상태를 나타냅니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;주요 Status code와 status text&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200 OK: 클라이언트의 요청을 정상적으로 수행함&lt;/li&gt;
&lt;li&gt;201 Created: 클라이언트가 어떠한 리소스 생성을 요청, 해당 리소스가 성공적으로 생성됨(POST를 통한 리소스 생성 작업 시)&lt;/li&gt;
&lt;li&gt;301 Moved Permanently: 클라이언트가 요청한 리소스에 대한 uri가 변경되었을 때 사용하는 응답 코드. 응답 시 location header에 변경한 uri를 적어줘야 함&lt;/li&gt;
&lt;li&gt;400 Bad Request: 클라이언트의 요청이 잘못됐을 때 사용하는 응답 코드 (예: 전화번호를 보내야 하는데 텍스트를 보냈을 때)&lt;/li&gt;
&lt;li&gt;401 Unauthorized: 클라이언트가 인증되지 않은 상태에서 보호된 리소스를 요청했을 때 사용하는 응답 코드 (예: 비로그인 유저가, 로그인 유저만 요청 가능한 리소스를 요청했을 때)&lt;/li&gt;
&lt;li&gt;403 Forbidden: 유저 인증상태과 관계 없이 권한이 없는 리소스를 클라이언트가 요청했을 때 사용하는 응답 코드 (예: 과금 유저만 볼 수 있는 데이터를 요청했을 때)&lt;/li&gt;
&lt;li&gt;404 Not Found: 요청한 url이 존재하지 않을 때 사용하는 응답 코드&lt;/li&gt;
&lt;li&gt;405 Method Not Allowed: 클라이언트가 요청한 리소스에서는 사용 불가능한 메서드를 이용했을 경우 사용하는 응답 코드&lt;/li&gt;
&lt;li&gt;500 Internal Server Error: 서버에 문제가 있을 경우 사용하는 응답 코드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://http.cat/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;del&gt;별 건 없고 그냥 귀여우니까 보세요.&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;headers-body&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#headers-body&quot; aria-label=&quot;headers body permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;headers, body&lt;/h4&gt;
&lt;p&gt;Request headers, body와 기본적으로 동일하다. 단 body는 request와 마찬가지로 데이터를 전송할 필요가 없을 때에는 비어있다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;restful-api&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#restful-api&quot; aria-label=&quot;restful api permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RESTful API&lt;/h3&gt;
&lt;p&gt;RESTful API는 REST를 통해 서비스 API를 구현한 것이다. REST란 REpresentational State Transfer의 약자로, HTTP기반으로 필요한 자원에 접근하는 방식의 일종이다.&lt;/p&gt;
&lt;h4 id=&quot;uri란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#uri%EB%9E%80&quot; aria-label=&quot;uri란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;URI란?&lt;/h4&gt;
&lt;p&gt;앞서 URI는 어떤 사이트 내에서 특정 자원의 위치를 나타내는 유일한 주소라고 설명했다. 여기서 자원이란, DB에 저장된 데이터, 이미지, 문서, 웹 상에서 일어나는 서비스 등을 말한다. 모든 자원은 클라이언트가 바로 접근할 수 있는 고유 URI를 가진다. 이 자원에는 HTTP 메소드로 접근한다.&lt;/p&gt;
&lt;h4 id=&quot;uri-설계-규칙&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#uri-%EC%84%A4%EA%B3%84-%EA%B7%9C%EC%B9%99&quot; aria-label=&quot;uri 설계 규칙 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;URI 설계 규칙&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt;는 계층 관계를 나타낼 때 사용한다. &lt;code class=&quot;language-text&quot;&gt;https://www.naver.com/NOTICE/1&lt;/code&gt;는 네이버 사이트 안에 있는 공지사항 페이지 중 1번 게시글을 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;_&lt;/code&gt;보다는 &lt;code class=&quot;language-text&quot;&gt;-&lt;/code&gt;을 사용한다.&lt;/li&gt;
&lt;li&gt;영어 대문자보다는 소문자를 사용한다.&lt;/li&gt;
&lt;li&gt;가독성을 위해 너무 긴 단어는 쓰지 않는다.&lt;/li&gt;
&lt;li&gt;메서드(&lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;POST&lt;/code&gt; 등)가 동사이므로 혼동을 막기 위해 URI는 명사를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;기타-알아두면-좋을-것&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%ED%83%80-%EC%95%8C%EC%95%84%EB%91%90%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83&quot; aria-label=&quot;기타 알아두면 좋을 것 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기타 알아두면 좋을 것&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;클라이언트에서 서버로 데이터를 전달하려면 HTTP request의 body에 넣으면 된다.&lt;/li&gt;
&lt;li&gt;쿠키나 세션에 응답을 저장한 경우에 한해, 이전 응답을 확인하기 위해서는 쿠키나 세션을 확인하면 된다.&lt;/li&gt;
&lt;li&gt;클라이언트에서 서버로부터 받은 데이터는 HTTP response를 확인하면 된다.&lt;/li&gt;
&lt;li&gt;HTTP는 Stateless이다.&lt;/li&gt;
&lt;li&gt;HTTP는 백엔드 - 프론트엔드 간의 통신에 필요하다.&lt;/li&gt;
&lt;li&gt;HTTP는 기본적으로 요청/응답 (request/response) 구조로 되어있다.&lt;/li&gt;
&lt;li&gt;백엔드와 백엔드끼리 요청에도 사용할 수 있다. (서버 간 통신)&lt;/li&gt;
&lt;li&gt;HTTP request 메세지 중에서 해당 request의 실제 메세지/내용이 포함된 것은 body다.&lt;/li&gt;
&lt;li&gt;HTTP Response의 Status Line에서 문제없이 다 잘 실행 되었을때 보내는 status code는 200이다.&lt;/li&gt;
&lt;li&gt;카테고리 목록을 조회하는 API 엔드포인트의 올바른 HTTP 메소드와 주소는 &lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;http://wecode.co.kr/category&lt;/code&gt;이다.&lt;/li&gt;
&lt;li&gt;회원가입하는 엔드포인트로서 적절한 것은 &lt;code class=&quot;language-text&quot;&gt;POST&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;http://wecode.co.kr/user/sign-up&lt;/code&gt;이다.&lt;/li&gt;
&lt;li&gt;사용자 로그인을 진행하는 엔드포인트로 올바른 메소드와 주소는 &lt;code class=&quot;language-text&quot;&gt;POST&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;http://wecode.co.kr/user/sign-in&lt;/code&gt;이다.&lt;/li&gt;
&lt;li&gt;1번 상품의 상세 정보를 볼 수 있는 엔드포인트의 주소와 메소드로 적절한 것은 &lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;http://wecode.co.kr/product/1&lt;/code&gt;이다.&lt;/li&gt;
&lt;li&gt;1번 회원 정보를 수정하는 엔드포인트의 메소드로 적절한 것은 &lt;code class=&quot;language-text&quot;&gt;POST&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;PUT&lt;/code&gt;,  &lt;code class=&quot;language-text&quot;&gt;PATCH&lt;/code&gt;다. (요즘에는 주로 &lt;code class=&quot;language-text&quot;&gt;POST&lt;/code&gt;를 사용한다.)&lt;/li&gt;
&lt;li&gt;1번 회원 정보를 수정하는 엔드포인트의 주소로 적절한 것은 &lt;code class=&quot;language-text&quot;&gt;http://wecode.co.kr/user/1&lt;/code&gt;이다.&lt;/li&gt;
&lt;li&gt;쿼리스트링 이름이 query인 검색 엔드포인트에 “위코드”를 검색하는 올바른 주소와 메소드는 &lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;http://wecode.co.kr/search?query=&amp;quot;위코드&amp;quot;&lt;/code&gt;다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;참고-링크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0-%EB%A7%81%ED%81%AC&quot; aria-label=&quot;참고 링크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참고 링크&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zerocho.com/category/HTTP/post/5b344f3af94472001b17f2da&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.zerocho.com/category/HTTP/post/5b344f3af94472001b17f2da&lt;/a&gt;
&lt;a href=&quot;https://medium.com/@dydrlaks/rest-api-3e424716bab&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://medium.com/@dydrlaks/rest-api-3e424716bab&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Daily log - 16일차]]></title><description><![CDATA[2020년 6월 9일 화요일에는 이것을 했습니다.]]></description><link>https://nanaon.github.io/posts/day16</link><guid isPermaLink="false">https://nanaon.github.io/posts/day16</guid><pubDate>Tue, 09 Jun 2020 21:31:32 GMT</pubDate><content:encoded>&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;/media/200609-day16.JPG&quot; alt=&quot;day16&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;오전&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%A4%EC%A0%84&quot; aria-label=&quot;오전 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오전&lt;/h3&gt;
&lt;p&gt;장고 튜토리얼 시작. 문서가 번역투인데다 중간중간 영어도 섞여있어서 마냥 편하진 않았다. 장고 튜토리얼 영상에서 설명 들으면서 같이 하니까 조금 나았다. iTerm과 vim을 그나마 멋지게 세팅해놓아서 코드 칠 맛이 났다. 젯밥부터 관심 가진 덕을 봤다.&lt;/p&gt;
&lt;p&gt;코로나 때문에 계속 마스크를 끼고 있어야 해서 몹시 힘들다. 숨이 막히고 없던 열이 나는 기분이다.&lt;/p&gt;
&lt;h3 id=&quot;오후-1시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%A4%ED%9B%84-1%EC%8B%9C&quot; aria-label=&quot;오후 1시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오후 1시&lt;/h3&gt;
&lt;p&gt;코드카타 2일차 퀴즈 진행. 사람 모습이긴 하지만 다리가 4개 달린 사람을 만들어냈고 코드카타 짝은 멋진 사람을 만들어냈다. 도움을 받아서 1일차보다는 금방 끝냈다.&lt;/p&gt;
&lt;p&gt;오늘 코드카타에서 배운 것: 문자열 뒤집기 &lt;code class=&quot;language-text&quot;&gt;문자열[::-1]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;본격-오후&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B8%EA%B2%A9-%EC%98%A4%ED%9B%84&quot; aria-label=&quot;본격 오후 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;본격 오후&lt;/h3&gt;
&lt;p&gt;장고 튜토리얼을 끝내고 투표 사이트를 만들었는데도 여전히 나는 장고의 d자도 모르는 상태라서 당황했다. 지푸라기 붙잡는 심정으로 멘토님한테 도움을 요청했다. ‘튜토리얼 들어도 머리가 백지인 나, 정상인가요?’ ‘네. 정상입니다.’ 안심이다.&lt;/p&gt;
&lt;h3 id=&quot;저녁&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%80%EB%85%81&quot; aria-label=&quot;저녁 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;저녁&lt;/h3&gt;
&lt;p&gt;우당탕탕 얼렁뚱땅 장고 튜토리얼 이후에 드디어 레플릿 진입이다! 라고 야심차게 외쳤지만 장고 기초를 좀 더 다지고 가려고 다른 강의를 더 들었다. 내일은 클래스랑 패키지, 모듈, 데코레이터 복습해야지. 복습할 게 좀 많네… 레플릿까지 할 시간이 될까…?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python - 자료 구조 1 (list, tuple)]]></title><description><![CDATA[자료 구조의 정의와 중요성, 그리고 자료 구조 종류의 일부인 array(list)와 tuple에 대해서 알아본다.]]></description><link>https://nanaon.github.io/posts/til32</link><guid isPermaLink="false">https://nanaon.github.io/posts/til32</guid><pubDate>Mon, 08 Jun 2020 17:20:32 GMT</pubDate><content:encoded>&lt;h3 id=&quot;자료-구조란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0%EB%9E%80&quot; aria-label=&quot;자료 구조란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자료 구조란?&lt;/h3&gt;
&lt;p&gt;자료 구조란 연관성이 있는 데이터를 모아놓은 방식을 말한다. 파이썬에는 내장 자료 구조가 있는데 list, tuple, dictionary 등이다.&lt;/p&gt;
&lt;p&gt;효율적인 개발 시스템-데이터에 편리하게 접근할 수 있고 데이터 조작이 용이한-을 구축하기 위해서는 자료 구조를 만드는 단계에서부터 어디서 어떻게 사용할 데이터를 위한 구조인지 명확하게 정의해야 한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;array와-list-차이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#array%EC%99%80-list-%EC%B0%A8%EC%9D%B4&quot; aria-label=&quot;array와 list 차이 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array와 List 차이&lt;/h3&gt;
&lt;p&gt;Array와 list는 기본적으로 비슷한 자료 구조다. 일반적으로 JavaScript에서는 array, Python에서는 list라고 생각하면 쉽다. 엄밀히 말하면 array와 list는 다르다. list가 좀 더 유연하게 데이터를 담을 수 있지만 그렇기 때문에 메모리를 더 많이 차지한다. 하지만 Python에서 array를 사용하기 위해서는 import를 해와야 하기 때문에 파이썬에서는 list를 쓰는 것이 편리하다. 아래에서는 array를 list로 갈음하고 기술하겠다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;list-특징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#list-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;list 특징 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List 특징&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;시퀀스형
List는 앞에서부터 순서대로 데이터를 저장한다. 요소를 추가하면 가장 뒤에 있는 요소 뒤로 들어간다.&lt;/li&gt;
&lt;li&gt;수정 가능
List를 이미 선언했더라도 요소를 삭제하거나 추가할 수 있다.&lt;/li&gt;
&lt;li&gt;중복 허용
같은 값도 여러 번 들어갈 수 있다.&lt;/li&gt;
&lt;li&gt;다양한 자료 구조
List 안에 또다른 list를 넣어서 다중 차원 list를 만들 수 있다. 또한 tuple이나 dictionary 형태도 담을 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&quot;list-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#list-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;list 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List 구조&lt;/h3&gt;
&lt;p&gt;List에는 요소 하나하나가 들어갈 수 있는 자리가 있는데, 빈 칸 없이 앞에서부터 차례로 데이터를 쌓는다. 첫 번째 요소 인덱스 값이 0부터 시작해서 다음 요소는 인덱스 1, 그 다음 요소는 인덱스 2가 된다.&lt;/p&gt;
&lt;p&gt;반대로 List 가장 마지막 요소부터 인덱싱을 할 수도 있다. 마지막 요소는 인덱스 -1, 그 앞 요소는 인덱스 -2다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;list-단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#list-%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;list 단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List 단점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;요소 추가/제거 시 다소 무거운 동작 방식
위에서 언급했듯 list 자료 구조는 데이터를 앞에서부터 빈 자리 없이 꽉 채워 쌓는다. 따라서 중간에 있는 요소 하나를 삭제했을 때, 그 뒤를 잇는 모든 요소의 자리를 앞으로 한 칸씩 이동해주어야 한다. 요소를 추가했을 때도 마찬가지로, 추가된 요소 이후의 모든 요소의 자리를 뒤로 한 칸씩 이동해준다. 따라서 list는 자주 변경해야 하는 데이터를 담기에는 적절하지 않은 자료 구조다.&lt;/li&gt;
&lt;li&gt;메모리 재할당 시 데이터를 처음부터 다시 쌓아야 하는 동작 방식
List는 데이터를 순차적으로 쌓기 때문에 list가 처음 생성될 때 어느 정도 메모리를 미리 할당한다(pre-allocation). 하지만 list가 미리 할당한 메모리를 초과해서 데이터를 쌓게 된다면 메모리 크기를 다시 조정해주어야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이때 list는 pre-allocation 사이즈를 초과한 데이터부터 새 메모리에 저장하는 게 아니라 새 메모리에 처음부터 데이터를 다시 쌓기 시작한다. 데이터 사이즈가 예측한 메모리를 넘을 경우 추가 작업이 생기므로, 사이즈를 예측하기 힘든 데이터에는 부적절하다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;list를-사용하면-좋은-데이터-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#list%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;list를 사용하면 좋은 데이터 종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List를 사용하면 좋은 데이터 종류&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;값보다 순서가 중요한 데이터 (예 - 주식 차트)&lt;/li&gt;
&lt;li&gt;다차원 데이터&lt;/li&gt;
&lt;li&gt;빠르게 읽어야 하는 데이터 (index로 곧바로 읽을 수 있다.)&lt;/li&gt;
&lt;li&gt;사이즈 변동 폭이 크지 않은 데이터&lt;/li&gt;
&lt;li&gt;자주 삭제되거나 추가되지 않는 데이터&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;tuple이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tuple%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;tuple이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tuple이란?&lt;/h3&gt;
&lt;p&gt;Tuple 또한 list와 마찬가지로 시퀀스형 자료 구조다. 하지만 tuple은 한 번 선언 후 요소를 삭제하거나 추가하는 것은 불가능하다. 따라서 tuple은 list보다 메모리를 적게 사용한다. 주로 2~3개 정도의 작은 사이즈 데이터를 다룰 때 사용한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;tuple-장점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tuple-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;tuple 장점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tuple 장점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;간단한 값을 빠르게 리턴할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Tuple을 사용하는 경우&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Tuple을 안 쓰는 경우에는 class를 생성해야함&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Cord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x
	self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&quot;tuple-단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tuple-%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;tuple 단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tuple 단점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;데이터를 맥락으로 파악해야 한다.
Dictionary는 key와 value가 명시되어있기 때문에 자료 의미를 정확하게 파악할 수 있지만 tuple은 값만 담고 있기 때문에 의미가 명확하지 않다.&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h3 id=&quot;tuple을-사용하면-좋은-데이터-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tuple%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;tuple을 사용하면 좋은 데이터 종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tuple을 사용하면 좋은 데이터 종류&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;간단한 데이터 (예 - 좌표 데이터)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;coordinations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&quot;복습&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B5%EC%8A%B5&quot; aria-label=&quot;복습 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;복습&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Q1. 자료구조의 정의와 중요한 이유를 설명하세요.&lt;/strong&gt;
A1. 자료 구조란 연관성이 있는 데이터를 모아놓은 방식을 말합니다. 효율적인 개발 시스템, 즉 데이터에 편리하게 접근할 수 있고 데이터 조작이 용이한 시스템을 구축하기 위해서는 자료 구조를 만드는 단계에서부터 어디서 어떻게 사용할 데이터를 위한 구조인지 명확하게 정의해야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q2. Array(List)의 가장 큰 특징과 그로 인해 발생하는 장점과 단점에 대해 설명하세요.&lt;/strong&gt;
A2. 리스트는 자료를 순차적으로 쌓고 각 요소에 인덱스 번호를 부여합니다. 따라서 리스트의 중간 요소를 삭제하거나 추가했을 때 뒤따르는 모든 요소 위치가 하나씩 앞으로 당겨지거나 뒤로 밀립니다. 이 모든 과정이 메모리를 차지하는 작업이므로 자주 변경되는 데이터를 다룰 때는 적합하지 않은 자료 구조입니다. 하지만 인덱스를 통해 원하는 데이터를 빠르게 읽을 수 있습니다. 또한 리스트는 또다른 리스트를 담을 수 있기 때문에 다차원 데이터를 표현할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q3. Array를 적용 시키면 좋을 데이터의 예를 구체적으로 들어주세요. (ex. 주식 차트) 구체적 예시와 함께 Array를 적용하면 좋은 이유, 그리고 Array를 사용하지 않으면 어떻게 되는지 함께 서술해주세요.&lt;/strong&gt;
A3. 환율 그래프. 환율 그래프 또한 주식 차트와 마찬가지로 일정 시간마다 새 데이터가 들어옵니다. 어제 환율값과 오늘 환율값이 같을 수는 있지만 순서는 분명히 구분해주어야 합니다. 따라서 요소 중복은 허용하되, 데이터가 들어온 순서대로 쌓는 리스트 자료 구조로 처리하기 적합합니다. 만약 중복을 허용하지 않는 자료 구조(예 - set)를 사용할 경우, 어제 환율과 오늘 환율이 같을 때 오늘 환율이 어제 환율을 덮어쓸 것입니다. 그러므로 모든 데이터를 누적해서 나타내주어야 하는 환율 차트에는 리스트 자료 구조가 적합합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python - 웹 크롤링 실습]]></title><description><![CDATA[Beautiful Soup와 Selenium으로 빌보드 TOP 100 정보와 스타벅스 메뉴 정보를 크롤링해보았다.]]></description><link>https://nanaon.github.io/posts/til31</link><guid isPermaLink="false">https://nanaon.github.io/posts/til31</guid><pubDate>Mon, 08 Jun 2020 10:47:32 GMT</pubDate><content:encoded>&lt;h3 id=&quot;빌보드-top-100-순위-가수-이름-곡-제목-앨범-아트-이미지-주소-크롤링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%8C%EB%B3%B4%EB%93%9C-top-100-%EC%88%9C%EC%9C%84-%EA%B0%80%EC%88%98-%EC%9D%B4%EB%A6%84-%EA%B3%A1-%EC%A0%9C%EB%AA%A9-%EC%95%A8%EB%B2%94-%EC%95%84%ED%8A%B8-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%A3%BC%EC%86%8C-%ED%81%AC%EB%A1%A4%EB%A7%81&quot; aria-label=&quot;빌보드 top 100 순위 가수 이름 곡 제목 앨범 아트 이미지 주소 크롤링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빌보드 TOP 100 순위, 가수 이름, 곡 제목, 앨범 아트 이미지 주소 크롤링&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Selenium 임포트&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; selenium &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; webdriver
&lt;span class=&quot;token comment&quot;&gt;# 키보드 down키(↓)를 누르게 하기 위해 Keys 임포트&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; selenium&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;webdriver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;keys &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Keys
&lt;span class=&quot;token comment&quot;&gt;# Beautiful Soup 임포트&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; bs4 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; BeautifulSoup

&lt;span class=&quot;token comment&quot;&gt;# csv 파일 생성을 위해 임포트&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; csv


&lt;span class=&quot;token comment&quot;&gt;# 생성할 csv 파일 이름&lt;/span&gt;
csv_filename &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;billboard.csv&apos;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# csv 파일을 쓰기 방식으로 열기, 인코딩 형식 지정&lt;/span&gt;
csv_open &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;csv_filename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;w+&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; encoding&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
csv_writer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; csv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;csv_open&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# csv 파일 열 이름 지정. 쓴 개수만큼 열 생성&lt;/span&gt;
csv_writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writerow&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;rank&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;artist&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;image&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 크롬드라이버가 저장된 경로&lt;/span&gt;
PATH &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/Users/NAON/myprojects/chromedriver&quot;&lt;/span&gt;
driver &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; webdriver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Chrome&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;PATH&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 소스를 긁어올 사이트 주소&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://www.billboard.com/charts/hot-100&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 앨범 아트 이미지 로딩을 위해 키보드 down키(↓) 반복&lt;/span&gt;
body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;find_element_by_css_selector&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    keys &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;send_keys&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Keys&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PAGE_DOWN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 사이트에서 긁어온 소스를 html로 만들기&lt;/span&gt;
htmlsrc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page_source
bs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; BeautifulSoup&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;htmlsrc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;html.parser&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 특정 태그 중 class가 특정 이름인 것 전부 찾기&lt;/span&gt;
ranks &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;find_all&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;span&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;class&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;chart-element__rank__number&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
titles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;find_all&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;span&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;class&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;chart-element__information__song&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
artists &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;find_all&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;span&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;class&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;chart-element__information__artist&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
wrapper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;find_all&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;class&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;chart-element__wrapper&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

ranks_wrap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
titles_wrap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
artists_wrap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
images_wrap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 위에서 찾아낸 내용을 각 리스트에 하나씩 밀어넣기&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; rank &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; ranks&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    rank_text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rank&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_text&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    ranks_wrap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rank_text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; title &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; titles&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    title_text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_text&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    titles_wrap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;title_text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; artist &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; artists&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    artist_text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; artist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_text&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    artists_wrap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;artist_text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; images &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; wrapper&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# span 태그 중 특정 클래스 이름을 가진 span 태그 추출 후 style attribute 값 부분 추출&lt;/span&gt;
    image &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; images&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;find&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;span&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; class_&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;chart-element__image&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;style&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# 이미지를 style 속성의 background-image 값으로 넣었으므로, background-image: url(&quot; 부분 먼저 제거하고 뒷부분 &quot;); 제거 &lt;/span&gt;
    url_text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; image&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;background-image: url(&quot;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    images_wrap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url_text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 순위, 곡 제목, 가수 이름, 앨범 아트 이미지 주소 리스트에서 n번째 요소끼리 튜플로 묶은 리스트 생성&lt;/span&gt;
wrap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ranks_wrap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; titles_wrap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; artists_wrap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; images_wrap&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# n번째 튜플을 n번째 행에 넣음&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; wrap&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
   csv_writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writerow&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 열어준 csv 파일 닫기&lt;/span&gt;
csv_open&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;close&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 소스 긁어오느라 실행했던 드라이버 종료&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quit&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;for 반복문 부분을 list comprehension으로 더 간결하게 표현할 수도 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;ranks_wrap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;rank&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_text&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; rank &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; ranks&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
titles_wrap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_text&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; title &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; titles&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
artists_wrap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;artist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_text&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; artist &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; artists&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;스타벅스-전-메뉴-이름과-이미지-주소-크롤링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%ED%83%80%EB%B2%85%EC%8A%A4-%EC%A0%84-%EB%A9%94%EB%89%B4-%EC%9D%B4%EB%A6%84%EA%B3%BC-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%A3%BC%EC%86%8C-%ED%81%AC%EB%A1%A4%EB%A7%81&quot; aria-label=&quot;스타벅스 전 메뉴 이름과 이미지 주소 크롤링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스타벅스 전 메뉴 이름과 이미지 주소 크롤링&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Selenium 임포트&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; selenium &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; webdriver
&lt;span class=&quot;token comment&quot;&gt;# Beautiful Soup 임포트&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; bs4 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; BeautifulSoup

&lt;span class=&quot;token comment&quot;&gt;# csv 파일 생성을 위해 임포트&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; csv

&lt;span class=&quot;token comment&quot;&gt;# 생성할 csv 파일 이름&lt;/span&gt;
csv_filename &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;starbucks.csv&apos;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# csv 파일을 쓰기 방식으로 열기, 인코딩 형식 지정&lt;/span&gt;
csv_open &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;csv_filename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;w+&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; encoding&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
csv_writer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; csv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;csv_open&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# csv 파일 열 이름 지정. 쓴 개수만큼 열 생성&lt;/span&gt;
csv_writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writerow&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;메뉴&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;이미지 주소&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 크롬드라이버가 저장된 경로&lt;/span&gt;
PATH &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/Users/NAON/myprojects/chromedriver&quot;&lt;/span&gt;
driver &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; webdriver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Chrome&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;PATH&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 웹사이트의 모든 자원 로드를 기다리기 위해 암묵적으로 5초 대기. 그 전에 로딩이 끝나면 5초가 안 됐어도 다음 코드로 넘어감&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;implicitly_wait&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 소스를 긁어올 사이트 주소&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://www.starbucks.co.kr/menu/drink_list.do&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
htmlsrc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page_source

&lt;span class=&quot;token comment&quot;&gt;# 사이트에서 긁어온 소스를 html로 만들기&lt;/span&gt;
bs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; BeautifulSoup&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;htmlsrc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;html.parser&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# &amp;lt;a&gt; 태그 중 class 이름이 &quot;goDrinkView&quot;인 것 전부 찾기&lt;/span&gt;
images &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;find_all&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;class&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;goDrinkView&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# &amp;lt;image&gt; 태그 속성 중 alt 속성에 (운 좋게도) 메뉴 이름이 있어서 그것을 메뉴 이름 열에 넣고 이미지 소스 주소를 다음 열에 넣음&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; image &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; images&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    img &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; image&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;find&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;img&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    csv_writer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writerow&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;alt&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;src&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 열어준 csv 파일 닫기&lt;/span&gt;
csv_open&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;close&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 소스 긁어오느라 실행했던 드라이버 종료&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quit&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;실습하면서-어려웠던-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EC%8A%B5%ED%95%98%EB%A9%B4%EC%84%9C-%EC%96%B4%EB%A0%A4%EC%9B%A0%EB%8D%98-%EC%A0%90&quot; aria-label=&quot;실습하면서 어려웠던 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실습하면서 어려웠던 점&lt;/h3&gt;
&lt;p&gt;빌보드 순위, 곡 이름, 가수 이름은 뷰티풀 수프만으로도 크롤링이 가능했다. 하지만 앨범 아트 이미지는 페이지 최초 호출 시 한 번에 뜨는 것이 아니라 스크롤을 내려서 해당 앨범 아트가 뷰포트 영역에 들어온 후에야 로딩이 됐다. 따라서 동적인 페이지까지 긁어올 수 있는 셀레니움을 사용했다.&lt;/p&gt;
&lt;p&gt;문제는 인터넷 환경에 따라, 그리고 컴퓨터 성능에 따라 앨범 아트가 로딩되는 시간이 조금 더 걸린다는 점이었다. 다행히 페이스북처럼 스크롤을 계속 내려서 콘텐츠가 무한 로딩되는 스타일이 아니기 때문에 스크롤을 페이지 끝까지 내려주고 일정 시간 기다리면 해결할 수 있을 거라 생각했다. 하지만 스크롤을 화면 높이 0에서부터 사이트 끝까지 한 번에 내려주니 중간에 있는 앨범 아트는 로딩되지 않았다. 무조건 뷰포트에 한 번씩은 들어와야 로딩되는 것이다.&lt;/p&gt;
&lt;p&gt;처음엔 2000px씩 끊어서 5초 기다린 후 또 2000px씩 내려가는 방법으로 시도했다. 그런데 2000px도 간격이 너무 넓었던 것인지 누락되는 이미지가 있었다.. 그래서 1000px 간격으로 다시 시도했는데, 내가 봐도 정말 정말 비효율적인 코드가 나왔다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute_script&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;window.scrollTo(0, 1000);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute_script&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;window.scrollTo(1000, 2000);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute_script&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;window.scrollTo(2000, 3000);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute_script&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;window.scrollTo(3000, 4000);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute_script&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;window.scrollTo(4000, 5000);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute_script&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;window.scrollTo(5000, 6000);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute_script&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;window.scrollTo(6000, 7000);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute_script&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;window.scrollTo(7000, 8000);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute_script&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;window.scrollTo(8000, 9000);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute_script&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;window.scrollTo(9000, 10000);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute_script&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;window.scrollTo(10000, 11000);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute_script&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;window.scrollTo(11000, document.body.scrollHeight);&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 못생긴 코드는 무엇인지… 게다가 로딩 시간을 5초씩 준 덕분에 한 번 크롤링 하려면 1분이 걸린다. 테스트 할 때도 이만저만 불편한 게 아니었고 더 큰 문제는 이렇게 긁어온 이미지 주소가 리스트에 들어가지 않았다는 것이다. 개별로 출력하면 잘 나오고, 곡 제목이나 가수 이름이랑 마찬가지로 문자열 형태였는데 왜 에러가 떴는지는 아직도 의문이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# print(url_text) 했을 때&lt;/span&gt;
https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;charts&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;static&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;billboard&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;img&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;lady&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;gaga&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;b8x&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;rain&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;on&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;me&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;n1e&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;155x155&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jpg
https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;charts&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;static&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;billboard&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;img&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;megan&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;thee&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;stallion&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;z0z&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;savage&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;7q2&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;155x155&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jpg
https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;charts&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;static&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;billboard&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;img&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;dababy&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;sfn&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;155x155&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jpg

&lt;span class=&quot;token comment&quot;&gt;# 코드 후략&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 빈 리스트에 이 주소를 하나씩 넣으려고 하니 &lt;code class=&quot;language-text&quot;&gt;IndexError&lt;/code&gt; 발생. 왜죠?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;Traceback &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  File &lt;span class=&quot;token string&quot;&gt;&quot;crawling.py&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; line &lt;span class=&quot;token number&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    url_text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; image&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;background-image: url(&quot;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
IndexError&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;list&lt;/span&gt; index out of &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;혹시 &lt;code class=&quot;language-text&quot;&gt;url_text&lt;/code&gt; 결과값은 문자열이 아닌가 싶어서 이렇게도 확인해보았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;artist_text=&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;artist_text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;url_text=&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url_text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;artist &lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;str&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
url &lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;str&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;둘 다 문자열인데 왜 가수 이름은 리스트로 잘 append되고 이미지 주소는 안 되는지…&lt;/p&gt;
&lt;p&gt;한참 씨름하다 테스트 한 번 할 때마다 1분씩 기다리는 게 어이없어서 스크롤 다운 방식을 DOWN 키를 누르는 방식으로 바꿨다. 그런데 의외로 코드가 동작하는 것이다! 문제는 스크롤을 내리면서 이미지를 로딩시키는 방식에 있었나보다. 아직 이유를 모르기 때문에 확인 후 내용을 보충할 것이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python - generator]]></title><description><![CDATA[제너레이터는 이터레이터를 생성해주는 함수다. 함수 안에서 yield라는 키워드를 사용하면 함수는 제너레이터가 되며, yield에는 값(변수)을 지정한다.]]></description><link>https://nanaon.github.io/posts/til30</link><guid isPermaLink="false">https://nanaon.github.io/posts/til30</guid><pubDate>Sat, 06 Jun 2020 17:58:32 GMT</pubDate><content:encoded>&lt;h3 id=&quot;제너레이터generator&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0generator&quot; aria-label=&quot;제너레이터generator permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제너레이터(generator)&lt;/h3&gt;
&lt;p&gt;제너레이터는 이터레이터를 생성해주는 함수다. 함수 안에서 &lt;code class=&quot;language-text&quot;&gt;yield&lt;/code&gt;라는 키워드를 사용하면 함수는 제너레이터가 되며, &lt;code class=&quot;language-text&quot;&gt;yield&lt;/code&gt;에는 값(변수)을 지정한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yield&lt;/code&gt;를 사용해서 제너레이터를 만들고, 숫자를 출력하는 for 반복문을 만들어보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; num &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; num

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 출력값&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;제너레이터-함수의-작동-방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%95%A8%EC%88%98%EC%9D%98-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;제너레이터 함수의 작동 방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제너레이터 함수의 작동 방식&lt;/h3&gt;
&lt;p&gt;일반적인 함수는 함수를 모두 실행한 뒤에 외부로 값을 반환하지만, 제너레이터 함수는 &lt;code class=&quot;language-text&quot;&gt;yield&lt;/code&gt;가 나오는 순간 값을 반환한 뒤 잠시 연산을 멈추고 함수 바깥의 코드가 실행되도록 양보하여 값을 가져가게 한다. 그리고 다시 제너레이터 안의 코드 중 &lt;code class=&quot;language-text&quot;&gt;yield&lt;/code&gt; 이후부터 이어서 실행한다.&lt;/p&gt;
&lt;p&gt;즉 위 코드를 다시 뜯어보면,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt;문에서 &lt;code class=&quot;language-text&quot;&gt;numbers()&lt;/code&gt; 제너레이터 함수 호출&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;numbers()&lt;/code&gt; 함수 안 첫 번째 반복문 제1턴 실행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;yield&lt;/code&gt; 키워드 만남&lt;/li&gt;
&lt;li&gt;값 반환&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;numbers()&lt;/code&gt; 함수 바깥으로 나가 외부 &lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt;문에 값 전달하여 &lt;code class=&quot;language-text&quot;&gt;print&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;다시 &lt;code class=&quot;language-text&quot;&gt;numbers()&lt;/code&gt; 함수로 돌아와서 제2턴 실행&lt;/li&gt;
&lt;li&gt;반복&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;의 과정을 거쳐 결과값을 반환한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;제너레이터-표현식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%91%9C%ED%98%84%EC%8B%9D&quot; aria-label=&quot;제너레이터 표현식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제너레이터 표현식&lt;/h3&gt;
&lt;p&gt;제너레이터 표현식은 이터레이터를 반환한다. 제너레이터 함수를 좀 더 쉽게 사용할 수 있도록 해준다. 리스트 컴프리헨션과 구성이 비슷하나 리스트 컴프리헨션은 대괄호&lt;code class=&quot;language-text&quot;&gt;[]&lt;/code&gt;를 쓰고 제너레이터 표현식은 소괄호&lt;code class=&quot;language-text&quot;&gt;()&lt;/code&gt;를 쓴다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;표현식 &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; 원소 &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; 반복 가능한 객체&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;표현식 &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; 원소 &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; 반복 가능한 객체 &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; 조건문&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;generator_exp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;generator_exp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 출력값&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;generator &lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;genexpr&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; at &lt;span class=&quot;token number&quot;&gt;0x7fd638047c50&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;generator_exp&lt;/code&gt;가 제너레이터 객체임을 확인할 수 있다.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&quot;q1-다음코드는-generator-expression을-사용해서-제곱연산을-하는-예제-입니다-실행해보고-결과를-확인해보세요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#q1-%EB%8B%A4%EC%9D%8C%EC%BD%94%EB%93%9C%EB%8A%94-generator-expression%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%A0%9C%EA%B3%B1%EC%97%B0%EC%82%B0%EC%9D%84-%ED%95%98%EB%8A%94-%EC%98%88%EC%A0%9C-%EC%9E%85%EB%8B%88%EB%8B%A4-%EC%8B%A4%ED%96%89%ED%95%B4%EB%B3%B4%EA%B3%A0-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EC%84%B8%EC%9A%94&quot; aria-label=&quot;q1 다음코드는 generator expression을 사용해서 제곱연산을 하는 예제 입니다 실행해보고 결과를 확인해보세요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Q1. 다음코드는 generator expression을 사용해서 제곱연산을 하는 예제 입니다. 실행해보고 결과를 확인해보세요.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;L &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;generate_square_from_list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;x &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; L &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

print_iter&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; generate_square_from_list&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;a1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#a1&quot; aria-label=&quot;a1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A1.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 출력값&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;generator &lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt; generate_square_from_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;genexpr&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; at &lt;span class=&quot;token number&quot;&gt;0x7fd35820fbd0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;generate_square_from_list()&lt;/code&gt; 함수의 &lt;code class=&quot;language-text&quot;&gt;print(result)&lt;/code&gt; 코드와 &lt;code class=&quot;language-text&quot;&gt;return result&lt;/code&gt;코드는 한 번 실행한 뒤 종료되었다. 따라서 &lt;code class=&quot;language-text&quot;&gt;print(result)&lt;/code&gt;의 값인 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;generator object generate_square_from_list.&amp;lt;locals&amp;gt;.&amp;lt;genexpr&amp;gt; at 0x7fd35820fbd0&amp;gt;&lt;/code&gt;가 한 번 출력된 것을 확인할 수 있다. &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;print&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;return&lt;/code&gt;을 실행한 뒤, 제너레이터가 반환한 값 &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;이 &lt;code class=&quot;language-text&quot;&gt;print_iter(iter)&lt;/code&gt;로 전달되어 &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;이 화면에 출력된다.&lt;/p&gt;
&lt;p&gt;이후로는 제너레이터 표현식인 &lt;code class=&quot;language-text&quot;&gt;result&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;print_iter(iter)&lt;/code&gt; 함수를 오가며 진행된다. &lt;code class=&quot;language-text&quot;&gt;4&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;9&lt;/code&gt;는 이때 출력된다.&lt;/p&gt;
&lt;h4 id=&quot;q2-이번-과제는-다음코드를-실행해보고-분석한-결과를-블로깅하는-과제-입니다-lazy-evaluation-이란-무엇인지와-장점-및-리스트-컴프리헨션과의-차이점에-대하여-블로깅-해주세요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#q2-%EC%9D%B4%EB%B2%88-%EA%B3%BC%EC%A0%9C%EB%8A%94-%EB%8B%A4%EC%9D%8C%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%B4%EB%B3%B4%EA%B3%A0-%EB%B6%84%EC%84%9D%ED%95%9C-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%EB%B8%94%EB%A1%9C%EA%B9%85%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%9C-%EC%9E%85%EB%8B%88%EB%8B%A4-lazy-evaluation-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80%EC%99%80-%EC%9E%A5%EC%A0%90-%EB%B0%8F-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%BB%B4%ED%94%84%EB%A6%AC%ED%97%A8%EC%85%98%EA%B3%BC%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B9%85-%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94&quot; aria-label=&quot;q2 이번 과제는 다음코드를 실행해보고 분석한 결과를 블로깅하는 과제 입니다 lazy evaluation 이란 무엇인지와 장점 및 리스트 컴프리헨션과의 차이점에 대하여 블로깅 해주세요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Q2. 이번 과제는 다음코드를 실행해보고 분석한 결과를 블로깅하는 과제 입니다. lazy evaluation 이란 무엇인지와 장점 및 리스트 컴프리헨션과의 차이점에 대하여 블로깅 해주세요.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;L &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; time

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lazy_return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;sleep 1s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;comprehension_list=&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
comprehension_list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; lazy_return&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; L &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
print_iter&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;comprehension_list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;generator_exp=&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
generator_exp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; lazy_return&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; L &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
print_iter&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;generator_exp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;a2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#a2&quot; aria-label=&quot;a2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A2.&lt;/h4&gt;
&lt;p&gt;주어진 코드를 실행하면 아래와 같이 실행된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 출력값&lt;/span&gt;
comprehension_list&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
sleep 1s
sleep 1s
sleep 1s
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
generator_exp&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
sleep 1s
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
sleep 1s
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
sleep 1s
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;print(&amp;quot;comprehension_list=&amp;quot;)&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;comprehension_list=&lt;/code&gt; 출력&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;comprehension_list = [ lazy_return(i) for i in L ]&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;첫 번째 값 &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt; 가지고 &lt;code class=&quot;language-text&quot;&gt;comprehension_list&lt;/code&gt;안 &lt;code class=&quot;language-text&quot;&gt;lazy_return(num)&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;print(&amp;quot;sleep 1s&amp;quot;)&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;sleep 1s&lt;/code&gt; 출력&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;time.sleep(1)&lt;/code&gt; 실행, 1초 기다림&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;return num&lt;/code&gt; 실행해서 &lt;code class=&quot;language-text&quot;&gt;num&lt;/code&gt;값 &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt; 반환&lt;/li&gt;
&lt;li&gt;다음 값 &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt; 가지고 &lt;code class=&quot;language-text&quot;&gt;comprehension_list&lt;/code&gt;안 &lt;code class=&quot;language-text&quot;&gt;lazy_return(i)&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;5~8번 반복&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;return num&lt;/code&gt; 실행해서 &lt;code class=&quot;language-text&quot;&gt;num&lt;/code&gt;값 &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt; 반환&lt;/li&gt;
&lt;li&gt;다음 값 &lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt; 가지고 &lt;code class=&quot;language-text&quot;&gt;comprehension_list&lt;/code&gt;안 &lt;code class=&quot;language-text&quot;&gt;lazy_return(i)&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;5~8번 반복&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;return num&lt;/code&gt; 실행해서 &lt;code class=&quot;language-text&quot;&gt;num&lt;/code&gt;값 &lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt; 반환&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;comprehension_list = [1, 2, 3]&lt;/code&gt; 완성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;print_iter(comprehension_list)&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;comprehension_list&lt;/code&gt; 리스트 안에 있는 요소 &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt; 출력&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;여기까지가&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;comprehension_list&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
sleep 1s
sleep 1s
sleep 1s
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;의 출력 과정이다. 이어서 계속 보자.&lt;/p&gt;
&lt;ol start=&quot;18&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;print(&amp;quot;generator_exp=&amp;quot;)&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;generator_exp=&lt;/code&gt; 출력&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;generator_exp = ( lazy_return(i) for i in L )&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;첫 번째 값 &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt; 가지고 &lt;code class=&quot;language-text&quot;&gt;lazy_return(num)&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;print(&amp;quot;sleep 1s&amp;quot;)&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;sleep 1s&lt;/code&gt; 출력&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;time.sleep(1)&lt;/code&gt; 실행, 1초 기다림&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;return num&lt;/code&gt; 실행해서 &lt;code class=&quot;language-text&quot;&gt;num&lt;/code&gt;값 &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt; 반환&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;generator_exp&lt;/code&gt; 바깥으로 나감&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;print_iter(generator_exp)&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;요소 &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt; 출력&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;generator_exp = ( lazy_return(i) for i in L )&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;다음 값 &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt; 가지고 &lt;code class=&quot;language-text&quot;&gt;lazy_return(num)&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;print(&amp;quot;sleep 1s&amp;quot;)&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;22~24번 반복&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;return num&lt;/code&gt; 실행해서 &lt;code class=&quot;language-text&quot;&gt;num&lt;/code&gt;값 &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt; 반환&lt;/li&gt;
&lt;li&gt;26~27번 반복&lt;/li&gt;
&lt;li&gt;요소 &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt; 출력&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;generator_exp = ( lazy_return(i) for i in L )&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;다음 값 &lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt; 가지고 &lt;code class=&quot;language-text&quot;&gt;lazy_return(num)&lt;/code&gt; 실행&lt;/li&gt;
&lt;li&gt;22~24번 반복&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;return num&lt;/code&gt; 실행해서 &lt;code class=&quot;language-text&quot;&gt;num&lt;/code&gt;값 &lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt; 반환&lt;/li&gt;
&lt;li&gt;26~27번 반복&lt;/li&gt;
&lt;li&gt;요소 &lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt; 출력&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;여기까지가&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;generator_exp&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
sleep 1s
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
sleep 1s
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
sleep 1s
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;의 출력 과정이다.&lt;/p&gt;
&lt;p&gt;제너레이터는 일반적인 반복문과는 연산하는 절차가 다르다. 앞서 언급했듯 제너레이터는 값을 반환해야 할 때 제너레이터 안의 연산을 잠시 멈추고 외부로 값을 전달한다. 따라서 &lt;code class=&quot;language-text&quot;&gt;lazy_return(num)&lt;/code&gt; 함수에서 &lt;code class=&quot;language-text&quot;&gt;return&lt;/code&gt;한 값을 가지고 있으면서 &lt;code class=&quot;language-text&quot;&gt;print_iter(iter)&lt;/code&gt; 함수를 처리해주는 과정을 반복한다.&lt;/p&gt;
&lt;p&gt;반면 리스트 컴프리헨션은 &lt;code class=&quot;language-text&quot;&gt;lazy_return(num)&lt;/code&gt; 함수를 모두 처리한 후 &lt;code class=&quot;language-text&quot;&gt;print_iter(iter)&lt;/code&gt; 함수를 실행한다.&lt;/p&gt;
&lt;p&gt;제너레이터는 lazy evaluation, 즉 지연 평가 방식으로 작동한다. &lt;code class=&quot;language-text&quot;&gt;lazy_return(num)&lt;/code&gt; 함수가 훨씬 더 무거운 함수라고 가정해보자. 이때 리스트 컴프리헨션 연산 방식으로 반복문을 한 번에 처리하면 메모리가 그만큼 값을 저장하고 있으므로 서비스 성능을 저하시킬 수 있다. 제너레이터는 필요한 값을 그때그때 처리하기 때문에 메모리를 더 효율적으로 사용할 수 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python - iterator]]></title><description><![CDATA[이터레이터(iterator)는 값을 차례대로 꺼낼 수 있는 객체다. 반복 가능한(iterable) 객체에 __iter__() 메서드를 호출해서 이터레이터를 얻어낸다.]]></description><link>https://nanaon.github.io/posts/til29</link><guid isPermaLink="false">https://nanaon.github.io/posts/til29</guid><pubDate>Sat, 06 Jun 2020 16:19:32 GMT</pubDate><content:encoded>&lt;h3 id=&quot;이터레이터iterator&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0iterator&quot; aria-label=&quot;이터레이터iterator permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이터레이터(iterator)&lt;/h3&gt;
&lt;p&gt;이터레이터(iterator)는 값을 차례대로 꺼낼 수 있는 객체다. 반복 가능한(iterable) 객체에 &lt;code class=&quot;language-text&quot;&gt;__iter__()&lt;/code&gt; 메서드를 호출해서 이터레이터를 얻어내고, 그 이터레이터에 &lt;code class=&quot;language-text&quot;&gt;__next__()&lt;/code&gt;
메서드를 호출하면 요소를 차례대로 꺼낼 수 있다.&lt;/p&gt;
&lt;p&gt;반복 가능한 객체가 시퀀스형 객체만을 의미하는 것이 아니다. 시퀀스형 객체는 반복 가능한 객체 중 순서가 정해진 객체만을 의미한다. 세트와 딕셔너리는 반복 가능한 객체지만 시퀀스형 객체는 아니다. 리스트, 튜플, 문자열, range는 시퀀스형 객체다.&lt;/p&gt;
&lt;h3 id=&quot;반복-가능한iterable-객체&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%98%EB%B3%B5-%EA%B0%80%EB%8A%A5%ED%95%9Citerable-%EA%B0%9D%EC%B2%B4&quot; aria-label=&quot;반복 가능한iterable 객체 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;반복 가능한(iterable) 객체&lt;/h3&gt;
&lt;p&gt;어떠한 객체가 반복 가능한 객체인지 확인하는 방법은 &lt;code class=&quot;language-text&quot;&gt;dir()&lt;/code&gt;함수로 호출해보는 것이다. &lt;code class=&quot;language-text&quot;&gt;dir()&lt;/code&gt; 내장 함수는 어떤 객체를 인자로 넣어주면 해당 객체가 어떤 변수와 메서드를 가지고 있는지 반환해준다. 출력값에 &lt;code class=&quot;language-text&quot;&gt;__iter__()&lt;/code&gt;가 있다면 반복 가능한 객체라는 의미다. 여기에 더해 &lt;code class=&quot;language-text&quot;&gt;__next__()&lt;/code&gt; 메서드까지 가지고 있다면 다음 요소를 하나씩 꺼내올 수 있는 반복 가능한 객체라는 의미다. (예 - 제너레이터)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;L &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;L&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 출력값&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;__add__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__class__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__contains__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__delattr__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__delitem__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__dir__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__eq__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__format__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__ge__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__getattribute__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__getitem__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__gt__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__hash__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__iadd__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__imul__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__init__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__init_subclass__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__iter__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__le__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__len__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__lt__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__mul__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__ne__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__new__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__reduce__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__reduce_ex__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__repr__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__reversed__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__rmul__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__setattr__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__setitem__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__sizeof__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__str__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__subclasshook__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;append&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;clear&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;copy&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;extend&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;index&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;insert&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;pop&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;remove&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;reverse&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sort&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다만 주의할 점은 반복 가능한 객체가 곧 이터레이터를 의미하는 것은 아니라는 점이다. (iterable object ≠ iterator) 반복 가능한 객체를 &lt;code class=&quot;language-text&quot;&gt;__iter__()&lt;/code&gt; 메서드를 통해 이터레이터로 만들어주는 것이다.&lt;/p&gt;
&lt;h3 id=&quot;이터레이터-요소-출력하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%EC%9A%94%EC%86%8C-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0&quot; aria-label=&quot;이터레이터 요소 출력하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이터레이터 요소 출력하기&lt;/h3&gt;
&lt;p&gt;위에서 언급한 리스트 &lt;code class=&quot;language-text&quot;&gt;L&lt;/code&gt;을 이터레이터로 만든 후 &lt;code class=&quot;language-text&quot;&gt;dir()&lt;/code&gt;함수로 다시 호출해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; L&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__iter__&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 출력값&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;__class__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__delattr__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__dir__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__eq__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__format__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__ge__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__getattribute__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__gt__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__hash__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__init__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__init_subclass__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__iter__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__le__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__length_hint__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__lt__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__ne__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__new__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__next__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__reduce__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__reduce_ex__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__repr__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__setattr__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__setstate__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__sizeof__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__str__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__subclasshook__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;__iter__()&lt;/code&gt;에 이어 &lt;code class=&quot;language-text&quot;&gt;__next__()&lt;/code&gt;도 생긴 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;이제 리스트 &lt;code class=&quot;language-text&quot;&gt;L&lt;/code&gt;을 이터레이터로 만들어 변수 &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt;에 저장했으니 요소를 하나씩 꺼내보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__next__&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__next__&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__next__&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__next__&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 출력값&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
Traceback &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  File &lt;span class=&quot;token string&quot;&gt;&quot;hello.py&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; line &lt;span class=&quot;token number&quot;&gt;272&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__next__&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
StopIteration&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;리스트 안에 있던 요소 1, 2, 3이 모두 출력된 후 더이상 출력할 것이 없자 &lt;code class=&quot;language-text&quot;&gt;StopIteration&lt;/code&gt;이 발생했다. 이것을 이용하면 반복문에서 이터레이터가 반환할 요소가 없을 때 반복을 멈추도록 코드를 짤 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    X &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__next__&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; StopIteration&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;X &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 출력값&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;숫자를 한 줄에 출력하고 싶으면&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    X &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__next__&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; StopIteration&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;X &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고로 &lt;code class=&quot;language-text&quot;&gt;iter()&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;next()&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;__iter___()&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;__next__()&lt;/code&gt; 메서드를 사용하기 편하게 해주는 함수다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;L &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;L&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    X &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; StopIteration&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;X &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게도 사용할 수 있다.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&quot;q-딕셔너리도-반복가능한-객체라서-앞서본-리스트와-같이-__iter__함수와-__next__함수를-사용할-수-있고-파이썬-기본함수인-iter-next-또한-사용할-수-있습니다-다음의-간단한-키를-출력하는-딕셔너리에-대한-for-문을-while문으로-구현해-보세요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#q-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%8F%84-%EB%B0%98%EB%B3%B5%EA%B0%80%EB%8A%A5%ED%95%9C-%EA%B0%9D%EC%B2%B4%EB%9D%BC%EC%84%9C-%EC%95%9E%EC%84%9C%EB%B3%B8-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EA%B0%99%EC%9D%B4-__iter__%ED%95%A8%EC%88%98%EC%99%80-__next__%ED%95%A8%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EA%B3%A0-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B8%B0%EB%B3%B8%ED%95%A8%EC%88%98%EC%9D%B8-iter-next-%EB%98%90%ED%95%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4-%EB%8B%A4%EC%9D%8C%EC%9D%98-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%82%A4%EB%A5%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EB%8A%94-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%97%90-%EB%8C%80%ED%95%9C-for-%EB%AC%B8%EC%9D%84-while%EB%AC%B8%EC%9C%BC%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94&quot; aria-label=&quot;q 딕셔너리도 반복가능한 객체라서 앞서본 리스트와 같이 __iter__함수와 __next__함수를 사용할 수 있고 파이썬 기본함수인 iter next 또한 사용할 수 있습니다 다음의 간단한 키를 출력하는 딕셔너리에 대한 for 문을 while문으로 구현해 보세요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Q. 딕셔너리도 반복가능한 객체라서 앞서본 리스트와 같이 &lt;code class=&quot;language-text&quot;&gt;__iter__&lt;/code&gt;함수와 &lt;code class=&quot;language-text&quot;&gt;__next__&lt;/code&gt;함수를 사용할 수 있고 파이썬 기본함수인 iter, next 또한 사용할 수 있습니다. 다음의 간단한 키를 출력하는 딕셔너리에 대한 for 문을 while문으로 구현해 보세요.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;D &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;c&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; D&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;keys&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;a&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#a&quot; aria-label=&quot;a permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;D &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;c&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;D&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;D&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또는&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; D&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__iter__&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__next__&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; StopIteration&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 출력값&lt;/span&gt;
a
b
c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Python - list comprehension]]></title><description><![CDATA[리스트 컴프리헨션이란 새로운 리스트를 만들 때 사용할 수 있는 반복문이다. 리스트와 마찬가지로 대괄호를 사용해 작성한다.]]></description><link>https://nanaon.github.io/posts/til28</link><guid isPermaLink="false">https://nanaon.github.io/posts/til28</guid><pubDate>Sat, 06 Jun 2020 14:44:32 GMT</pubDate><content:encoded>&lt;h3 id=&quot;리스트-컴프리헨션list-comprehension&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%BB%B4%ED%94%84%EB%A6%AC%ED%97%A8%EC%85%98list-comprehension&quot; aria-label=&quot;리스트 컴프리헨션list comprehension permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리스트 컴프리헨션(list comprehension)&lt;/h3&gt;
&lt;p&gt;리스트 컴프리헨션이란 새로운 리스트를 만들 때 사용할 수 있는 반복문이다. 리스트와 마찬가지로 대괄호 &lt;code class=&quot;language-text&quot;&gt;[]&lt;/code&gt;를 사용해 작성한다. 일반 for 반복문보다 간결하게 표현할 수 있다는 장점이 있지만 조건이 많아지거나 반복이 중첩될 경우 코드 가독성이 떨어진다는 단점이 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;표현식 &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; 원소 &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; 반복 가능한 객체&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;표현식 &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; 원소 &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; 반복 가능한 객체 &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; 조건문&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일반 for 반복문과 동일한 기능이기 때문에 for문을 리스트 컴프리헨션으로 표현하는 것도, 그 반대도 가능하다.&lt;/p&gt;
&lt;p&gt;1부터 10까지 숫자 중 홀수만 뽑아내는 for문을 리스트 컴프리헨션으로 바꿔보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;odd_numbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        odd_numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;odd_numbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;element &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; element &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;odd_numbers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 출력값&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h4 id=&quot;q1-다음과-같은-도시목록의-리스트가-주어졌을때-도시이름이-s로-시작하지-않는-도시만-리스트로-만들-때-리스트-컴프리헨션을-사용하여-함수를-작성해-보세요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#q1-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EC%9D%80-%EB%8F%84%EC%8B%9C%EB%AA%A9%EB%A1%9D%EC%9D%98-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EA%B0%80-%EC%A3%BC%EC%96%B4%EC%A1%8C%EC%9D%84%EB%95%8C-%EB%8F%84%EC%8B%9C%EC%9D%B4%EB%A6%84%EC%9D%B4-s%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%8F%84%EC%8B%9C%EB%A7%8C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A1%9C-%EB%A7%8C%EB%93%A4-%EB%95%8C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%BB%B4%ED%94%84%EB%A6%AC%ED%97%A8%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94&quot; aria-label=&quot;q1 다음과 같은 도시목록의 리스트가 주어졌을때 도시이름이 s로 시작하지 않는 도시만 리스트로 만들 때 리스트 컴프리헨션을 사용하여 함수를 작성해 보세요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Q1. 다음과 같은 도시목록의 리스트가 주어졌을때, 도시이름이 S로 시작하지 않는 도시만 리스트로 만들 때 리스트 컴프리헨션을 사용하여 함수를 작성해 보세요.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;cities &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Tokyo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Shanghai&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Jakarta&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Seoul&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Guangzhou&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Beijing&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Karachi&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Shenzhen&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Delhi&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;a1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#a1&quot; aria-label=&quot;a1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A1.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;city_name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;city &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; city &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; cities &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; city&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;S&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;city_name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 출력값&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Tokyo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Jakarta&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Guangzhou&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Beijing&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Karachi&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Delhi&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h4 id=&quot;q2-다음과-같은-도시-인구수가-튜플의-리스트로-주어졌을때-키가-도시-값이-인구수인-딕셔너리를-딕셔너리-컴프리헨션을-사용한-함수를-작성해-보세요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#q2-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EC%9D%80-%EB%8F%84%EC%8B%9C-%EC%9D%B8%EA%B5%AC%EC%88%98%EA%B0%80-%ED%8A%9C%ED%94%8C%EC%9D%98-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A1%9C-%EC%A3%BC%EC%96%B4%EC%A1%8C%EC%9D%84%EB%95%8C-%ED%82%A4%EA%B0%80-%EB%8F%84%EC%8B%9C-%EA%B0%92%EC%9D%B4-%EC%9D%B8%EA%B5%AC%EC%88%98%EC%9D%B8-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EB%A5%BC-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%BB%B4%ED%94%84%EB%A6%AC%ED%97%A8%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94&quot; aria-label=&quot;q2 다음과 같은 도시 인구수가 튜플의 리스트로 주어졌을때 키가 도시 값이 인구수인 딕셔너리를 딕셔너리 컴프리헨션을 사용한 함수를 작성해 보세요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Q2. 다음과 같은 도시, 인구수가 튜플의 리스트로 주어졌을때, 키가 도시 값이 인구수인 딕셔너리를 딕셔너리 컴프리헨션을 사용한 함수를 작성해 보세요.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;population_of_city &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘Tokyo&lt;span class=&quot;token string&quot;&gt;&apos;, 36923000), (‘Shanghai&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;34000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘Jakarta&lt;span class=&quot;token string&quot;&gt;&apos;, 30000000), (‘Seoul&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25514000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘Guangzho&lt;span class=&quot;token string&quot;&gt;u&apos;, 25000000), (‘Beijing&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24900000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘Karachi&lt;span class=&quot;token string&quot;&gt;&apos;, 24300000 ), ( ‘Shenzhen&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;23300000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘Delhi&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21753486&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;a2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#a2&quot; aria-label=&quot;a2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A2.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;dict_city &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; population_of_city&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; population_of_city&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;population_of_city&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dict_city&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 출력값&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Tokyo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;36923000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Shanghai&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;34000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Jakarta&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Seoul&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25514000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Guangzhou&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Beijing&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24900000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Karachi&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24300000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Shenzhen&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;23300000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Web - 웹 동작원리]]></title><description><![CDATA[Web은 어떻게 동작할까?]]></description><link>https://nanaon.github.io/posts/til27</link><guid isPermaLink="false">https://nanaon.github.io/posts/til27</guid><pubDate>Fri, 05 Jun 2020 15:44:32 GMT</pubDate><content:encoded>&lt;p&gt;사용자가 브라우저에 주소를 쳐서 원하는 사이트 화면을 볼 수 있는 원리는 무엇일까? 느낌으로 애매하게 알던 부분을 예리님 강의 들으면서, 그리고 블로그로 정리하면서 더 명확하게 배웠다.&lt;/p&gt;
&lt;h3 id=&quot;호스팅hosting&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%98%B8%EC%8A%A4%ED%8C%85hosting&quot; aria-label=&quot;호스팅hosting permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;호스팅(Hosting)&lt;/h3&gt;
&lt;p&gt;내가 어떤 사이트를 운영한다고 가정해보자. 사용자가 언제 어디서 접속할지 알 수 없기 때문에 24시간 불침번을 서면서 사용자가 사이트를 요청할 때마다 응답을 해주어야 한다.&lt;/p&gt;
&lt;p&gt;만약 자리를 비우거나 사이트 정보가 든 컴퓨터를 종료해버렸을 때 사용자가 내 사이트를 방문하길 원한다면? 이런 참사를 막기 위해 365일 24시간 켜져있으면서 내가 신경쓰지 않아도 사용자가 사이트를 요청할 때마다 응답해주는 컴퓨터를 빌려서 써야한다. 이러한 서비스를 호스팅이라고 한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;ip&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ip&quot; aria-label=&quot;ip permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IP&lt;/h3&gt;
&lt;p&gt;인터넷에 연결해서 쓸 수 있는 모든 장비에는 숫자로 된 고유 주소가 있다. 이것을 IP라고 한다. 32비트 값을 가진 숫자로, 8비트씩 끊어서 4개 영역으로 표기한다.(영역간 구분자는 &lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt;) 각 자리는 00000000부터 11111111까지이며 이것을 10진수로 표현하면 0부터 255까지다.&lt;/p&gt;
&lt;p&gt;IP 주소를 가지는 단말이 점차 늘어남에 따라 IPv4 주소는 거의 고갈되었고, 차기 주소 체계로 128비트 값을 가지는 IPv6를 할당하고 있다. IPv6는 16진수로 표현한 네 자리 숫자를 8개 영역으로 표기한다. (영역간 구분자는 &lt;code class=&quot;language-text&quot;&gt;:&lt;/code&gt;)&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;도메인domain&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EB%A9%94%EC%9D%B8domain&quot; aria-label=&quot;도메인domain permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도메인(Domain)&lt;/h3&gt;
&lt;p&gt;내가 A라는 사이트에 들어가고 싶을 때, A 사이트만 가진 고유 IP 주소를 통해 들어간다. 하지만 보통 사용자 입장에서 숫자로만 이루어진 IP 주소를 기억하기란 쉽지 않다. 따라서 인식을 위해 IP 대신 특징이 있는 이름을 쓰게 되었다. 그것이 도메인이다.&lt;/p&gt;
&lt;p&gt;예를 들어, 네이버 도메인은 &lt;code class=&quot;language-text&quot;&gt;www.naver.com&lt;/code&gt; 이고, 구글 도메인은 &lt;code class=&quot;language-text&quot;&gt;www.google.com&lt;/code&gt; 이다. 숫자보다 훨씬 기억하기 쉽다.&lt;/p&gt;
&lt;p&gt;도메인은 protocol, sub domain, domain, top level domain, port, path와 parameter(또는 query string)로 구성된다.&lt;/p&gt;
&lt;p&gt;아래 주소를 예시로 들면,&lt;/p&gt;
&lt;p&gt;http://item.gmarket.co.kr/Item?goodscode=1510637585&amp;ver=637269671480572731&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;https&lt;/code&gt; - 프로토콜&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;item&lt;/code&gt; - 서브도메인&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;gmarket&lt;/code&gt; - 도메인&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;co.kr&lt;/code&gt; - 탑 레벨 도메인&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Item&lt;/code&gt; - 패스&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;goodscode=1510637585&lt;/code&gt; - 파라미터 1&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ver=637269671480572731&lt;/code&gt; - 파라미터 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;패스와 파라미터는 &lt;code class=&quot;language-text&quot;&gt;?&lt;/code&gt;로 구분하고 각 파라미터는 &lt;code class=&quot;language-text&quot;&gt;&amp;amp;&lt;/code&gt;로 연결한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;dnsdomain-name-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dnsdomain-name-system&quot; aria-label=&quot;dnsdomain name system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DNS(Domain Name System)&lt;/h3&gt;
&lt;p&gt;사용자는 사이트를 도메인 주소로 인지하지만 호스트 서버에서는 여전히 IP 주소로 인지한다. 따라서 사용자가 입력한 도메인 주소만으로도 알맞은 IP 주소를 찾아갈 수 있게 하려면 도메인과 IP 주소를 연결해주는 작업이 필요하다. 이것을 DNS라고 한다.&lt;/p&gt;
&lt;p&gt;사용자가 브라우저에서 특정 도메인을 입력하면, DNS 서버는 그 도메인에 맞는 IP 주소를 브라우저에 보내준다. 그럼 브라우저는 다시 그 IP 주소를 호스트 서버에 보내, 사용자가 방문하려는 사이트의 정보(HTML, CSS, JavaScript 정보)를 브라우저에게 보내준다. 이런 과정을 통해 사용자는 도메인 주소만으로도 사이트에 방문할 수 있다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;배포deploy&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%ED%8F%ACdeploy&quot; aria-label=&quot;배포deploy permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배포(deploy)&lt;/h3&gt;
&lt;p&gt;내가 로컬에서 열심히 개발한 서비스가 있다고 가정해보자. 아주 멋있는 동적 사이트를 만들어내서 자랑하고 싶지만, 가족이나 지인에게 내 컴퓨터를 내밀거나 카톡으로 사진을 찍어보내는 방법밖에 없을 것이다.&lt;/p&gt;
&lt;p&gt;따라서 전세계에서 내 서비스에 24시간 접속 가능하도록 하려면 호스트 서버에 띄워야 하는데, 이것을 배포라고 한다. 즉, 개발자에게 배포란 내 자식 출생신고 하는 것과 다름없는 기념비적인 일이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python - package 실습]]></title><description><![CDATA[calculator 패키지 만들기 실습]]></description><link>https://nanaon.github.io/posts/til26</link><guid isPermaLink="false">https://nanaon.github.io/posts/til26</guid><pubDate>Fri, 05 Jun 2020 10:56:32 GMT</pubDate><content:encoded>&lt;p&gt;로컬 환경에서 파이썬을 설치하고 진행해 주세요.
디렉토리 구조는 다음과 같고 각 파일의 코드내용은 다음과 같습니다.
&lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt; 파일에는 아무코드도 없지만 init 파일은 해당 디렉토리가 패키지임을 알려주는 역할을 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;./calculator/add_and_multiply.py
./calculator/multiplication.py
./main.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;main.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# absoulte path&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#from calculator.add_and_multiply import add_and_multiply &lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# relative path&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;calculator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;add_and_multiply &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; add_and_multiply

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; __name__ &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;add_and_multiply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;add_and_multiply.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;multiplication &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; multiply
&lt;span class=&quot;token comment&quot;&gt;# from calculator.multiplication import multiply&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add_and_multiply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; multiply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;multiplication.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h4 id=&quot;q1-mainpy에서-상대경로로-add_and_mutiply를-임포트-했을-때-발생하는-에러를-확인하고-main-module에서는-패키지의-모듈을-어떻게-임포트-해야하는지-서술하세요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#q1-mainpy%EC%97%90%EC%84%9C-%EC%83%81%EB%8C%80%EA%B2%BD%EB%A1%9C%EB%A1%9C-add_and_mutiply%EB%A5%BC-%EC%9E%84%ED%8F%AC%ED%8A%B8-%ED%96%88%EC%9D%84-%EB%95%8C-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%97%90%EB%9F%AC%EB%A5%BC-%ED%99%95%EC%9D%B8%ED%95%98%EA%B3%A0-main-module%EC%97%90%EC%84%9C%EB%8A%94-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%9D%98-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%84%ED%8F%AC%ED%8A%B8-%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94%EC%A7%80-%EC%84%9C%EC%88%A0%ED%95%98%EC%84%B8%EC%9A%94&quot; aria-label=&quot;q1 mainpy에서 상대경로로 add_and_mutiply를 임포트 했을 때 발생하는 에러를 확인하고 main module에서는 패키지의 모듈을 어떻게 임포트 해야하는지 서술하세요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Q1. &lt;code class=&quot;language-text&quot;&gt;main.py&lt;/code&gt;에서 상대경로로 &lt;code class=&quot;language-text&quot;&gt;add_and_mutiply&lt;/code&gt;를 임포트 했을 때 발생하는 에러를 확인하고 main module에서는 패키지의 모듈을 어떻게 임포트 해야하는지 서술하세요.&lt;/h4&gt;
&lt;h4 id=&quot;a1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#a1&quot; aria-label=&quot;a1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A1.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;Traceback &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  File &lt;span class=&quot;token string&quot;&gt;&quot;main.py&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; line &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;calculator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;add_and_multiply &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; add_and_multiply
ImportError&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; attempted relative &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; no known parent package&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;알 수 없는 부모 패키지로부터 import를 시도했을 때 뜨는 오류다.&lt;/p&gt;
&lt;p&gt;파이썬에서 상대경로로 import할 때는 기준점을 잡기 위해 &lt;code class=&quot;language-text&quot;&gt;__name__&lt;/code&gt; 변수를 이용한다. &lt;code class=&quot;language-text&quot;&gt;__name__&lt;/code&gt; 변수는 모듈의 이름을 저장하고 있다. 따라서 &lt;code class=&quot;language-text&quot;&gt;main.py&lt;/code&gt; 파일에서 조건문 &lt;code class=&quot;language-text&quot;&gt;if __name__ == &amp;#39;__main__&amp;#39;:&lt;/code&gt;의 의미는 현재 모듈이 main module(=시작점)일 경우에 조건을 실행하라는 뜻이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;-m 모듈이름&lt;/code&gt; 명령어는 해당 모듈을 &lt;code class=&quot;language-text&quot;&gt;sys.path&lt;/code&gt;에서 검색하고 그것을 main module로 실행하라는 의미다. &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; 모듈이 있는 프로젝트 폴더 외부에서 &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; 모듈의 경로를 명시한 뒤 실행하면 에러 없이 결과값이 나온다.&lt;/p&gt;
&lt;p&gt;프로젝트 폴더 이름을 &lt;code class=&quot;language-text&quot;&gt;cal-project&lt;/code&gt;라고 하고 프로젝트 폴더의 상위 폴더 이름을 &lt;code class=&quot;language-text&quot;&gt;python-project&lt;/code&gt;라고 하면,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# python-project 디렉토리에서 명령어 실행&lt;/span&gt;
python &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;m cal&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 결과값&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;가 출력된다.&lt;/p&gt;
&lt;p&gt;한 단계 더 상위 폴더에서 실행해도 절대경로만 지정해주면 마찬가지로 실행할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# python-project 디렉토리의 상위 디렉토리인 python에서 명령어 실행&lt;/span&gt;
python &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;m python&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cal&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 결과값&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아니면 절대경로로 import하는 간편한^^! 방법도 있다. 역시 절대경로를 권장하는 이유가 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# absoulte path&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; calculator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;add_and_multiply &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; add_and_multiply 

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; __name__ &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;add_and_multiply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 결과값&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h4 id=&quot;q2-add_and_multiplypy에서-multiply함수를-절대경로와-상대경로도-각각-임포트-해보고-main-모듈과-차이점을-생각해보고-결과를-출력해-보세요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#q2-add_and_multiplypy%EC%97%90%EC%84%9C-multiply%ED%95%A8%EC%88%98%EB%A5%BC-%EC%A0%88%EB%8C%80%EA%B2%BD%EB%A1%9C%EC%99%80-%EC%83%81%EB%8C%80%EA%B2%BD%EB%A1%9C%EB%8F%84-%EA%B0%81%EA%B0%81-%EC%9E%84%ED%8F%AC%ED%8A%B8-%ED%95%B4%EB%B3%B4%EA%B3%A0-main-%EB%AA%A8%EB%93%88%EA%B3%BC-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B3%A0-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%EC%B6%9C%EB%A0%A5%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94&quot; aria-label=&quot;q2 add_and_multiplypy에서 multiply함수를 절대경로와 상대경로도 각각 임포트 해보고 main 모듈과 차이점을 생각해보고 결과를 출력해 보세요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Q2. &lt;code class=&quot;language-text&quot;&gt;add_and_multiply.py&lt;/code&gt;에서 multiply함수를 절대경로와 상대경로도 각각 임포트 해보고 main 모듈과 차이점을 생각해보고 결과를 출력해 보세요.&lt;/h4&gt;
&lt;h4 id=&quot;a2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#a2&quot; aria-label=&quot;a2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A2.&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 절대경로&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; multiplication &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; multiply
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add_and_multiply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; multiply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;add_and_multiply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#결과값&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 상대경로&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;multiplication &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; multiply
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add_and_multiply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; multiply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;Traceback &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  File &lt;span class=&quot;token string&quot;&gt;&quot;add_and_multiply.py&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; line &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;multiplication &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; multiply
ImportError&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; attempted relative &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; no known parent package&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;상대경로로 import 시 &lt;code class=&quot;language-text&quot;&gt;main.py&lt;/code&gt;에서 발생한 것과 같은 에러가 뜬다. 마찬가지로 main module인 &lt;code class=&quot;language-text&quot;&gt;add_and_multiply&lt;/code&gt; 모듈의 위치를 잡지 못해 발생하는 에러다.&lt;/p&gt;
&lt;p&gt;따라서 &lt;code class=&quot;language-text&quot;&gt;add_and_multiply&lt;/code&gt; 모듈이 있는 폴더의 상위 폴더에서 &lt;code class=&quot;language-text&quot;&gt;-m&lt;/code&gt; 명령어로 실행해주면 된다. (경로: &lt;code class=&quot;language-text&quot;&gt;cal-project/calculator/add_and_multiply.py&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# cal-project 폴더에서 명령어 실행&lt;/span&gt;
python &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;m calculator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;add_and_multiply&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#결과값&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Python - module과 package]]></title><description><![CDATA[파이썬에서 모듈은 변수, 함수, 클래스 등을 모아놓은 파일이다. 매번 변수, 함수, 클래스 등을 선언할 필요 없이 모듈을 import해오면 바로 사용할 수 있어 편리하다. 모듈을 사용하면 코드가 너무 길어지는 것 또한 막을 수 있다.]]></description><link>https://nanaon.github.io/posts/til25</link><guid isPermaLink="false">https://nanaon.github.io/posts/til25</guid><pubDate>Thu, 04 Jun 2020 20:51:32 GMT</pubDate><content:encoded>&lt;h3 id=&quot;module&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#module&quot; aria-label=&quot;module permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;module?&lt;/h3&gt;
&lt;p&gt;파이썬에서 모듈은 변수, 함수, 클래스 등을 모아놓은 파일이다. 매번 변수, 함수, 클래스 등을 선언할 필요 없이 모듈을 import해오면 바로 사용할 수 있어 편리하다. 모듈을 사용하면 코드가 너무 길어지는 것 또한 막을 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;len()&lt;/code&gt; 같은 파이썬 내장 모듈이 있고, 사용자가 직접 만들 수도 있다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;module-만드는-법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#module-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B2%95&quot; aria-label=&quot;module 만드는 법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;module 만드는 법&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;모듈명.py&lt;/code&gt; 파일 안에 재사용 하고싶은 변수, 함수, 클래스 등을 선언한다. 한 파일 안에서 여러 종류 요소를 여러 개 선언할 수 있다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;module-사용하는-법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#module-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B2%95&quot; aria-label=&quot;module 사용하는 법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;module 사용하는 법&lt;/h3&gt;
&lt;p&gt;모듈을 쓰고자 할 때 &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt;로 해당 모듈을 끌어온다. 이때 모듈명에서 확장자 &lt;code class=&quot;language-text&quot;&gt;.py&lt;/code&gt;는 쓰지 않는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; 모듈명&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또는&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; 모듈명 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; 변수 또는 함수 또는 클래스명&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또는&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; 모듈명 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;*&lt;/code&gt;는 모듈 파일 안 전체 내용을 끌어오는 것을 의미한다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;다른 모듈이지만 요소 이름이 같을 수 있기 때문에 import 하면서 요소 이름을 바꿔서 가져오는 것도 가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; 모듈명 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; 변수 또는 함수 또는 클래스명 &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; 새 이름&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;물론 모듈 이름을 바꿔서 가져올 수도 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; 모듈명 &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; 새 이름&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;package&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#package&quot; aria-label=&quot;package permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;package?&lt;/h3&gt;
&lt;p&gt;패키지는 모듈을 모아놓은 묶음, 일종의 폴더다. 한 모듈 안에 모든 코드를 넣을 수 없을 경우 여러 파일로 분산해서 관리하는데, 이렇게 나눠진 모듈도 한 곳에서 사용할 수 있도록 해주는 것이 패키지다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;package-사용하는-법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#package-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B2%95&quot; aria-label=&quot;package 사용하는 법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;package 사용하는 법&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; 패키지명&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;파일명&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또는&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; 패키지명&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;파일명 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; 변수 또는 함수 또는 클래스명&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 패키지를 불러온 뒤,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;패키지명&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;파일명&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;변수 또는 함수 또는 클래스명

변수 또는 함수 또는 클래스명&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 실행한다.&lt;/p&gt;
&lt;p&gt;패키지를 import할 때 초기 설정을 해줘야 할 때가 있다. 그럴 땐 패키지 폴더 안에 &lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt; 파일을 통해 패키지 초기 설정을 한다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;initpy-파일의-역할&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#initpy-%ED%8C%8C%EC%9D%BC%EC%9D%98-%EC%97%AD%ED%95%A0&quot; aria-label=&quot;initpy 파일의 역할 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;init&lt;/strong&gt;.py 파일의 역할&lt;/h3&gt;
&lt;p&gt;python 3.2 이전 버전에서는 &lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt; 파일이 해당 폴더가 패키지임을 알려주는 역할을 했다. python 3.3 이상부터 &lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt; 파일이 없어도 패키지로 인식한다. 하지만 하위 버전과 호환을 위해 &lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt; 파일을 작성하는 것을 권장한다.&lt;/p&gt;
&lt;p&gt;패키지 폴더 안에 &lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt; 파일이 있으면 패키지가 import될 때 &lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt; 파일 내 코드가 자동으로 실행된다.
&lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt; 파일의 역할은 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;import할 때 경로 길이를 줄여준다.&lt;/li&gt;
&lt;li&gt;패키지 외부에서 import할 수 있는 변수/함수/클래스를 제한할 수 있다.&lt;/li&gt;
&lt;li&gt;패키지가 import될 때 먼저 실행되어야 하는 코드를 지정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예시와 함께 자세한 내용을 살펴보자.&lt;/p&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;import할 때 경로 길이를 줄여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;package1&lt;/code&gt;이라는 패키지 안 &lt;code class=&quot;language-text&quot;&gt;module1&lt;/code&gt; 모듈에서 &lt;code class=&quot;language-text&quot;&gt;func1()&lt;/code&gt; 함수를 꺼내 쓴다고 가정해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; package1

package1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;module1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;func1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;해당 함수를 쓸 때마다 패키지 - 모듈 - 함수 이름 순으로 불러와야 한다. 이때 &lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt;를 사용하면 경로를 단축해서 쓸 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# __init__.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;module1 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; func1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 &lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt; 파일에 &lt;code class=&quot;language-text&quot;&gt;func1()&lt;/code&gt;을 import 하면,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; package1 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; func1

func1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;훨씬 간결하게 &lt;code class=&quot;language-text&quot;&gt;func1()&lt;/code&gt;을 호출할 수 있다.&lt;/p&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;패키지 외부에서 import할 수 있는 변수/함수/클래스를 제한할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;패키지 외부에서 import 하면 안 되는 변수/함수/클래스를 &lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt; 파일에 지정할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;package2&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;module2&lt;/code&gt;안 &lt;code class=&quot;language-text&quot;&gt;func2&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;module3&lt;/code&gt;안 &lt;code class=&quot;language-text&quot;&gt;func3&lt;/code&gt;라는 함수만 패키지 외부로 끌어오고 싶은 경우를 가정해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# __init__.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;module2 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; func2
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;module3 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; func3

__all__ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;func2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;func3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;__all__&lt;/code&gt; 변수는 기본적으로 모듈 안 모든 변수/함수/클래스를 string list 형태로 가지고 있다. 만약 일부 변수/함수/클래스만 가져와야 한다면 그것을 &lt;code class=&quot;language-text&quot;&gt;__all__&lt;/code&gt; 리스트 안에 넣어주면 된다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt; 파일에 이렇게 작성한 후 &lt;code class=&quot;language-text&quot;&gt;func2&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;func3&lt;/code&gt; 외 다른 변수/함수/클래스를 import 한다면 아래와 같은 에러 메시지가 뜬다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; package2 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;

func2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
func3&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
func4&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/naon/post/e53b33fd-00e2-407c-a4ab-4781659f0502/Screen%20Shot%202020-06-04%20at%206.29.27%20PM.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;패키지가 import될 때 먼저 실행되어야 하는 코드를 지정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;module4&lt;/code&gt; 안에 함수 &lt;code class=&quot;language-text&quot;&gt;func4()&lt;/code&gt;부터 &lt;code class=&quot;language-text&quot;&gt;func10()&lt;/code&gt;까지 있다고 가정해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# __init__.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;module4 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; func4&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; func5&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; func6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 어떤 변수/함수/클래스를 어떤 순서로 import할지 &lt;code class=&quot;language-text&quot;&gt;__init__.py&lt;/code&gt; 파일에서 지정할 수 있다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;sysmodule와-syspath의-차이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#sysmodule%EC%99%80-syspath%EC%9D%98-%EC%B0%A8%EC%9D%B4&quot; aria-label=&quot;sysmodule와 syspath의 차이 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;sys.module와 sys.path의 차이&lt;/h3&gt;
&lt;p&gt;미리 지정된 모듈을 끌어와서 쓴다는 이야기는 파이썬이 모듈을 어딘가에 저장해놓았다는 의미다. 파이썬이 사용자가 import한 모듈을 찾는 과정은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sys.modules 확인&lt;/li&gt;
&lt;li&gt;built-in modules 확인&lt;/li&gt;
&lt;li&gt;sys.path 확인&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;sys.modules&lt;/strong&gt;는 한 번이라도 import된 모듈과 패키지를 저장하고 있다. 즉, 한 번도 import한 적 없는 모듈, 패키지는 sys.modules에 없다. 요소를 dictionary 형태로 저장하고 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/naon/post/eadbebed-bbee-431a-8390-9c679421a53f/Screen%20Shot%202020-06-04%20at%201.11.21%20PM.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;built-in modules&lt;/strong&gt;는 파이썬에 기본으로 달려있는 공식 라이브러리다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sys.path&lt;/strong&gt;는 경로를 나타내는 string을 list 형태로 저장하고 있다. 사용자가 import한 모듈이 &lt;code class=&quot;language-text&quot;&gt;sys.modules&lt;/code&gt;에도 없고 &lt;code class=&quot;language-text&quot;&gt;built-in module&lt;/code&gt;에도 없을 때 sys.path에 저장된 경로를 훑으면서 모듈을 찾는다. 만약 sys.path에서도 모듈을 못 찾을 경우 &lt;code class=&quot;language-text&quot;&gt;ModuleNotFoundError&lt;/code&gt;가 발생한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/naon/post/3de6126b-50f7-4c6a-8353-dd07688f2df9/Screen%20Shot%202020-06-04%20at%201.16.58%20PM.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;python이-sys-module을-찾는-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#python%EC%9D%B4-sys-module%EC%9D%84-%EC%B0%BE%EB%8A%94-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;python이 sys module을 찾는 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Python이 sys module을 찾는 과정&lt;/h3&gt;
&lt;p&gt;sys 또한 모듈의 하나다. 어떤 파이썬 버전이든 파이썬이 설치되어있기만 하다면 sys 모듈을 import할 수 있다. 즉, sys 모듈은 파이썬 기본 내장 모듈인 built-in modules라는 의미다.&lt;/p&gt;
&lt;p&gt;위에서 sys.modules를 호출하기 위해 &lt;code class=&quot;language-text&quot;&gt;import sys&lt;/code&gt;를 했더니 딕셔너리 첫 번째 요소가 &lt;code class=&quot;language-text&quot;&gt;&amp;#39;sys&amp;#39;: &amp;lt;module &amp;#39;sys&amp;#39; (built-in)&amp;gt;&lt;/code&gt; 인 것을 확인할 수 있다. 괄호 안에 built-in 모듈인 것도 명시해놨다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/naon/post/8773b006-2010-4a86-97c8-89818cf4e904/Screen%20Shot%202020-06-04%20at%201.11.21%20PM.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;따라서 파이썬은 앞으로 나의 로컬에서 sys 모듈을 &lt;code class=&quot;language-text&quot;&gt;sys.modules&lt;/code&gt;에서 찾을 것이다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;absolute-path와-relative-path&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#absolute-path%EC%99%80-relative-path&quot; aria-label=&quot;absolute path와 relative path permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;absolute path와 relative path&lt;/h3&gt;
&lt;p&gt;사용자가 직접 만든 패키지나 모듈을 import할 때에는 해당 디렉토리 또는 파일이 있는 경로를 직접 지정해야 한다.&lt;/p&gt;
&lt;p&gt;절대경로(absolute path)는 어떤 디렉토리나 파일이 있는 고유한 위치다. 예를 들어 python이라는 프로젝트 디렉토리 안에 있는 package1의 절대 경로는 &lt;code class=&quot;language-text&quot;&gt;python.package1&lt;/code&gt;이다. package1 안에 있는 module1.py 파일의 절대 경로는 &lt;code class=&quot;language-text&quot;&gt;python.package1.module1&lt;/code&gt;이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; package1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;module1 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; func1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;현재 프로젝트 디렉토리는 자동으로 경로에 포함되기 때문에 절대경로에 지정해주지 않아도 된다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;상대경로(relative path)는 import할 특정 디렉토리나 파일을 기준으로 표시한 위치다. 일반적으로 relative path는 한 로컬 패키지 디렉토리 안에서 다른 로컬 패키지를 import할 때 사용한다.&lt;/p&gt;
&lt;p&gt;하나의 프로젝트 디렉토리 안에 package2 패키지와 package3 패키지가 있다고 가정해보자. 이때 package2의 module2에서 package3의 module3을 import해서 func3를 사용하려고 한다면,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# package2/module2.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;package3&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;module3 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; func3&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;상대경로는 경로를 짧게 쓸 수 있지만, 현재 위치한 디렉토리가 어디인지, 내가 필요한 모듈이 현재 위치를 기준으로 어디에 있는지 헷갈릴 수 있다. 또한 패키지나 모듈의 위치가 바뀌었을 때 다시 선언해주어야 하는 단점이 있다.&lt;/p&gt;</content:encoded></item></channel></rss>