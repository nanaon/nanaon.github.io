{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til33","result":{"data":{"markdownRemark":{"id":"9cfcb6c1-96a1-552a-8532-959f482546e7","html":"<h3 id=\"http란\" style=\"position:relative;\"><a href=\"#http%EB%9E%80\" aria-label=\"http란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP란?</h3>\n<p>HyperText Transfer Protocol 줄임말로, 하이퍼텍스트 문서(HTML)를 교환하기 위해 만들어진 통신 규약(protocol)이다. 즉, 웹 상에서 클라이언트와 서버 간 혹은 서버끼리 통신을 할 때 어떤 방식으로 할지 정해놓은 규칙이다. 주소 맨 앞에 있는 <code class=\"language-text\">http://</code> 가 이 프로토콜로 정보를 교환하겠다는 뜻이다.</p>\n<br>\n<h3 id=\"http-특징\" style=\"position:relative;\"><a href=\"#http-%ED%8A%B9%EC%A7%95\" aria-label=\"http 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP 특징</h3>\n<p>HTTP는 클라이언트가 요청을 보내면 서버가 응답하는 요청(request) - 응답(reponse) 구조다. 클라이언트가 특정 웹 페이지나 이미지를 요청하면 서버에서 요청에 해당하는 정보를 응답해 클라이언트가 웹 페이지를 볼 수 있게 하는 식이다. 클라이언트에게 응답 후에는 연결을 바로 끊기 때문에 각 요청 - 응답은 독립적으로 이루어진다. 보통 클라이언트와 서버는 n:1 관계이므로 계속해서 연결을 유지해놓을 수가 없기 때문이다. 하지만 클라이언트의 요청을 기억해놓을 필요가 있을 때(예: 장바구니에 담은 물건)에는 쿠키나 세션을 이용한다.</p>\n<br>\n<h3 id=\"http-request-구조\" style=\"position:relative;\"><a href=\"#http-request-%EA%B5%AC%EC%A1%B0\" aria-label=\"http request 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP Request 구조</h3>\n<ul>\n<li>Start line</li>\n<li>Headers</li>\n<li>Body</li>\n</ul>\n<h4 id=\"start-line\" style=\"position:relative;\"><a href=\"#start-line\" aria-label=\"start line permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Start line</h4>\n<p>HTTP request 첫 줄이다. HTTP 메서드, request target uri, HTTP 버전 세 가지로 구성된다.\n<code class=\"language-text\">GET www.naver.com HTTP/1.1</code>은 브라우저 주소창에 <code class=\"language-text\">www.naver.com</code>을 입력해서 네이버 웹 사이트를 불러와달라는 요청을 한 것과 같다.</p>\n<p><strong>HTTP 메서드</strong>란 해당 request가 의도한 것이 무엇인지 정의하는 부분이다. 여러 종류가 있는데, 주로 쓰이는 것은 <code class=\"language-text\">GET</code>과 <code class=\"language-text\">POST</code> 방식이다.</p>\n<blockquote>\n<p>아주 단순하게 생각하면 이렇다.<br>\nPOST - 생성 (예: 새 글 생성)<br>\nGET - 조회 (예: 검색 결과 받아오기)<br>\nPUT - 수정 (예: 댓글 수정)<br>\nDELETE - 삭제 (예: 글 삭제)<br>\n등등</p>\n</blockquote>\n<p><strong>request target uri</strong>란 해당 request가 전송되는 목표 uri다. <code class=\"language-text\">https://www.naver.com/NOTICE</code> 에서 <code class=\"language-text\">/NOTICE</code> 부분이다.</p>\n<h4 id=\"headers\" style=\"position:relative;\"><a href=\"#headers\" aria-label=\"headers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Headers</h4>\n<p>해당 request에 대한 추가 정보를 담고 있는 부분이다. Host, User-Agent, Accept, Connection, Content-Type, Content-Length, Date, Connection, Cache-Control, Content-Language, Content-Encoding 등의 key가 있고, 해당하는 value가 <code class=\"language-text\">key:value</code> 형태로 표시된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Accept: */*\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Type: application/json\nContent-Length: <span class=\"token number\">257</span>\nHost: google.com <span class=\"token comment\">#접속한 주소</span>\nUser-Agent: HTTPie/0.9.3</code></pre></div>\n<h4 id=\"body\" style=\"position:relative;\"><a href=\"#body\" aria-label=\"body permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Body</h4>\n<p>request 실제 내용이 담기는 부분이다. 회원 가입 시 사용자가 이름, 아이디, 비밀번호 값을 입력한다고 할 때 body에 이 정보가 담겨 POST 메서드로 서버에 전송된다. 있는 것을 불러오기만 하는 GET request는 대부분 body가 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">POST /payment-sync HTTP/1.1\n\nAccept: application/json\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: <span class=\"token number\">83</span>\nContent-Type: application/json\nHost: intropython.com\nUser-Agent: HTTPie/0.9.3\n\n<span class=\"token comment\"># body 부분</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"imp_uid\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"imp_1234567890\"</span>,\n    <span class=\"token string\">\"merchant_uid\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"order_id_8237352\"</span>,\n    <span class=\"token string\">\"status\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"paid\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"http-response-구조\" style=\"position:relative;\"><a href=\"#http-response-%EA%B5%AC%EC%A1%B0\" aria-label=\"http response 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP Response 구조</h3>\n<ul>\n<li>Status line</li>\n<li>Headers</li>\n<li>Body</li>\n</ul>\n<h4 id=\"status-line\" style=\"position:relative;\"><a href=\"#status-line\" aria-label=\"status line permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Status line</h4>\n<p>Response 상태가 어떤지 나타내주는 부분이다. HTTP 버전, Status 코드, Status 텍스트로 구성된다. <code class=\"language-text\">HTTP/1.1 404 Not Found</code>라는 status line은 HTTP 1.1 버전이며 404 에러, 즉 요청한 url을 찾을 수 없다는 상태를 나타냅니다.</p>\n<ul>\n<li>\n<p>주요 Status code와 status text</p>\n<ul>\n<li>200 OK: 클라이언트의 요청을 정상적으로 수행함</li>\n<li>201 Created: 클라이언트가 어떠한 리소스 생성을 요청, 해당 리소스가 성공적으로 생성됨(POST를 통한 리소스 생성 작업 시)</li>\n<li>301 Moved Permanently: 클라이언트가 요청한 리소스에 대한 uri가 변경되었을 때 사용하는 응답 코드. 응답 시 location header에 변경한 uri를 적어줘야 함</li>\n<li>400 Bad Request: 클라이언트의 요청이 잘못됐을 때 사용하는 응답 코드 (예: 전화번호를 보내야 하는데 텍스트를 보냈을 때)</li>\n<li>401 Unauthorized: 클라이언트가 인증되지 않은 상태에서 보호된 리소스를 요청했을 때 사용하는 응답 코드 (예: 비로그인 유저가, 로그인 유저만 요청 가능한 리소스를 요청했을 때)</li>\n<li>403 Forbidden: 유저 인증상태과 관계 없이 권한이 없는 리소스를 클라이언트가 요청했을 때 사용하는 응답 코드 (예: 과금 유저만 볼 수 있는 데이터를 요청했을 때)</li>\n<li>404 Not Found: 요청한 url이 존재하지 않을 때 사용하는 응답 코드</li>\n<li>405 Method Not Allowed: 클라이언트가 요청한 리소스에서는 사용 불가능한 메서드를 이용했을 경우 사용하는 응답 코드</li>\n<li>500 Internal Server Error: 서버에 문제가 있을 경우 사용하는 응답 코드</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://http.cat/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><del>별 건 없고 그냥 귀여우니까 보세요.</del></a></p>\n<h4 id=\"headers-body\" style=\"position:relative;\"><a href=\"#headers-body\" aria-label=\"headers body permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>headers, body</h4>\n<p>Request headers, body와 기본적으로 동일하다. 단 body는 request와 마찬가지로 데이터를 전송할 필요가 없을 때에는 비어있다.</p>\n<br>\n<h3 id=\"restful-api\" style=\"position:relative;\"><a href=\"#restful-api\" aria-label=\"restful api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful API</h3>\n<p>RESTful API는 REST를 통해 서비스 API를 구현한 것이다. REST란 REpresentational State Transfer의 약자로, HTTP기반으로 필요한 자원에 접근하는 방식의 일종이다.</p>\n<h4 id=\"uri란\" style=\"position:relative;\"><a href=\"#uri%EB%9E%80\" aria-label=\"uri란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URI란?</h4>\n<p>앞서 URI는 어떤 사이트 내에서 특정 자원의 위치를 나타내는 유일한 주소라고 설명했다. 여기서 자원이란, DB에 저장된 데이터, 이미지, 문서, 웹 상에서 일어나는 서비스 등을 말한다. 모든 자원은 클라이언트가 바로 접근할 수 있는 고유 URI를 가진다. 이 자원에는 HTTP 메소드로 접근한다.</p>\n<h4 id=\"uri-설계-규칙\" style=\"position:relative;\"><a href=\"#uri-%EC%84%A4%EA%B3%84-%EA%B7%9C%EC%B9%99\" aria-label=\"uri 설계 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URI 설계 규칙</h4>\n<ul>\n<li><code class=\"language-text\">/</code>는 계층 관계를 나타낼 때 사용한다. <code class=\"language-text\">https://www.naver.com/NOTICE/1</code>는 네이버 사이트 안에 있는 공지사항 페이지 중 1번 게시글을 의미한다.</li>\n<li><code class=\"language-text\">_</code>보다는 <code class=\"language-text\">-</code>을 사용한다.</li>\n<li>영어 대문자보다는 소문자를 사용한다.</li>\n<li>가독성을 위해 너무 긴 단어는 쓰지 않는다.</li>\n<li>메서드(<code class=\"language-text\">GET</code>, <code class=\"language-text\">POST</code> 등)가 동사이므로 혼동을 막기 위해 URI는 명사를 사용한다.</li>\n</ul>\n<br>\n<h3 id=\"기타-알아두면-좋을-것\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%EC%95%8C%EC%95%84%EB%91%90%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83\" aria-label=\"기타 알아두면 좋을 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 알아두면 좋을 것</h3>\n<ul>\n<li>클라이언트에서 서버로 데이터를 전달하려면 HTTP request의 body에 넣으면 된다.</li>\n<li>쿠키나 세션에 응답을 저장한 경우에 한해, 이전 응답을 확인하기 위해서는 쿠키나 세션을 확인하면 된다.</li>\n<li>클라이언트에서 서버로부터 받은 데이터는 HTTP response를 확인하면 된다.</li>\n<li>HTTP는 Stateless이다.</li>\n<li>HTTP는 백엔드 - 프론트엔드 간의 통신에 필요하다.</li>\n<li>HTTP는 기본적으로 요청/응답 (request/response) 구조로 되어있다.</li>\n<li>백엔드와 백엔드끼리 요청에도 사용할 수 있다. (서버 간 통신)</li>\n<li>HTTP request 메세지 중에서 해당 request의 실제 메세지/내용이 포함된 것은 body다.</li>\n<li>HTTP Response의 Status Line에서 문제없이 다 잘 실행 되었을때 보내는 status code는 200이다.</li>\n<li>카테고리 목록을 조회하는 API 엔드포인트의 올바른 HTTP 메소드와 주소는 <code class=\"language-text\">GET</code>, <code class=\"language-text\">http://wecode.co.kr/category</code>이다.</li>\n<li>회원가입하는 엔드포인트로서 적절한 것은 <code class=\"language-text\">POST</code>, <code class=\"language-text\">http://wecode.co.kr/user/sign-up</code>이다.</li>\n<li>사용자 로그인을 진행하는 엔드포인트로 올바른 메소드와 주소는 <code class=\"language-text\">POST</code>, <code class=\"language-text\">http://wecode.co.kr/user/sign-in</code>이다.</li>\n<li>1번 상품의 상세 정보를 볼 수 있는 엔드포인트의 주소와 메소드로 적절한 것은 <code class=\"language-text\">GET</code>, <code class=\"language-text\">http://wecode.co.kr/product/1</code>이다.</li>\n<li>1번 회원 정보를 수정하는 엔드포인트의 메소드로 적절한 것은 <code class=\"language-text\">POST</code>, <code class=\"language-text\">PUT</code>,  <code class=\"language-text\">PATCH</code>다. (요즘에는 주로 <code class=\"language-text\">POST</code>를 사용한다.)</li>\n<li>1번 회원 정보를 수정하는 엔드포인트의 주소로 적절한 것은 <code class=\"language-text\">http://wecode.co.kr/user/1</code>이다.</li>\n<li>쿼리스트링 이름이 query인 검색 엔드포인트에 “위코드”를 검색하는 올바른 주소와 메소드는 <code class=\"language-text\">GET</code>, <code class=\"language-text\">http://wecode.co.kr/search?query=&quot;위코드&quot;</code>다.</li>\n</ul>\n<br>\n<h3 id=\"참고-링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EB%A7%81%ED%81%AC\" aria-label=\"참고 링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 링크</h3>\n<p><a href=\"https://www.zerocho.com/category/HTTP/post/5b344f3af94472001b17f2da\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.zerocho.com/category/HTTP/post/5b344f3af94472001b17f2da</a>\n<a href=\"https://medium.com/@dydrlaks/rest-api-3e424716bab\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@dydrlaks/rest-api-3e424716bab</a></p>","fields":{"slug":"/posts/til33","tagSlugs":["/tag/til/","/tag/http/","/tag/web/","/tag/wecode/"]},"frontmatter":{"date":"2020-06-10T15:20:32","description":"HTTP 구조와 핵심 요소","tags":["til","http","web","wecode"],"title":"Web - HTTP 기초","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til33"}}}