{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til30","result":{"data":{"markdownRemark":{"id":"444f6799-f4fc-5476-9d4a-735ad4400955","html":"<h3 id=\"제너레이터generator\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0generator\" aria-label=\"제너레이터generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제너레이터(generator)</h3>\n<p>제너레이터는 이터레이터를 생성해주는 함수다. 함수 안에서 <code class=\"language-text\">yield</code>라는 키워드를 사용하면 함수는 제너레이터가 되며, <code class=\"language-text\">yield</code>에는 값(변수)을 지정한다.</p>\n<p><code class=\"language-text\">yield</code>를 사용해서 제너레이터를 만들고, 숫자를 출력하는 for 반복문을 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">numbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">yield</span> num\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 출력값</span>\n<span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">5</span> <span class=\"token number\">7</span> <span class=\"token number\">9</span></code></pre></div>\n<br>\n<h3 id=\"제너레이터-함수의-작동-방식\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%95%A8%EC%88%98%EC%9D%98-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D\" aria-label=\"제너레이터 함수의 작동 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제너레이터 함수의 작동 방식</h3>\n<p>일반적인 함수는 함수를 모두 실행한 뒤에 외부로 값을 반환하지만, 제너레이터 함수는 <code class=\"language-text\">yield</code>가 나오는 순간 값을 반환한 뒤 잠시 연산을 멈추고 함수 바깥의 코드가 실행되도록 양보하여 값을 가져가게 한다. 그리고 다시 제너레이터 안의 코드 중 <code class=\"language-text\">yield</code> 이후부터 이어서 실행한다.</p>\n<p>즉 위 코드를 다시 뜯어보면,</p>\n<ol>\n<li><code class=\"language-text\">for</code>문에서 <code class=\"language-text\">numbers()</code> 제너레이터 함수 호출</li>\n<li><code class=\"language-text\">numbers()</code> 함수 안 첫 번째 반복문 제1턴 실행</li>\n<li><code class=\"language-text\">yield</code> 키워드 만남</li>\n<li>값 반환</li>\n<li><code class=\"language-text\">numbers()</code> 함수 바깥으로 나가 외부 <code class=\"language-text\">for</code>문에 값 전달하여 <code class=\"language-text\">print</code> 실행</li>\n<li>다시 <code class=\"language-text\">numbers()</code> 함수로 돌아와서 제2턴 실행</li>\n<li>반복</li>\n</ol>\n<p>의 과정을 거쳐 결과값을 반환한다.</p>\n<br>\n<h3 id=\"제너레이터-표현식\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"제너레이터 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제너레이터 표현식</h3>\n<p>제너레이터 표현식은 이터레이터를 반환한다. 제너레이터 함수를 좀 더 쉽게 사용할 수 있도록 해준다. 리스트 컴프리헨션과 구성이 비슷하나 리스트 컴프리헨션은 대괄호<code class=\"language-text\">[]</code>를 쓰고 제너레이터 표현식은 소괄호<code class=\"language-text\">()</code>를 쓴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>표현식 <span class=\"token keyword\">for</span> 원소 <span class=\"token keyword\">in</span> 반복 가능한 객체<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>표현식 <span class=\"token keyword\">for</span> 원소 <span class=\"token keyword\">in</span> 반복 가능한 객체 <span class=\"token keyword\">if</span> 조건문<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">generator_exp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>generator_exp<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 출력값</span>\n<span class=\"token operator\">&lt;</span>generator <span class=\"token builtin\">object</span> <span class=\"token operator\">&lt;</span>genexpr<span class=\"token operator\">></span> at <span class=\"token number\">0x7fd638047c50</span><span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">generator_exp</code>가 제너레이터 객체임을 확인할 수 있다.</p>\n<br>\n<h4 id=\"q1-다음코드는-generator-expression을-사용해서-제곱연산을-하는-예제-입니다-실행해보고-결과를-확인해보세요\" style=\"position:relative;\"><a href=\"#q1-%EB%8B%A4%EC%9D%8C%EC%BD%94%EB%93%9C%EB%8A%94-generator-expression%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%A0%9C%EA%B3%B1%EC%97%B0%EC%82%B0%EC%9D%84-%ED%95%98%EB%8A%94-%EC%98%88%EC%A0%9C-%EC%9E%85%EB%8B%88%EB%8B%A4-%EC%8B%A4%ED%96%89%ED%95%B4%EB%B3%B4%EA%B3%A0-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\"q1 다음코드는 generator expression을 사용해서 제곱연산을 하는 예제 입니다 실행해보고 결과를 확인해보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q1. 다음코드는 generator expression을 사용해서 제곱연산을 하는 예제 입니다. 실행해보고 결과를 확인해보세요.</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">L <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">generate_square_from_list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> L <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_iter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> element <span class=\"token keyword\">in</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n\nprint_iter<span class=\"token punctuation\">(</span> generate_square_from_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"a1\" style=\"position:relative;\"><a href=\"#a1\" aria-label=\"a1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A1.</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 출력값</span>\n<span class=\"token operator\">&lt;</span>generator <span class=\"token builtin\">object</span> generate_square_from_list<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">locals</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>genexpr<span class=\"token operator\">></span> at <span class=\"token number\">0x7fd35820fbd0</span><span class=\"token operator\">></span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">9</span></code></pre></div>\n<p><code class=\"language-text\">generate_square_from_list()</code> 함수의 <code class=\"language-text\">print(result)</code> 코드와 <code class=\"language-text\">return result</code>코드는 한 번 실행한 뒤 종료되었다. 따라서 <code class=\"language-text\">print(result)</code>의 값인 <code class=\"language-text\">&lt;generator object generate_square_from_list.&lt;locals&gt;.&lt;genexpr&gt; at 0x7fd35820fbd0&gt;</code>가 한 번 출력된 것을 확인할 수 있다. </p>\n<p><code class=\"language-text\">print</code>와 <code class=\"language-text\">return</code>을 실행한 뒤, 제너레이터가 반환한 값 <code class=\"language-text\">1</code>이 <code class=\"language-text\">print_iter(iter)</code>로 전달되어 <code class=\"language-text\">1</code>이 화면에 출력된다.</p>\n<p>이후로는 제너레이터 표현식인 <code class=\"language-text\">result</code>와 <code class=\"language-text\">print_iter(iter)</code> 함수를 오가며 진행된다. <code class=\"language-text\">4</code>와 <code class=\"language-text\">9</code>는 이때 출력된다.</p>\n<h4 id=\"q2-이번-과제는-다음코드를-실행해보고-분석한-결과를-블로깅하는-과제-입니다-lazy-evaluation-이란-무엇인지와-장점-및-리스트-컴프리헨션과의-차이점에-대하여-블로깅-해주세요\" style=\"position:relative;\"><a href=\"#q2-%EC%9D%B4%EB%B2%88-%EA%B3%BC%EC%A0%9C%EB%8A%94-%EB%8B%A4%EC%9D%8C%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%B4%EB%B3%B4%EA%B3%A0-%EB%B6%84%EC%84%9D%ED%95%9C-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%EB%B8%94%EB%A1%9C%EA%B9%85%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%9C-%EC%9E%85%EB%8B%88%EB%8B%A4-lazy-evaluation-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80%EC%99%80-%EC%9E%A5%EC%A0%90-%EB%B0%8F-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%BB%B4%ED%94%84%EB%A6%AC%ED%97%A8%EC%85%98%EA%B3%BC%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B9%85-%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"q2 이번 과제는 다음코드를 실행해보고 분석한 결과를 블로깅하는 과제 입니다 lazy evaluation 이란 무엇인지와 장점 및 리스트 컴프리헨션과의 차이점에 대하여 블로깅 해주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q2. 이번 과제는 다음코드를 실행해보고 분석한 결과를 블로깅하는 과제 입니다. lazy evaluation 이란 무엇인지와 장점 및 리스트 컴프리헨션과의 차이점에 대하여 블로깅 해주세요.</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">L <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_iter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> element <span class=\"token keyword\">in</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">lazy_return</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sleep 1s\"</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> num\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comprehension_list=\"</span><span class=\"token punctuation\">)</span>\ncomprehension_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> lazy_return<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> L <span class=\"token punctuation\">]</span>\nprint_iter<span class=\"token punctuation\">(</span>comprehension_list<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"generator_exp=\"</span><span class=\"token punctuation\">)</span>\ngenerator_exp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> lazy_return<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> L <span class=\"token punctuation\">)</span>\nprint_iter<span class=\"token punctuation\">(</span>generator_exp<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"a2\" style=\"position:relative;\"><a href=\"#a2\" aria-label=\"a2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A2.</h4>\n<p>주어진 코드를 실행하면 아래와 같이 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 출력값</span>\ncomprehension_list<span class=\"token operator\">=</span>\nsleep 1s\nsleep 1s\nsleep 1s\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\ngenerator_exp<span class=\"token operator\">=</span>\nsleep 1s\n<span class=\"token number\">1</span>\nsleep 1s\n<span class=\"token number\">2</span>\nsleep 1s\n<span class=\"token number\">3</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">print(&quot;comprehension_list=&quot;)</code> 실행</li>\n<li><code class=\"language-text\">comprehension_list=</code> 출력</li>\n<li><code class=\"language-text\">comprehension_list = [ lazy_return(i) for i in L ]</code> 실행</li>\n<li>첫 번째 값 <code class=\"language-text\">1</code> 가지고 <code class=\"language-text\">comprehension_list</code>안 <code class=\"language-text\">lazy_return(num)</code> 실행</li>\n<li><code class=\"language-text\">print(&quot;sleep 1s&quot;)</code> 실행</li>\n<li><code class=\"language-text\">sleep 1s</code> 출력</li>\n<li><code class=\"language-text\">time.sleep(1)</code> 실행, 1초 기다림</li>\n<li><code class=\"language-text\">return num</code> 실행해서 <code class=\"language-text\">num</code>값 <code class=\"language-text\">1</code> 반환</li>\n<li>다음 값 <code class=\"language-text\">2</code> 가지고 <code class=\"language-text\">comprehension_list</code>안 <code class=\"language-text\">lazy_return(i)</code> 실행</li>\n<li>5~8번 반복</li>\n<li><code class=\"language-text\">return num</code> 실행해서 <code class=\"language-text\">num</code>값 <code class=\"language-text\">2</code> 반환</li>\n<li>다음 값 <code class=\"language-text\">3</code> 가지고 <code class=\"language-text\">comprehension_list</code>안 <code class=\"language-text\">lazy_return(i)</code> 실행</li>\n<li>5~8번 반복</li>\n<li><code class=\"language-text\">return num</code> 실행해서 <code class=\"language-text\">num</code>값 <code class=\"language-text\">3</code> 반환</li>\n<li><code class=\"language-text\">comprehension_list = [1, 2, 3]</code> 완성</li>\n<li><code class=\"language-text\">print_iter(comprehension_list)</code> 실행</li>\n<li><code class=\"language-text\">comprehension_list</code> 리스트 안에 있는 요소 <code class=\"language-text\">1</code>, <code class=\"language-text\">2</code>, <code class=\"language-text\">3</code> 출력</li>\n</ol>\n<p>여기까지가</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">comprehension_list<span class=\"token operator\">=</span>\nsleep 1s\nsleep 1s\nsleep 1s\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span></code></pre></div>\n<p>의 출력 과정이다. 이어서 계속 보자.</p>\n<ol start=\"18\">\n<li><code class=\"language-text\">print(&quot;generator_exp=&quot;)</code> 실행</li>\n<li><code class=\"language-text\">generator_exp=</code> 출력</li>\n<li><code class=\"language-text\">generator_exp = ( lazy_return(i) for i in L )</code> 실행</li>\n<li>첫 번째 값 <code class=\"language-text\">1</code> 가지고 <code class=\"language-text\">lazy_return(num)</code> 실행</li>\n<li><code class=\"language-text\">print(&quot;sleep 1s&quot;)</code> 실행</li>\n<li><code class=\"language-text\">sleep 1s</code> 출력</li>\n<li><code class=\"language-text\">time.sleep(1)</code> 실행, 1초 기다림</li>\n<li><code class=\"language-text\">return num</code> 실행해서 <code class=\"language-text\">num</code>값 <code class=\"language-text\">1</code> 반환</li>\n<li><code class=\"language-text\">generator_exp</code> 바깥으로 나감</li>\n<li><code class=\"language-text\">print_iter(generator_exp)</code> 실행</li>\n<li>요소 <code class=\"language-text\">1</code> 출력</li>\n<li><code class=\"language-text\">generator_exp = ( lazy_return(i) for i in L )</code> 실행</li>\n<li>다음 값 <code class=\"language-text\">2</code> 가지고 <code class=\"language-text\">lazy_return(num)</code> 실행</li>\n<li><code class=\"language-text\">print(&quot;sleep 1s&quot;)</code> 실행</li>\n<li>22~24번 반복</li>\n<li><code class=\"language-text\">return num</code> 실행해서 <code class=\"language-text\">num</code>값 <code class=\"language-text\">2</code> 반환</li>\n<li>26~27번 반복</li>\n<li>요소 <code class=\"language-text\">2</code> 출력</li>\n<li><code class=\"language-text\">generator_exp = ( lazy_return(i) for i in L )</code> 실행</li>\n<li>다음 값 <code class=\"language-text\">3</code> 가지고 <code class=\"language-text\">lazy_return(num)</code> 실행</li>\n<li>22~24번 반복</li>\n<li><code class=\"language-text\">return num</code> 실행해서 <code class=\"language-text\">num</code>값 <code class=\"language-text\">3</code> 반환</li>\n<li>26~27번 반복</li>\n<li>요소 <code class=\"language-text\">3</code> 출력</li>\n</ol>\n<p>여기까지가</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">generator_exp<span class=\"token operator\">=</span>\nsleep 1s\n<span class=\"token number\">1</span>\nsleep 1s\n<span class=\"token number\">2</span>\nsleep 1s\n<span class=\"token number\">3</span></code></pre></div>\n<p>의 출력 과정이다.</p>\n<p>제너레이터는 일반적인 반복문과는 연산하는 절차가 다르다. 앞서 언급했듯 제너레이터는 값을 반환해야 할 때 제너레이터 안의 연산을 잠시 멈추고 외부로 값을 전달한다. 따라서 <code class=\"language-text\">lazy_return(num)</code> 함수에서 <code class=\"language-text\">return</code>한 값을 가지고 있으면서 <code class=\"language-text\">print_iter(iter)</code> 함수를 처리해주는 과정을 반복한다.</p>\n<p>반면 리스트 컴프리헨션은 <code class=\"language-text\">lazy_return(num)</code> 함수를 모두 처리한 후 <code class=\"language-text\">print_iter(iter)</code> 함수를 실행한다.</p>\n<p>제너레이터는 lazy evaluation, 즉 지연 평가 방식으로 작동한다. <code class=\"language-text\">lazy_return(num)</code> 함수가 훨씬 더 무거운 함수라고 가정해보자. 이때 리스트 컴프리헨션 연산 방식으로 반복문을 한 번에 처리하면 메모리가 그만큼 값을 저장하고 있으므로 서비스 성능을 저하시킬 수 있다. 제너레이터는 필요한 값을 그때그때 처리하기 때문에 메모리를 더 효율적으로 사용할 수 있다.</p>","fields":{"slug":"/posts/til30","tagSlugs":["/tag/til/","/tag/python/","/tag/we-code/"]},"frontmatter":{"date":"2020-06-06T17:58:32.169Z","description":"제너레이터는 이터레이터를 생성해주는 함수다. 함수 안에서 yield라는 키워드를 사용하면 함수는 제너레이터가 되며, yield에는 값(변수)을 지정한다.","tags":["TIL","Python","WeCode"],"title":"Python - generator","socialImage":"/media/42-line-bible.jpg"}}},"pageContext":{"slug":"/posts/til30"}}}