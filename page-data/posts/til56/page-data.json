{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til56","result":{"data":{"markdownRemark":{"id":"eb51a971-63e7-5b0b-ae15-22a7e7077a3a","html":"<p><a href=\"https://www.udemy.com/course/the-complete-guide-to-django-rest-framework-and-vue-js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Udemy</a> 강의를 들으면서, <a href=\"https://www.django-rest-framework.org/api-guide/serializers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DRF 공식문서</a>를 보면서, 그리고 구글링하면서 정리했다.</p>\n<h3 id=\"django-rest-framework---level-one\" style=\"position:relative;\"><a href=\"#django-rest-framework---level-one\" aria-label=\"django rest framework   level one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django REST Framework - Level One</h3>\n<h4 id=\"introduction-to-drf-and-newsapi-project-setup\" style=\"position:relative;\"><a href=\"#introduction-to-drf-and-newsapi-project-setup\" aria-label=\"introduction to drf and newsapi project setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction to DRF and NewsAPI Project Setup</h4>\n<p><strong>DRF 초기 세팅</strong></p>\n<ol>\n<li><code class=\"language-text\">pip install djangorestframework</code></li>\n<li>프로젝트 폴더 settings.py 안 INSTALLED APPS 항목에 <code class=\"language-text\">rest_framework</code> 추가</li>\n<li>models.py 작성</li>\n<li><code class=\"language-text\">python manage.py makemigrations</code>, <code class=\"language-text\">python manage.py migrate</code></li>\n<li><code class=\"language-text\">python manage.py createsuperuser</code></li>\n<li>\n<p>만든 모델 클래스를 admin.py에 등록<br> </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> news<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> 모델클래스이름\nadmin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>모델클래스이름<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">python manage.py runserver 포트번호</code>로 서버가 잘 띄워지는지, admin 페이지 잘 생성되었나 확인</li>\n</ol>\n<h4 id=\"what-are-the-serializers\" style=\"position:relative;\"><a href=\"#what-are-the-serializers\" aria-label=\"what are the serializers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What are the Serializers?</h4>\n<p>쿼리셋이나 모델 인스턴스 같은 복잡한 데이터를 파이썬 데이터 타입으로 변환한 뒤 Json 형태로 바꿔주는 과정을 data serialization이라 한다. 시리얼라이저에는 여러 형태가 있지만 Serializer나 ModelSerializer 클래스가 사용하기 좋다. 시리얼라이저에는 deserialization 기능도 있는데, 파싱한 데이터를 반대로 복잡한 타입으로 바꾸는 작업이다.</p>\n<p>시리얼라이저는 필드 형태와 관계 없이 모델 인스턴스를 Json 형태 혹은 dictionary 형태로 자동 변환해준다.</p>\n<p>다음과 같은 사용자 모델이 있고 사용자 프로필 페이지에 접근했을 때 띄워줄 view를 짠다고 하면 해당하는 사용자 id(Primary key) 번호만 URL에 입력하기만 하면 사용자 정보를 Json 형태로 리턴할 수 있다. 매우 간편!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">(</span>\n  email <span class=\"token operator\">=</span> <span class=\"token string\">\"user@user.user\"</span><span class=\"token punctuation\">,</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n  sex <span class=\"token operator\">=</span> <span class=\"token string\">\"Female\"</span><span class=\"token punctuation\">,</span>\n  profile_image <span class=\"token operator\">=</span> <span class=\"token string\">\"user.png\"</span>\n<span class=\"token punctuation\">)</span>\n\nUserSerializer<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"email\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"user@user.user\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"name\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"sex\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"female\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"profile_image\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"user.png\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>serializers.py 예시</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> serializers\n<span class=\"token keyword\">from</span> news<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Article\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>Serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># pk인 id는 99퍼센트 수정 안 할 것이므로 read_only</span>\n  <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>read_only <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  author <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  title <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  description <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  body <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  location <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  publication_date <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  active <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 장고에서 자동으로 관리해주는 부분이므로 read_only</span>\n  created_at <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>read_only <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  updated_at <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>read_only <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    \n  <span class=\"token keyword\">def</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> validated_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> Article<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>validated_data<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> validate_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># id, created_at, updated_at은 read only 필드이므로 update method에서는 제외함</span>\n    <span class=\"token comment\"># 'author'에 새로 들어오는 데이터가 없으면 이미 가지고 있는 instance.author를 사용함 (즉, 기존 데이터 유지)</span>\n    instance<span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'description'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'location'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>publication_date <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'publication_date'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>publication_date<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> instance</code></pre></div>\n<p>위 시리얼라이즈를 이용해 python shell에서 데이터를 찍어보면 이렇게 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> article_instance <span class=\"token operator\">=</span> Article.objects.first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> article_instance\n<span class=\"token operator\">&lt;</span>Article: John Doe My First Article<span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>article_instance<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer\nArticleSerializer<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Article: John Doe My First Article<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>:\n  <span class=\"token function\">id</span> <span class=\"token operator\">=</span> IntegerField<span class=\"token punctuation\">(</span>read_only<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\n  author <span class=\"token operator\">=</span> CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  title <span class=\"token operator\">=</span> CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  description <span class=\"token operator\">=</span> CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  body <span class=\"token operator\">=</span> CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  location <span class=\"token operator\">=</span> CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  publication_date <span class=\"token operator\">=</span> DateField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  active <span class=\"token operator\">=</span> BooleanField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  created_at <span class=\"token operator\">=</span> DateTimeField<span class=\"token punctuation\">(</span>read_only<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\n  updated_at <span class=\"token operator\">=</span> DateTimeField<span class=\"token punctuation\">(</span>read_only<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span></code></pre></div>\n<p>시리얼라이저에 인자로 준 인스턴스의 각 필드 속성이 출력된다. 여기에 <code class=\"language-text\">.data</code>를 이용해 Article 테이블의 첫 번째 인스턴스 데이터를 볼 수 있다. 첫 번째 인스턴스인 이유는 위에서 <code class=\"language-text\">article_instance = Article.objects.first()</code>로 선언했기 때문.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer.data\n<span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>, <span class=\"token string\">'author'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'John Doe'</span>, <span class=\"token string\">'title'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'My First Article'</span>, <span class=\"token string\">'description'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'This is my first article.'</span>, <span class=\"token string\">'body'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'This is the body of my first article.'</span>, <span class=\"token string\">'location'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'Mapo'</span>, <span class=\"token string\">'publication_date'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'2020-07-20'</span>, <span class=\"token string\">'active'</span><span class=\"token builtin class-name\">:</span> True, <span class=\"token string\">'created_at'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'2020-07-24T01:22:17.269315Z'</span>, <span class=\"token string\">'updated_at'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'2020-07-25T08:26:28.581312Z'</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기까지 모델 인스턴스를 파이썬 네이티브 데이터타입으로 변환하는 작업이다. 직렬화를 완료하기 위해서는 dictionary로 출력된 것을 json 형태로 변환해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> from rest_framework.renderers <span class=\"token function\">import</span> JSONRenderer\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> json <span class=\"token operator\">=</span> JSONRenderer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.render<span class=\"token punctuation\">(</span>serializer.data<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> json\nb<span class=\"token string\">'{\"id\":1,\"author\":\"John Doe\",\"title\":\"My First Article\",\"description\":\"This is my first article.\",\"body\":\"This is the body of my first article.\",\"location\":\"Mapo\",\"publication_date\":\"2020-07-20\",\"active\":true,\"created_at\":\"2020-07-24T01:22:17.269315Z\",\"updated_at\":\"2020-07-25T08:26:28.581312Z\"}'</span></code></pre></div>\n<p>별 차이 없어보이지만 <code class=\"language-text\">&quot;active&quot;</code>키 값(value)을 보면 차이점을 알 수 있다. Dictionary에서는 <code class=\"language-text\">&#39;active&#39;: True</code>고 json 렌더링을 거친 결과물에서는 <code class=\"language-text\">&quot;active&quot;:true</code>다.</p>\n<p>하지만 <code class=\"language-text\">type(json)</code>을 찍어보면 <code class=\"language-text\">&lt;class &#39;bytes&#39;&gt;</code>가 나온다. Article 테이블에 저장하기 위해서는 deserializing 작업을 통해 파이썬 네이티브 데이터로 바꿔줘야 하는데, 이때 사용하는 것이 <code class=\"language-text\">JSONParser</code>다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> io\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> from rest_framework.parsers <span class=\"token function\">import</span> JSONParser\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> stream <span class=\"token operator\">=</span> io.BytesIO<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> data <span class=\"token operator\">=</span> JSONParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.parse<span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> data\n<span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>, <span class=\"token string\">'author'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'John Doe'</span>, <span class=\"token string\">'title'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'My First Article'</span>, <span class=\"token string\">'description'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'This is my first article.'</span>, <span class=\"token string\">'body'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'This is the body of my first article.'</span>, <span class=\"token string\">'location'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'Mapo'</span>, <span class=\"token string\">'publication_date'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'2020-07-20'</span>, <span class=\"token string\">'active'</span><span class=\"token builtin class-name\">:</span> True, <span class=\"token string\">'created_at'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'2020-07-24T01:22:17.269315Z'</span>, <span class=\"token string\">'updated_at'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'2020-07-25T08:26:28.581312Z'</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>참고) io는 파이썬 모듈로, data streaming을 다루기 위한 인터페이스다.</em></p>\n<p>위에서 변환한 파이썬 네이티브 데이터 타입을 validated data dictionary로 만들기 위해 ArticleSerializer를 다시 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer.is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTrue\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer.validated_data\nOrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span>, <span class=\"token string\">'John Doe'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span>, <span class=\"token string\">'My First Article'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'description'</span>, <span class=\"token string\">'This is my first article.'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span>, <span class=\"token string\">'This is the body of my first article.'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'location'</span>, <span class=\"token string\">'Mapo'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'publication_date'</span>, datetime.date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span>, <span class=\"token number\">7</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">))</span>, <span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span>, True<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>혹시 모를 에러에 대비해 <code class=\"language-text\">.is_valid()</code> 검증 과정은 필요하며, <code class=\"language-text\">.is_valid()</code>를 선언한 뒤에야 <code class=\"language-text\">validated_data</code>를 생성할 수 있다.</p>\n<p>이렇게 검증한 데이터를 serializer에 저장해보자. 인스턴스가 존재하지 않으면 create, 존재하면 update를 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> serializer.<span class=\"token function-name function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">'author'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'John Doe'</span>, <span class=\"token string\">'title'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'My First Article'</span>, <span class=\"token string\">'description'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'This is my first article.'</span>, <span class=\"token string\">'body'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'This is the body of my first article.'</span>, <span class=\"token string\">'location'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'Mapo'</span>, <span class=\"token string\">'publication_date'</span><span class=\"token builtin class-name\">:</span> datetime.date<span class=\"token punctuation\">(</span><span class=\"token number\">2020</span>, <span class=\"token number\">7</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">'active'</span><span class=\"token builtin class-name\">:</span> True<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>Article: John Doe My First Article<span class=\"token operator\">></span></code></pre></div>\n<p>같은 내용이라 데이터가 추가된 것이 티가 안 나지만 Article 객체를 불러오면 2개가 출력된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Article.objects.all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>QuerySet <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Article: John Doe My First Article<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Article: John Doe My First Article<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></code></pre></div>\n<p><em>질문거리) 인스턴스가 존재했는데 왜 추가되었는가?</em></p>\n<h4 id=\"참고한-글\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%ED%95%9C-%EA%B8%80\" aria-label=\"참고한 글 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고한 글</h4>\n<ul>\n<li><a href=\"https://butter-shower.tistory.com/50\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DRF(Django Rest Framework)란</a></li>\n</ul>","fields":{"slug":"/posts/til56","tagSlugs":["/tag/til/","/tag/django/","/tag/django-rest-framework/","/tag/drf/"]},"frontmatter":{"date":"2020-07-25T17:30:32.160Z","description":"RESTful API를 더욱 편하게 만들 수 있는 Django Rest Framework","tags":["til","django","django-rest-framework","drf"],"title":"Django Rest Framework 활용하기 1 - Serializer","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til56"}}}