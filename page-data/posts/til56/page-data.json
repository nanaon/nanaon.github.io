{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til56","result":{"data":{"markdownRemark":{"id":"45df9299-9be5-57c6-9174-eb27a45e7267","html":"<h3 id=\"monilithic-architecture란\" style=\"position:relative;\"><a href=\"#monilithic-architecture%EB%9E%80\" aria-label=\"monilithic architecture란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Monilithic Architecture란</h3>\n<p><img src=\"https://www.nginx.com/wp-content/uploads/2016/04/Richardson-microservices-part1-1_monolithic-architecture.png\" alt=\"monolithic architecture\"></p>\n<p>MSA와 반대되는 전통적인 방식의 구조다. 모듈별로 개발한 뒤 개발 완료한 모듈을 묶어 배포하는 형태이며, 서버 하나에 모든 로직, api가 들어간 형태다. 마찬가지로 하나의 데이터베이스에 모든 데이터가 들어있다.</p>\n<p>보통 한 언어만 사용하기 때문에 관리하기 편하고 구조가 단순하다. 하지만 유지보수 단계에서 지속적인 통합(Continuous Integration, CI), 지속적인 배포(Continuous Delivery, CD)가 어렵다. 예를 들어, 새 버전을 배포하려면 배포가 완료될 때까지 전체 서비스를 이용하지 못한다. 모든 모듈이 하나의 프로세스에서 동작하기 떄문이다.</p>\n<h3 id=\"microservice-architecturemsa란\" style=\"position:relative;\"><a href=\"#microservice-architecturemsa%EB%9E%80\" aria-label=\"microservice architecturemsa란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Microservice Architecture(MSA)란</h3>\n<p><img src=\"https://www.nginx.com/wp-content/uploads/2016/04/Richardson-microservices-part1-2_microservices-architecture.png\" alt=\"microservices architecture\"></p>\n<p>기능별로 api와 데이터베이스를 나눠서 개발하는 구조다. 쇼핑몰 웹사이트를 만든다고 가정하면 유저 관리, 상품 관리, 주문 관리 서비스를 분리해서 개발/운영하는 방식이다. 각 서비스끼리 데이터를 공유하지 않고 독립적으로 가공하고 저장한다.</p>\n<p>따라서 기능별로 다른 언어나 기술을 쓰는 것이 가능하다. 운영 관점에서는 관리하기 복잡해지고 서비스간 데이터가 중복될 수도 있는 등 단점이 있지만 각 기능에 최적화한 기술 스택을 쓸 수 있다는 장점이 있다. 가장 큰 장점은 I, CD가 가능하다는 점이다. 각 기능이 완전히 독립되어있기 때문에 한 기능을 수정/배포한다고 해도 전체 서비스는 끊김 없이 돌아간다.</p>\n<h4 id=\"참고문헌\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%AC%B8%ED%97%8C\" aria-label=\"참고문헌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고문헌</h4>\n<p><a href=\"https://medium.com/webeveloper/microservice-architecture%EB%9E%80-ca9825087050\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Microservice Architecture란?</a><br>\n<a href=\"https://www.slideshare.net/Byungwook/micro-service-architecture-52233912\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Micro Service Architecture의 이해</a></p>\n<p><em>질문거리) docker를 쓰면 monolitic architecture에서도 ci/cd가 가능한가?</em></p>","fields":{"slug":"/posts/til56","tagSlugs":["/tag/til/","/tag/architecture/","/tag/msa/"]},"frontmatter":{"date":"2020-07-23T19:25:32.160Z","description":"시스템 설계 기법인 Monilithic Architecture과 MSA","tags":["til","architecture","msa"],"title":"Monilithic Architecture, Microservice Architecture(MSA)","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til56"}}}