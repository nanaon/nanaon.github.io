{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til73","result":{"data":{"markdownRemark":{"id":"ac93e11c-758a-55b2-8a9c-95f412d1ab59","html":"<h3 id=\"ncloud-서버-인스턴스-만들기\" style=\"position:relative;\"><a href=\"#ncloud-%EC%84%9C%EB%B2%84-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"ncloud 서버 인스턴스 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ncloud 서버 인스턴스 만들기</h3>\n<p>TBD</p>\n<h3 id=\"퍼블릭-ip-생성하기\" style=\"position:relative;\"><a href=\"#%ED%8D%BC%EB%B8%94%EB%A6%AD-ip-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"퍼블릭 ip 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>퍼블릭 IP 생성하기</h3>\n<p>TBD</p>\n<h3 id=\"포트포워드-설정하기\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%ED%8A%B8%ED%8F%AC%EC%9B%8C%EB%93%9C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"포트포워드 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포트포워드 설정하기</h3>\n<p>TBD</p>\n<h3 id=\"우분투-서버-접속\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC-%EC%84%9C%EB%B2%84-%EC%A0%91%EC%86%8D\" aria-label=\"우분투 서버 접속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우분투 서버 접속</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ssh -l root -p {외부 포트 번호} {서버 접속용 공인 IP}</code></pre></div>\n<p>최초 접속이라면</p>\n<p>“Are you sure you want to continue connecting (yes/no)?”</p>\n<p>이라는 문구가 뜰 텐데 yes 입력하고 계속 진행한다.</p>\n<p>접속 후 ‘관리자 비밀번호 확인’에서 얻은 관리자 이름(root)과 비밀번호를 입력한다. 로그인한 상태에서 <code class=\"language-text\">passwd</code> 명령어를 입력하면 비밀번호를 변경할 수 있다.</p>\n<p>sudo 명령 실행 시 ‘sudo: unable to resolve host {호스트 이름}’ 같은 메시지가 뜨면 etc 폴더 안 hostname 파일과 hosts 파일을 확인하고 호스트 이름을 통일해준다. hosts에서는 127.0.1.1 옆에 있는 것이 호스트 이름이다.</p>\n<h3 id=\"nginx-설치\" style=\"position:relative;\"><a href=\"#nginx-%EC%84%A4%EC%B9%98\" aria-label=\"nginx 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nginx 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo apt-get update</code></pre></div>\n<p>업데이트 후 nginx 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo apt-get install -y nginx</code></pre></div>\n<p>nginx 버전을 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ nginx -v</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ nginx version: nginx/1.10.3 (Ubuntu)</code></pre></div>\n<p>브라우저를 켜서 공인 IP 주소로 접속했을 때 아래 화면이 뜨면 nginx 웹서버가 제대로 설치된 것이다. 서버 접속용 공인 IP와는 다르니 주의할 것.</p>\n<p><img src=\"/media/ncloud-nginx-browser.png\" alt=\"nginx browser test\"></p>\n<h3 id=\"ubuntu-1604에-python-38-설치\" style=\"position:relative;\"><a href=\"#ubuntu-1604%EC%97%90-python-38-%EC%84%A4%EC%B9%98\" aria-label=\"ubuntu 1604에 python 38 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ubuntu 16.04에 Python 3.8 설치</h3>\n<p>Python 3.8 설치에 필요한 라이브러리를 먼저 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo apt-get install build-essential checkinstall\n$ sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev \\\n  libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev</code></pre></div>\n<p>Python 3.8 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd /opt\n$ sudo wget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz\n$ sudo tar xzf Python-3.8.1.tgz</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd Python-3.8.1\n$ sudo ./configure --enable-optimizations\n$ sudo make altinstall</code></pre></div>\n<p>버전 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ python3.8 -V</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Python 3.8.1</code></pre></div>\n<p><code class=\"language-text\">python</code> 명령어를 쳤을 때 Python 3.8이 기본으로 실행되도록 설정을 바꿔준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ update-alternatives --install /usr/bin/python python /usr/local/bin/python3.8 1</code></pre></div>\n<p>제대로 설정됐는지 확인해보자. 파이썬 버전 확인 명령어를 아래와 같이 입력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ python -V</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Python 3.8.1</code></pre></div>\n<p>설정이 잘 되었다.</p>\n<p><a href=\"https://dlehdgml0480.tistory.com/8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python 3.8 버전 설치에 도움받은 곳</a></p>\n<h3 id=\"virtualenv-가상환경-세팅\" style=\"position:relative;\"><a href=\"#virtualenv-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85\" aria-label=\"virtualenv 가상환경 세팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>virtualenv 가상환경 세팅</h3>\n<p>virtualenv를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo apt install virtualenv</code></pre></div>\n<p>파이썬 3.8을 사용하는 가상환경을 만들어준다. 가상환경 이름은 test로 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ virtualenv test --python=python3.8</code></pre></div>\n<p>만든 가상환경을 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ source test/bin/activate</code></pre></div>\n<p>그런데 이런 에러가 난다. 매뉴얼대로 해도 항상 에러가 나더라. 신기하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-bash: test/bin/activate: No such file or directory</code></pre></div>\n<p>cd test/bin으로 들어가면 activate가 없고 python python3 python3.8 이 세 개만 달랑 있다. <a href=\"https://stackoverflow.com/questions/41687841/there-is-no-activate-when-i-am-trying-to-run-my-virtual-env/43667899\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">스택 오버플로우</a>에서 이 명령어를 써보라길래 일단 입력해봤다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ python3.8 -m venv test</code></pre></div>\n<p>에러인가 하는 메시지가 떠서 다시 test/bin 경로로 들어가봤더니 activate가 생겨있었다…!? 왜지??</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Unable to symlink &#39;/usr/local/bin/python3.8&#39; to &#39;/root/test/bin/python3.8&#39;</code></pre></div>\n<p>이 메시지는 왜 떴는지 모르겠다. 아무튼 <code class=\"language-text\">source test/bin/activate</code> 명령어를 다시 입력하니까 가상환경이 잘 실행됐다. 이제 여기에 장고를 설치하면 된다.</p>\n<h3 id=\"miniconda-가상환경-세팅\" style=\"position:relative;\"><a href=\"#miniconda-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85\" aria-label=\"miniconda 가상환경 세팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Miniconda 가상환경 세팅</h3>\n<p>virtualenv를 써도 되지만 익숙한 미니콘다도 설치해보려고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ chmod +x Miniconda3-latest-Linux-x86_64.sh</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ./Miniconda3-latest-Linux-x86_64.sh</code></pre></div>\n<p>위치는 일단 root에 설치했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ source .bashrc</code></pre></div>\n<p>이러면 명령 라인 앞에 (base)가 생겨야 하는데 나는 왜 안 생기냐.. 일단 진행해보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo apt-get update</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo apt-get upgrade</code></pre></div>\n<p>mysqlclient 설치 전 gcc 먼저 설치해야한다. 안 그러면 mysqlclient 설치 시 오류 난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo apt-get install gcc</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ Unable to locate package libmysqlclient-dev</code></pre></div>\n<p>이제 미니콘다로 파이썬 3.8 버전을 사용하는 가상환경을 만들어보자. 로컬에서 하던 것과 똑같이 하면 된다. 가상환경 이름은 condatest로 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ conda create -n condatest python=3.8</code></pre></div>\n<p>만약 여기서 conda 명령어를 찾을 수 없다는 에러가 뜨면 bash 설정파일에 추가해줄 것이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ echo &quot;. /root/miniconda3/etc/profile.d/conda.sh&quot; &gt;&gt; ~/.bashrc</code></pre></div>\n<p>나는 root에 미니콘다를 설치했으므로 저 경로로 썼고, 다른 곳에다 설치했다면 conda.sh 파일이 있는 경로를 써주면 된다. 이제 conda.sh 파일 경로가 .bashrc 파일에 추가됐다. 이제 가상환경을 다시 만들어보면 정상 작동할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ conda activate condatest</code></pre></div>\n<p>가상환경을 실행하면 명령라인 제일 앞에 가상환경 이름이 뜨는 것을 확인할 수 있다. 여기서는 (condatest)가 뜨면 맞는 것이다.</p>\n<h3 id=\"django-uwsgi-설치\" style=\"position:relative;\"><a href=\"#django-uwsgi-%EC%84%A4%EC%B9%98\" aria-label=\"django uwsgi 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django, uwsgi 설치</h3>\n<p>Django를 설치해야하므로 pip를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo apt-get install python3-pip</code></pre></div>\n<p>pip가 최신 버전(20.2.2)이 아니라고 해서 업그레이드 해줬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pip install --upgrade pip</code></pre></div>\n<p>대망의 장고 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pip install django</code></pre></div>\n<p>uwsgi 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pip install uwsgi</code></pre></div>\n<p>만약 uwsgi 설치할 때 command errored out with exit status 1 오류가 난다면,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ apt-get update &amp;&amp; apt-get install gcc-4.8 &amp;&amp; rm /usr/bin/gcc &amp;&amp; ln -s /usr/bin/gcc-4.8 /usr/bin/gcc</code></pre></div>\n<p>를 실행한 후에 pip으로 다시 uwsgi를 설치하면 된다.</p>\n<h3 id=\"mysql-설치\" style=\"position:relative;\"><a href=\"#mysql-%EC%84%A4%EC%B9%98\" aria-label=\"mysql 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL 설치</h3>\n<p>설치할 수 있는 mysql server 버전을 체크한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo apt-cache search mysql-server</code></pre></div>\n<p>일단 5.7 버전을 설치해준다. 중간에 root 사용자의 패스워드를 설정하는 화면이 나온다. 설정하고 싶은 비밀번호를 입력하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo apt-get install mysql-server-5.7</code></pre></div>\n<p>설치가 잘 되었는지 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ netstat -ntlp | grep mysqld</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">tcp    0    0 127.0.0.1:3306     0.0.0.0:*        LISTEN      16003/mysqld</code></pre></div>\n<p>뭐가 나오는 거 보니 잘 된 것 같다. 이제 mysql을 실행해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mysql -u root -p</code></pre></div>\n<p>설치 시 지정한 비밀번호를 입력하면 mysql이 실행된다.</p>\n<h3 id=\"mysql-characterset-설정\" style=\"position:relative;\"><a href=\"#mysql-characterset-%EC%84%A4%EC%A0%95\" aria-label=\"mysql characterset 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mysql characterset 설정</h3>\n<p>한글 입력 시 깨지는 문제를 해결하기 위해 characterset을 설정해준다.</p>\n<p>mysql 설정 파일이 있는 경로로 이동한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd /etc/mysql/conf.d</code></pre></div>\n<p>mysql.cnf 파일을 열어서 원래 있던 <code class=\"language-text\">[mysql]</code>을 지우고 새 설정을 붙여넣는다. vim을 사용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> mysql.cnf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[mysqld]\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\nuser=mysql\ncharacter-set-server=utf8\ncollation-server=utf8_general_ci\ninit_connect = set collation_connection = utf8_general_ci\ninit_connect = set names utf8\n\n[mysql]\ndefault-character-set=utf8\n\n[mysqld_safe]\nlog-error=/var/log/mysqld.log\npid-file=/var/run/mysqld/mysqld.pid\ndefault-character-set=utf8\n\n[client]\ndefault-character-set=utf8\n\n[mysqldump]\ndefault-character-set=utf8</code></pre></div>\n<p>mysql 재시작 후, 다시 root로 로그인해서 설정이 잘 반영됐는지 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo /etc/init.d/mysql restart</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mysql -u root -p</code></pre></div>\n<p>mysql 실행 후,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mysql&gt; status</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\nServer characterset:\tutf8\nDb     characterset:\tutf8\nClient characterset:\tutf8\nConn.  characterset:\tutf8\n...</code></pre></div>\n<p>characterset이 utf8로 잘 저장됐다.</p>\n<p><a href=\"https://all-record.tistory.com/183\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mysql 설치에 도움 받은 곳</a></p>\n<h3 id=\"django-mysql-연동\" style=\"position:relative;\"><a href=\"#django-mysql-%EC%97%B0%EB%8F%99\" aria-label=\"django mysql 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django, MySQL 연동</h3>\n<p><a href=\"https://naon.me/posts/til42\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">장고 프로젝트 초기 세팅</a>글을 참고해 그대로 진행했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pip install mysqlclient</code></pre></div>\n<p>설치 후 장고 프로젝트 메인 폴더 settings.py에서 DATABASES 설정을 mysql로 맞춰줬다. 마이그레이션 후 mysql에서 테이블 확인을 해보니 django 기본 테이블들이 잘 생성된 것을 확인했다.</p>\n<p>미니콘다 말고 virtualenv를 쓸 때 <code class=\"language-text\">pip install mysqlclient</code>로 설치가 되지 않아서 <a href=\"https://stackoverflow.com/questions/42152729/error-installing-mysqlclient-on-ubuntu-16-04-using-pip-and-python-3-6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">스택 오버플로우</a>에서 찾은 다른 방법을 시도했다. 내 파이썬은 3.8 버전이니 3.6 부분만 3.8로 수정해서 실행했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo apt-get install python3.8-dev libmysqlclient-dev</code></pre></div>\n<p>여기서 그대로 설치가 되면 좋고, 만약 이런 오류가 뜨면,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">E: Unable to locate package python3.8-dev\nE: Couldn&#39;t find any package by glob &#39;python3.8-dev&#39;\nE: Couldn&#39;t find any package by regex &#39;python3.8-dev&#39;</code></pre></div>\n<p>아래 명령어를 차례로 입력하고 모든 것이 설치된 후에 다시 mysqlclient를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo add-apt-repository ppa:jonathonf/python-3.8\n$ sudo apt-get update</code></pre></div>\n<h3 id=\"uwsgi로-장고-서버-띄우기\" style=\"position:relative;\"><a href=\"#uwsgi%EB%A1%9C-%EC%9E%A5%EA%B3%A0-%EC%84%9C%EB%B2%84-%EB%9D%84%EC%9A%B0%EA%B8%B0\" aria-label=\"uwsgi로 장고 서버 띄우기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>uwsgi로 장고 서버 띄우기</h3>\n<p><code class=\"language-text\">python manage.py runserver 0:8001</code>로 서버를 띄워주고 브라우저에서 확인해보는데 장고 로켓이 보이지 않는다… 서버 띄우는 과정 자체에는 문제가 없는데 뭐가 문제일까? ACG에서 8001번 포트도 허용했어야 하나 싶어서 추가해줬는데도 안 된다. 뭐가 문제지? 내일 다시 찾아보자. 세팅 진짜 너무 어렵다어흐어흐어으어우</p>\n<p>아니다 된다! 이게 맞는진 모르겠지만 ncloud 공인 IP주소에 내 포트번호 8001을 붙이니까 로켓이 보인다 만세!!!! (8000은 개츠비 블로그에 할당해놔서 영구결번임)</p>\n<p><img src=\"/media/ncloud-django-rocket.png\" alt=\"django runserver test\"></p>\n<p>이제 uwsgi를 이용해 서버를 띄워보자. 장고 프로젝트 폴더(manage.py가 있는 폴더)에 uwsgi.ini 파일을 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ vi uwsgi.ini</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[uwsgi]\n\nchdir = /root/project-test/project1\nmodule = project1.wsgi\nsocket = /root/project-test/project1/project1.sock\nchmod-socket = 666\nvacuum = true\nhome = /root/miniconda3/envs/condatest\nvirtualenv = /root/miniconda3/envs/condatest\ndaemonize = /root/project-test/project1/uwsgi.log\ndie-on-term = true</code></pre></div>\n<ul>\n<li><code class=\"language-text\">chdir</code> : 장고 프로젝트 폴더 경로</li>\n<li><code class=\"language-text\">module</code> : 장고 프로젝트를 생성하면서 만들어진 wsgi.py 파일을 지칭</li>\n<li><code class=\"language-text\">socket</code> : 장고 프로젝트 폴더에 생성할 소켓 파일</li>\n<li><code class=\"language-text\">home</code>, <code class=\"language-text\">virtualenv</code> : 가상환경 경로. 미니콘다/아나콘다를 쓴다면 <code class=\"language-text\">conda env list</code>로 경로를 확인할 수 있다.</li>\n<li><code class=\"language-text\">daemonize</code> : 장고 프로젝트 폴더에 생성할 로그 파일</li>\n</ul>\n<p>ini 파일을 만들어준 뒤 소켓 파일과 로그 파일을 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ uwsgi --ini uwsgi.ini</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[uWSGI] getting INI configuration from uwsgi.ini</code></pre></div>\n<p>라는 메시지가 뜨면 잘 생성된 것이다. 이제 서버를 띄워보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ uwsgi --http :8001 --module project1.wsgi</code></pre></div>\n<p>브라우저에서 ncloud 공인 IP주소 + 포트 번호로 들어가면 장고 로켓을 확인할 수 있다.</p>\n<p><img src=\"/media/ncloud-uwsgi-rocket.png\" alt=\"uwsgi server test\"></p>\n<p>그냥 런서버랑 다른 로켓이다. 같아보이지만 아무튼 다르다.</p>\n<h4 id=\"nginx와-uwsgi-연동하기\" style=\"position:relative;\"><a href=\"#nginx%EC%99%80-uwsgi-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0\" aria-label=\"nginx와 uwsgi 연동하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nginx와 uwsgi 연동하기</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ vi /etc/nginx/sites-available/default</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">upstream django {\n  server unix:///root/project-test/project1/project1.sock;\n}\n\nserver {\n  listen 80 default_server;\n  listen [::]:80 default_server;\n\n  server_name 공인IP주소 도메인;\n  charset utf-8;\n\n  location / {\n    uwsgi_pass django;\n    include /etc/nginx/uwsgi_params;\n  }\n\n  location /static {\n    alias /root/project-test/project1/static;\n  }\n}</code></pre></div>\n<ul>\n<li><code class=\"language-text\">upstream django</code>의 <code class=\"language-text\">server</code> 항목에는 소켓 파일 경로 지정한다.</li>\n<li><code class=\"language-text\">server_name</code>에는 공인 IP주소와 도메인을 써준다.</li>\n<li><code class=\"language-text\">location /static</code>에는 장고 프로젝트 폴더 경로를 써준다. static 폴더가 생기는 모양</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo nginx -t</code></pre></div>\n<p>만약 여기서 에러가 나면 default 파일에 뭔가 오타가 있거나 경로지정이 잘못된 것이다. 다시 한번 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo service nginx restart</code></pre></div>\n<p>블로그에서는 nginx 재시작 후 공인 IP 주소로 접속하면 장고 로켓이 뜰 거라고 했는데 안 뜬다. uwsgi를 실행해줘야 한다는 블로그 글을 보고 <code class=\"language-text\">sudo service uwsgi start</code>를 했더니 uwsgi.service 파일이 없다 어쩌고 하더라.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Warning: uwsgi.service changed on disk. Run &#39;systemctl daemon-reload&#39; to reload units.\nJob for uwsgi.service failed because the control process exited with error code. See &quot;systemctl status uwsgi.service&quot; and &quot;journalctl -xe&quot; for details.</code></pre></div>\n<p>이리저리 찾아보니 uwsgi.service 파일을 만들어줬어야 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ vi /etc/systemd/system/uwsgi.service</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[Unit]\nDescription=uWSGI Emperor service\n\n[Service]\nExecStart=/root/miniconda3/envs/condatest/bin/uwsgi \\\n         --emperor /root/project-test/project1\nRestart=on-failure\nKillSignal=SIGQUIT\nType=notify\nNotifyAccess=all\nStandardError=syslog\n\n[Install]\nWantedBy=multi-user.target</code></pre></div>\n<ul>\n<li><code class=\"language-text\">ExecStart</code>에는 uwsgi경로를 쓰고 <code class=\"language-text\">--emperor</code>에는 장고 프로젝트 폴더 경로를 써준다. uwsgi 경로를 모르겠다면 <code class=\"language-text\">which uwsgi</code>로 알아낼 수 있다.</li>\n</ul>\n<p>이렇게 uwsgi.service 파일을 만들어준 후,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo systemctl start uwsgi</code></pre></div>\n<p>를 쳤는데, 또 같은 에러가 떴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Warning: uwsgi.service changed on disk. Run &#39;systemctl daemon-reload&#39; to reload units.\nJob for uwsgi.service failed because the control process exited with error code. See &quot;systemctl status uwsgi.service&quot; and &quot;journalctl -xe&quot; for details.</code></pre></div>\n<p>에러 메시지를 다시 잘 읽어보니 <strong>Run ‘systemctl daemon-reload’ to reload units.</strong> 이런 말이 있네? 시키는대로 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ systemctl daemon-reload</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo systemctl start uwsgi</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo systemctl enable uwsgi</code></pre></div>\n<p>차례로 실행 후 uwsgi가 잘 돌아가고 있는지 확인해봤다. 이전에는 Fail이라고 떴었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ systemctl status uwsgi</code></pre></div>\n<p><img src=\"/media/ncloud-uwsgi-status.png\" alt=\"uwsgi status\"></p>\n<p>드디어 <strong>active (running)</strong> 글자가 보인다! 만세!</p>\n<p>+) 근데 이제 포트번호 없이 공인 IP로만도 접속이 되어야 하는데 안 된다. 뭐가 문제인지 모르겠다. 이리저리 하라는대로 설정을 바꿔봐도 안 됨 ㅠㅠ… 내일 처음부터 다시 해봐야하나 하하</p>","fields":{"slug":"/posts/til73","tagSlugs":["/tag/til/","/tag/ncloud/"]},"frontmatter":{"date":"2020-09-01T16:59:32","description":"개발환경 세팅","tags":["til","ncloud"],"title":"ncloud 인스턴스 생성하고 nginx, uwsgi, django, mysql 설치하기","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til73"}}}