{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til59","result":{"data":{"markdownRemark":{"id":"2f89c400-71fa-5946-878e-dba8a4413e9f","html":"<p><a href=\"https://www.udemy.com/course/the-complete-guide-to-django-rest-framework-and-vue-js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Udemy</a> 강의를 들으면서, <a href=\"https://www.django-rest-framework.org/api-guide/serializers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DRF 공식문서</a>를 보면서, 그리고 구글링하면서 정리한 내용입니다.</p>\n<h3 id=\"django-rest-framework---level-one\" style=\"position:relative;\"><a href=\"#django-rest-framework---level-one\" aria-label=\"django rest framework   level one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django REST Framework - Level One</h3>\n<h4 id=\"serializers-validation\" style=\"position:relative;\"><a href=\"#serializers-validation\" aria-label=\"serializers validation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serializers Validation</h4>\n<p>DRF는 여러 가지 validator를 제공한다. 하지만 built-in validator들이 모든 케이스를 커버하지 못하기 때문에 필요한 상황에 맞춰 custom validator를 짜야한다.</p>\n<p><em>참고</em><br>\n<strong>Object level validation</strong><br>\n필드 여러 개를 검증하는 것을 말한다. 만들었던 모델을 예로 들면, 특정 article의 title, author 모두를 확인하는 것이 object level validation이다.</p>\n<p><strong>Field level validation</strong><br>\n반면 field level validation은 단일 필드만 검증하는 방법이다.</p>\n<p>우선 “title” 항목과 “description” 항목의 값(value)이 똑같을 때 에러를 발생시키는 validator를 짜보자. 두 필드를 가지고 validation을 하는 것이므로 object level validation에 해당한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>Serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>read_only <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  author <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  title <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  description <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  body <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  location <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  publication_date <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  active <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  created_at <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>read_only <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  updated_at <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>read_only <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> validated_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> Article<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>validated_data<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> validated_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    instance<span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'description'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'location'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>publication_date <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'publication_date'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>publication_date<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> instance</code></pre></div>\n<p>이런 serializers.py가 있다. 시리얼라이저 클래스 하단에 validate 메소드를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">'''check that description and title are different'''</span>\n  <span class=\"token comment\"># title과 description 값이 같으면 ValidationError를 일으킨다.</span>\n  <span class=\"token comment\"># 에러 메시지도 설정할 수 있다.</span>\n  <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'description'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> serializers<span class=\"token punctuation\">.</span>ValidationError<span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Title and Description must be different from one another.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> data</code></pre></div>\n<p><img src=\"/media/udemy-drf09-validation_input.png\" alt=\"input wrong data\">\n<img src=\"/media/udemy-drf10-validation_error_return.png\" alt=\"error return\"></p>\n<p>제목과 설명이 같으면 설정한 에러, 에러 메시지가 출력되지만 내용을 달리 입력하면 아래와 같이 정상 작동하면서 새 인스턴스가 생성된다.</p>\n<p><img src=\"/media/udemy-drf11-validation_return.png\" alt=\"200ok\"></p>\n<p>다음으로, field level validation을 짜보자. 이번에는 “title” 값이 60자를 넘어가면 ValidationError가 발생하게 할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">validate_title</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> serializers<span class=\"token punctuation\">.</span>ValidationError<span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"The title has to be less than 60 characters long.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> value</code></pre></div>\n<p>Object level validation처럼 <code class=\"language-text\">data</code>를 받아 처리해주는 게 아니라 <code class=\"language-text\">validate_title</code>로 필드를 지정했다. 필드값을 <code class=\"language-text\">value</code> 파라미터로 받아 validation 작업을 해준다.</p>\n<p>코드를 저장한 뒤 60자 넘는 제목을 작성하면 아래와 같이 설정해준 에러 메시지가 출력된다.</p>\n<p><img src=\"/media/udemy-drf12-title_input.png\" alt=\"input wrong data\">\n<img src=\"/media/udemy-drf13-length_validation_error_return.png\" alt=\"error return\"></p>","fields":{"slug":"/posts/til59","tagSlugs":["/tag/til/","/tag/django/","/tag/django-rest-framework/","/tag/drf/"]},"frontmatter":{"date":"2020-07-27T09:50:32","description":"RESTful API를 더욱 편하게 만들 수 있는 Django Rest Framework","tags":["til","django","django-rest-framework","drf"],"title":"Django Rest Framework 활용하기 4 - Serializers Validation","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til59"}}}