{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til37","result":{"data":{"markdownRemark":{"id":"1a7b1220-5496-5046-a9d3-db083f32052c","html":"<p>회원가입, 로그인, 댓글 작성 기능을 하는 엔드포인트를 구현하고 httpie로 회원가입, 로그인 테스트를 진행했다.\n기능을 기반으로 앱을 분리해서 작업했기 때문에 회원가입, 로그인이 이루어질 users 앱을 생성하고, 댓글 작성 및 확인이 이루어질 comments 앱을 생성했다.</p>\n<h3 id=\"회원가입과-로그인-user앱에서-진행\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85%EA%B3%BC-%EB%A1%9C%EA%B7%B8%EC%9D%B8-user%EC%95%B1%EC%97%90%EC%84%9C-%EC%A7%84%ED%96%89\" aria-label=\"회원가입과 로그인 user앱에서 진행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회원가입과 로그인 (user앱에서 진행)</h3>\n<p>먼저 models.py에서 데이터 저장에 앞서 필요한 데이터 테이블 틀을 잡았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Users</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 가입 시 아이디(username)와 비밀번호(password) 정보를 받아야 하므로</span>\n  <span class=\"token comment\"># user_data 테이블에 username열과 password열을 만들어줌</span>\n  username <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n  password <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n    db_table <span class=\"token operator\">=</span> <span class=\"token string\">'user_data'</span></code></pre></div>\n<p>그 다음 views.py에서 사용자가 회원가입 페이지와 로그인 페이지로 들어왔을 때 어떤 화면을 보여줄지 설정해준다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse<span class=\"token punctuation\">,</span> HttpResponse\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Users\n\n<span class=\"token comment\"># /users/로 들어왔을 때 출력되는 화면</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MainView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Welcome to'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Westagram'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sign-up'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'/users/sign-up'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Log-in'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'/users/log-in'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># /users/sign-up/에서 액션에 따라 띄워줄 화면 설정</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SignUpView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 데이터를 입력하는 것이므로 get이 아닌 post 메서드를 사용한다.</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token comment\"># 유저가 입력한 데이터인 data['username']과 data['password']이</span>\n    <span class=\"token comment\"># 각각 username과 password 열에 저장된다.</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      Users<span class=\"token punctuation\">(</span>\n        username <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        password <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 에러가 발생하면 401코드와 함께 지정한 메시지를 띄운다.</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'INVALID_ID'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 에러가 발생하지 않고 잘 작동하면 200코드와 함께 지정한 메시지를 띄운다.</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonReponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'WELCOME'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    \n  <span class=\"token comment\"># /users/sign-up/을 호출했을 때 출력되는 화면</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Please'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Sign-up'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># /users/log-in/에서 액션에 따라 띄워줄 화면 설정</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LogInView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 데이터를 입력하는 것이므로 get이 아닌 post 메서드를 사용한다.</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># sign-up과는 달리 데이터를 신규로 입력하는 것이 아니므로 .save()는 쓰지 않는다.</span>\n    Users<span class=\"token punctuation\">(</span>\n      username <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      password <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 아이디가 유효하면 비밀번호가 유효한지 검사하고,</span>\n    <span class=\"token comment\"># 아이디나 비밀번호가 유효하지 않다면 401코드와 함께 지정한 메시지를 띄운다.</span>\n    <span class=\"token comment\"># 아이디와 비밀번호가 모두 일치한다면 200코드와 함께 지정한 메시지를 띄운다.</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">if</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user_id <span class=\"token operator\">=</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> user_id<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'WELCOME, '</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'INVALID_USER'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'INVALID_USER'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'INVALID_USER'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># 로그인 정보를 받아서 입력한 유저의 정보만을 호출하고 싶었으나 아래처럼 하면 에러 발생</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    login_data <span class=\"token operator\">=</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>login_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위에서 화면 별 액션을 설정해주었으므로 유저가 접속한 url과 views.py 파일을 연결해준다. 앱 디렉토리 안에는 urls.py가 없으므로 새로 만들어서 내용을 입력해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> MainView<span class=\"token punctuation\">,</span> SignUpView<span class=\"token punctuation\">,</span> LogInView\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\"># /users/ 페이지에서는 MainView를 띄워준다.</span>\n  path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> MainView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\"># /users/sign-up/ 페이지에서는 SignUpView를 띄워준다.</span>\n  path<span class=\"token punctuation\">(</span><span class=\"token string\">'sign-up/'</span><span class=\"token punctuation\">,</span> SignUpView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\"># /users/log-in/ 페이지에서는 LogInView를 띄워준다.</span>\n  path<span class=\"token punctuation\">(</span><span class=\"token string\">'log-in/'</span><span class=\"token punctuation\">,</span> LogInView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>/users/ 페이지와 /comments/ 페이지 호출이 왔을 경우 해당 페이지로 넘어갈 수 있도록 메인 디렉토리의 urls.py에서 연결해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path<span class=\"token punctuation\">,</span> include\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'users/'</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">(</span><span class=\"token string\">'users.urls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'comments/'</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">(</span><span class=\"token string\">'comments.urls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"회원가입-테스트\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"회원가입 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회원가입 테스트</h3>\n<p>데이터 입력(=회원가입)은 python shell과 sqlite3에서 진행했고, 테스트는 httpie로 진행했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\"># username과 password 입력하기 (가입)\n&gt;&gt;&gt; Users.objects.create(username=&#39;test1&#39;, password=&#39;test1234&#39;)\n\n# 출력값(객체 생성)\n&lt;Users: Users object (1)&gt;</code></pre></div>\n<p>sqlite에서 테이블에 잘 들어갔나 확인을 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\">select * from user_data;\n\n# 출력값\nid          username    password\n----------  ----------  ----------\n1           test1       test1234</code></pre></div>\n<p>같은 아이디로 가입을 시도하면 401코드 에러가 떠야한다. 이미 가입했던 test1 아이디로 가입 시도를 해보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">http <span class=\"token operator\">-</span>v http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">8001</span><span class=\"token operator\">/</span>users<span class=\"token operator\">/</span>sign<span class=\"token operator\">-</span>up<span class=\"token operator\">/</span> username<span class=\"token operator\">=</span>test1 password<span class=\"token operator\">=</span>test1234</code></pre></div>\n<p>그럼 아래와 같은 결과값을 출력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\"># request 메시지의 start line\nPOST /users/sign-up/ HTTP/1.1\nAccept: application/json, */*;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 45\nContent-Type: application/json\nHost: 127.0.0.1:8001\nUser-Agent: HTTPie/2.1.0\n\n{\n    &quot;password&quot;: &quot;test1234&quot;,\n    &quot;username&quot;: &quot;test1&quot;\n}\n\n# response 메시지의 start line\n# 가입에 실패했으므로 에러코드 401 리턴\nHTTP/1.1 401 Unauthorized\nContent-Length: 25\nContent-Type: application/json\nDate: Sun, 14 Jun 2020 12:07:21 GMT\nServer: WSGIServer/0.2 CPython/3.8.3\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\n\n# 에러코드 401과 리턴하기로 설정한 메시지\n{\n    &quot;message&quot;: &quot;INVALID_ID&quot;\n}</code></pre></div>\n<br>\n<h3 id=\"로그인-테스트\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"로그인 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 테스트</h3>\n<p>테스트는 터미널 상에서 httpie로 진행했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">http <span class=\"token operator\">-</span>v http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">8001</span><span class=\"token operator\">/</span>users<span class=\"token operator\">/</span>log<span class=\"token operator\">-</span><span class=\"token keyword\">in</span><span class=\"token operator\">/</span> username<span class=\"token operator\">=</span>test1 password<span class=\"token operator\">=</span>test1234</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\"># request 메시지의 start line\nPOST /users/log-in/ HTTP/1.1\nAccept: application/json, */*;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 45\nContent-Type: application/json\nHost: 127.0.0.1:8001\nUser-Agent: HTTPie/2.1.0\n\n{\n    &quot;password&quot;: &quot;test1234&quot;,\n    &quot;username&quot;: &quot;test1&quot;\n}\n\n# response 메시지의 start line\n# 로그인에 성공했으므로 200 코드 리턴\nHTTP/1.1 200 OK\nContent-Length: 29\nContent-Type: application/json\nDate: Sun, 14 Jun 2020 12:10:59 GMT\nServer: WSGIServer/0.2 CPython/3.8.3\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\n\n# 200 코드와 함께 리턴하기로 설정한 메시지\n{\n    &quot;message&quot;: &quot;WELCOME, test1&quot;\n}</code></pre></div>\n<p>아이디나 비밀번호가 틀릴 때도 테스트 해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">http <span class=\"token operator\">-</span>v http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">8001</span><span class=\"token operator\">/</span>users<span class=\"token operator\">/</span>log<span class=\"token operator\">-</span><span class=\"token keyword\">in</span><span class=\"token operator\">/</span> username<span class=\"token operator\">=</span>test1 password<span class=\"token operator\">=</span>test123</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\"># request 메시지의 start line\nPOST /users/log-in/ HTTP/1.1\nAccept: application/json, */*;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 44\nContent-Type: application/json\nHost: 127.0.0.1:8001\nUser-Agent: HTTPie/2.1.0\n\n{\n    &quot;password&quot;: &quot;test123&quot;,\n    &quot;username&quot;: &quot;test1&quot;\n}\n\n# response 메시지의 start line\n# 로그인에 실패했으므로 에러코드 401 리턴\nHTTP/1.1 401 Unauthorized\nContent-Length: 27\nContent-Type: application/json\nDate: Sun, 14 Jun 2020 12:19:01 GMT\nServer: WSGIServer/0.2 CPython/3.8.3\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\n\n# 에러코드 401과 리턴하기로 설정한 메시지\n{\n    &quot;message&quot;: &quot;INVALID_USER&quot;\n}</code></pre></div>\n<p>코멘트 기능 실습 내용은 다음 글에 이어서 기록하겠다.</p>","fields":{"slug":"/posts/til37","tagSlugs":["/tag/til/","/tag/django/","/tag/wecode/"]},"frontmatter":{"date":"2020-06-14T22:00:32.169Z","description":"회원가입, 로그인, 댓글 작성 기능을 구현하고 데이터베이스에서 원하는 데이터를 불러오기 실습","tags":["til","django","wecode"],"title":"django - 회원가입, 로그인, 댓글 기능 구현 실습 1","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til37"}}}