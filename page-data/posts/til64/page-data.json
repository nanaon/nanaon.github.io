{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til64","result":{"data":{"markdownRemark":{"id":"28dc2091-86ce-54fa-af3f-72cf2bd0e0b4","html":"<h3 id=\"jwt란\" style=\"position:relative;\"><a href=\"#jwt%EB%9E%80\" aria-label=\"jwt란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT란</h3>\n<p>JSON Web Token의 약자로, 두 개체에서 JSON 객체를 사용하여 가볍고 자가 수용적인(self-contained) 방식으로 정보를 안전성 있게 전달해준다. 자가수용적이라는 것은 필요한 모든 정보를 자체적으로 지니고 있다는 뜻이다. JWT 시스템에서 발급된 토큰은 토큰에 대한 기본정보, 전달할 정보 (로그인 시스템에서는 유저 정보) 그리고 토큰이 검증됐다는 것을 증명해주는 signature를 포함한다. JWT를 만들때는 JWT를 담당하는 라이브러리가 자동으로 인코딩 및 해싱 작업을 해준다.</p>\n<ul>\n<li>다양한 프로그래밍 언어에서 지원</li>\n<li>자가 수용적(self-contained). 사용자 인증에 필요한 모든 정보를 토큰 자체에 포함하기 때문에 별도의 인증 저장소가 필요없음.</li>\n<li>쉽게 전달 될 수 있음. 두 개체 사이에서 손쉽게 전달 될 수 있다. 웹서버의 경우 HTTP의 헤더에 넣어서 전달할 수도 있고, URL 파라미터로 전달할 수도 있다.</li>\n</ul>\n<p>‘인증(Authentication)‘이란, 등록된 사용자인지 확인하는 과정이고, ‘인가(Authorization)‘는 권한이 있는 사용자인지 확인하는 과정이다. http 특성 때문에 인증, 인가 과정은 꼭 필요하다. http는 요청(request)이 들어오면 응답(response)하는 구조인데, 응답 이후 상태가 저장되지 않기 때문에(stateless) 요청을 보낸 사용자가 등록된 사용자인지, 요청한 작업 권한을 가지고 있는지 검증해야한다.</p>\n<h3 id=\"서버-기반-인증-vs-토큰-기반-인증\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84-%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D-vs-%ED%86%A0%ED%81%B0-%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D\" aria-label=\"서버 기반 인증 vs 토큰 기반 인증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 기반 인증 vs. 토큰 기반 인증</h3>\n<p>JWT와 같은 토큰으로 사용자를 인증/인가하기 전에는 서버 기반으로 사용자를 인증했다. 인증에 필요한 정보를 모두 서버에 담고 있다가 클라이언트에서 요청이 왔을 때 응답하는 것.</p>\n<p><img src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/fd73d9e8-d3b5-420a-b33b-18b2d40b18a9/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20200816%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20200816T091849Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=c531d42e07259cd2739d5a2eaf1d248f9167b79b86c8da026a4e94d97fb2eac1&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22\" alt=\"서버 기반 인증 방식\"></p>\n<p>서버 기반 인증 방식은 서버를 확장하기 어렵다는 큰 단점이 있다. 세션을 서버에 저장하고 있고, 서버를 여러 대 사용하여 요청을 분산한 상황이라고 가정해보자. 어떤 사용자가 로그인 했을 때 그 사용자는 처음 로그인 했던 그 서버, 즉 그 사용자 정보가 담긴 서버에만 요청을 보내도록 설정을 해야한다. 그렇지 않으면 사용자 정보를 불러올 수 없기 때문이다.</p>\n<p>반면 토큰 인증 방식은 어떤 서버로 요청이 들어가든 상관없다. 서버에 세션이 존재하지 않으니 사용자의 로그인 상태를 신경쓰지 않아도 되며 이는 곧 서버를 쉽게 확장할 수 있다는 이야기가 된다.</p>\n<p><img src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/a8c437b1-3c5d-45d3-9401-f4084fccb79a/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20200816%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20200816T092056Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=7bd7b4cd40faa090ffabd21ab4c35bd2a968511ce0fbddf59d67971cfad894c9&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22\" alt=\"토큰 기반 인증 방식\"></p>\n<h3 id=\"jwt를-이용한-인가-방식\" style=\"position:relative;\"><a href=\"#jwt%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%B8%EA%B0%80-%EB%B0%A9%EC%8B%9D\" aria-label=\"jwt를 이용한 인가 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT를 이용한 인가 방식</h3>\n<p>Refresh token과 access token 두 가지를 사용한다는 전제 하에 JWT는 다음과 같이 동작한다.</p>\n<ol>\n<li>클라이언트에서 로그인 요청(post)</li>\n<li>서버에서, 요청이 들어온 로그인 정보와 DB에 저장된 유저 정보와 비교</li>\n<li>Access token을 발급하여 클라이언트에 JWT를 반환</li>\n<li>클라이언트에서 Access Token을 세션에 갖고있다가 인가가 필요한 요청(댓글 쓰기, 회원 정보 수정 등)을 할 때 Header에 담아 전달</li>\n<li>Access Token이 만료됐다면 서버에 있는 Refresh Token이 유효한지 확인 후 Access Token 재발급</li>\n<li>재발급한 Access Token을 헤더에 담아 다시 서버에 요청</li>\n<li>서버에서 토큰과 맞는 유저 정보가 있는지 확인 (디코딩 과정)</li>\n<li>찾은 유저 정보와 요청한 유저가 일치하는지 확인.</li>\n<li>일치하면 Request에 맞는 Response를 반환하고, 만료된 토큰이거나 잘못된 토큰이면(일치하는 유저가 없으면) 401 Unauthorized 리턴</li>\n</ol>\n<h3 id=\"jwt-구조\" style=\"position:relative;\"><a href=\"#jwt-%EA%B5%AC%EC%A1%B0\" aria-label=\"jwt 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT 구조</h3>\n<p><img src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/2559ce55-b6ac-4ca7-8f2b-40773a179db5/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20200816%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20200816T092135Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=21a59c454a5153d3d64dec1e4edda98554ce4f947a82568e2fcb347703048a77&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22\" alt=\"JWT 구조1\"></p>\n<p><img src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/8b5ff3b4-89b0-4081-b9a1-89e1565dbac6/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20200816%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20200816T092149Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=d4f57e2a69dadf738ec151fcae5166b5757f362f7b7e0706bef2275761b5aea8&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%20%3D%22Untitled.png%22\" alt=\"JWT 구조2\"></p>\n<ol>\n<li><strong>헤더(header)</strong> : JWT의 헤더는 타입과 알고리즘을 지정하고, BASE64 인코딩 되어 가장 맨 앞에 위치한다. 토큰 타입과 해시 알고리즘 종류 정보가 들어간다.</li>\n<li><strong>내용(payload)</strong> : JWT의 페이로드는 공개 클레임(claim. <em>정보의 한 단위, key/value 한 쌍을 의미</em>)과 비공개 클레임을 작성한 뒤 BASE64 인코딩하여 두 번째 요소에 위치시킨다. 지금 로그인한 사람이 누구인지 정보가 들어가는데, 쉽게 노출되지 않도록 pk키 등 쉽게 식별할 수 없는 정보가 들어가야 한다. (유저 아이디 절대 안 됨) 토큰 유효기간은 claim set이라고도 불리는 페이로드에 저장할 수 있다.</li>\n</ol>\n<p><em>참고) 공개된 클레임 이름은 토큰에서 사용하기 위해서 정의했지만, 충돌을 방지하기 위해서 공개한 이름이고 비밀 클레임이름은 서버와 클라이언트가 협의로 사용하는 이름을 의미</em></p>\n<ol start=\"3\">\n<li><strong>서명(signature)</strong> : JWT의 시그니처는 인코딩된 헤더와 페이로드를 합쳐 별도 지정된 secret key를 이용해 헤더에 지정된 알고리즘으로 암호화하여 생성한다. 프론트엔드에서 JWT를 백엔드 API 서버로 전송하면 서버에서는 전송받은 JWT의 서명 부분을 복호화하여 서버에서 생성한 JWT가 맞는지 확인한다. 계약서 위변조를 막기 위해 서로 사인하는 것과 같다.</li>\n</ol>\n<h3 id=\"jwt-사용-시-주의사항\" style=\"position:relative;\"><a href=\"#jwt-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"jwt 사용 시 주의사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT 사용 시 주의사항</h3>\n<p>JWT 페이로드 부분에는 사용자를 특정할 수 있는 정보가 들어가면 안 된다. 페이로드는 사용자를 식별할 수 있는 정보를 담고 있는데, 암호화가 아닌 단순 BASE64 인코딩으로 만든다. 누구나 쉽게 디코딩할 수 있기 때문에 아이디나 이메일 등 사용자 개인정보를 페이로드에 담아 인코딩한다면 개인정보가 유출될 우려가 있다. 따라서 DB에 저장된 유저의 PK값 같이 디코딩된 정보만 봐서는 어떤 사용자인지 알 수 없는 정보를 담아야 한다.</p>\n<p><em>참고) payload에 들어가는 클레임 설명 (필수 아님. 모두 선택사항)</em></p>\n<ul>\n<li><code class=\"language-text\">iss</code> : 토큰 발급자(issuer)</li>\n<li><code class=\"language-text\">sub</code> : 토큰 제목(subject). 토큰이 갖는 문맥</li>\n<li><code class=\"language-text\">aud</code> : 토큰 대상자(audience). 토큰을 사용할 수신자</li>\n<li><code class=\"language-text\">exp</code> : 토큰의 만료시간(expiraton), 시간은 NumericDate 형식으로 되어있어야 하며 (예: 1480849147370) 언제나 현재 시간보다 이후로 설정해야 함</li>\n<li><code class=\"language-text\">nbf</code> : Not Before를 의미하며, 토큰의 활성 날짜와 비슷한 개념. 여기에도 NumericDate 형식으로 날짜를 지정하며, 이 날짜 이전에는 토큰을 처리하지 않아야 함을 의미</li>\n<li><code class=\"language-text\">iat</code> : 토큰이 발급된 시간(issued at), 이 값으로 토큰의 age가 얼마나 되었는지 판단</li>\n<li><code class=\"language-text\">jti</code> : JWT의 고유 식별자로, 중복 처리를 방지하기 위하여 사용. 일회용 토큰에 사용하면 유용</li>\n</ul>\n<h3 id=\"jwt-유효기간-설정\" style=\"position:relative;\"><a href=\"#jwt-%EC%9C%A0%ED%9A%A8%EA%B8%B0%EA%B0%84-%EC%84%A4%EC%A0%95\" aria-label=\"jwt 유효기간 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT 유효기간 설정</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime<span class=\"token punctuation\">,</span> timedelta\n\ntoken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n\t\t    <span class=\"token string\">'login_id'</span> <span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'login_id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># 토큰 만료시간 3일 뒤로 설정</span>\n        <span class=\"token string\">'exp'</span>      <span class=\"token punctuation\">:</span> datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> SECRET_KEY<span class=\"token punctuation\">,</span> algorithm <span class=\"token operator\">=</span> <span class=\"token string\">'HS256'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">datetime.utcnow()</code> 현재 시간 불러오는 메서드</li>\n<li><code class=\"language-text\">timedelta</code> 특정 시간을 더하고 뺄 때 사용하는 메서드</li>\n<li><code class=\"language-text\">timedelta</code>는 인자로 <code class=\"language-text\">seconds</code>, <code class=\"language-text\">hours</code>, <code class=\"language-text\">days</code>, <code class=\"language-text\">weeks</code> 를 받고, <code class=\"language-text\">=</code>를 넣어서 시간을 표현</li>\n</ul>\n<p><code class=\"language-text\">month</code>, <code class=\"language-text\">year</code>는 다른 방법으로 설정해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> dateutil<span class=\"token punctuation\">.</span>relativedelta <span class=\"token keyword\">import</span> relativedelta\n\nexp <span class=\"token operator\">=</span>  datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> relativedelta<span class=\"token punctuation\">(</span>months<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Access token은 탈취될 가능성이 높으므로 보통 30분~2시간, refresh token은 아예 유효기간을 두지 않는 경우도 있고 한 달~3개월로 두는 곳도 있다.</p>\n<h3 id=\"jwt-변조-공격-대처\" style=\"position:relative;\"><a href=\"#jwt-%EB%B3%80%EC%A1%B0-%EA%B3%B5%EA%B2%A9-%EB%8C%80%EC%B2%98\" aria-label=\"jwt 변조 공격 대처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT 변조 공격 대처</h3>\n<p>대표적 JWT 변조 공격은 Signature Stripping인데 헤더의 <code class=\"language-text\">alg</code> 클레임을 <code class=\"language-text\">None</code>으로 변조하는 공격으로, 일부 JWT 라이브러리들이 <code class=\"language-text\">alg</code>가 <code class=\"language-text\">None</code>인 토큰을\n유효한 토큰으로 인식하는 문제가 있다. 또는 웹 게시판 등에 사용자가 입력한 값이 DB에 저장되고, 프론트엔드단에 출력하는 구조를 가진 페이지에서 공격자가 <code class=\"language-text\">&lt;script&gt;</code>태그를 입력하면 공격이 성립할 수 있다. 이때 일반 쿠키 또는 세션스토리지에 저장한 토큰이 탈취당할 수 있다.</p>\n<p>이를 보완하는 방법 첫 번째는 Refresh Token입니다. 사용자가 로그인할 때 Access Token과 함께 Refresh Token을 발급하는 것입니다.</p>\n<ul>\n<li>Access Token : 짧은 시간 내 만료되는 토큰. 사용자의 인증, 인가에 사용되는 토큰. 주로 세션에 저장</li>\n<li>Refresh Token : Access Token에 비해 긴 만료시간(하루 ~ 일주일 등)을 갖는 토큰으로 Access Token 재발급용 토큰. 노출되면 안 되므로 데이터베이스에 저장</li>\n</ul>\n<p>클라이언트는 Access Token이 만료되었다는 오류를 받으면 따로 저장해두었던 Refresh Token을 이용하여 Access Token의 재발급을 요청한다. 서버는 유효한 Refresh Token으로 요청이 들어오면 새로운 Access Token을 발급하고, 만료된 Refresh Token으로 요청이 들어오면 오류를 반환, 사용자에게 로그인을 요구한다.</p>\n<p>Access Token은 서버에 따로 저장해 둘 필요가 없지만, Refresh Token은 서버에 저장해 Access Token 재발행 시 검증에 활용해야 한다. 그러므로 Refresh Token을 이용한다는 것은 추가적인 I/O(Input/Output) 작업이 필요하다는 의미이며, 이는 I/O 작업이 필요없는 빠른 인증 처리를 장점으로 내세우는 JWT의 스펙에 포함되지 않는 부가적인 기술이다.</p>\n<p>그 외에도 토큰 자체를 암호화 하기, HTTPS 통신에서만 쿠키를 전송할 수 있게 하기, 기기 로그인 IP 등을 토큰에 넣는 것도 방법이 될 수 있다.</p>\n<h3 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h3>\n<p><a href=\"https://velopert.com/2350\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">토큰(Token) 기반 인증에 대한 소개</a><br>\n<a href=\"https://velog.io/@devmin/JWT-token-expired-date-with-timedelta\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JWT 토큰 유효시간 설정</a><br>\n<a href=\"https://bcho.tistory.com/1000\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">REST JWT(JSON Web Token)소개</a><br>\n<a href=\"https://velog.io/@ikswary/JWT%EC%9D%98-%EB%B3%B4%EC%95%88%EC%A0%81-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JWT의 보안적 고려사항</a></p>","fields":{"slug":"/posts/til64","tagSlugs":["/tag/til/","/tag/jwt/","/tag/authentication/","/tag/authorization/"]},"frontmatter":{"date":"2020-08-14T14:20:32","description":"토큰 기반으로 사용자 권한을 검증하는 JWT","tags":["til","jwt","authentication","authorization"],"title":"JWT(JSON Web Token)","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til64"}}}