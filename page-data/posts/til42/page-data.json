{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til42","result":{"data":{"markdownRemark":{"id":"275d58f5-bd57-5221-9151-73e91f14214a","html":"<h3 id=\"함수에-데코레이터-적용-시-실행-순서\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%97%90-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%EC%A0%81%EC%9A%A9-%EC%8B%9C-%EC%8B%A4%ED%96%89-%EC%88%9C%EC%84%9C\" aria-label=\"함수에 데코레이터 적용 시 실행 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수에 데코레이터 적용 시 실행 순서</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 실행 순서 4 - deco 함수가 실행되는데, 인자로 hello 함수를 받음</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">deco</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># wrapper 함수 = hello 함수</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 실행 순서 5 - \"start wrapper\" 출력</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start wrapper\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 실행 순서 6 - hello 함수 실행</span>\n    func<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 실행 순서 8 - \"end wrapper\" 출력</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end wrapper\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 실행 순서 9 - return으로 내부 함수(여기서는 hello 함수) 자체를 반환</span>\n  <span class=\"token comment\"># 함수 자체를 반환할 때는 () 없이 함수 이름만 써야함</span>\n  <span class=\"token keyword\">return</span> wrapper\n\n\n<span class=\"token comment\"># hello 함수를 실행하려고 했는데 데코레이터로 데코레이팅 되어있음</span>\n<span class=\"token comment\"># 실행 순서 3 - 정의된 deco 데코레이터 먼저 실행</span>\n<span class=\"token decorator annotation punctuation\">@deco</span>           <span class=\"token comment\"># hello = deco(hello)     # hello = wrapper</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># hello는 deco 의 func에 전달</span>\n  <span class=\"token comment\"># 실행 순서 7 - \"Hello\" 출력</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 실행 순서 1 - \"main start\" 출력</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main start\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 실행 순서 2 - hello 함수 호출</span>\n  <span class=\"token comment\"># 즉, deco 데코레이터 먼저 실행 후 hello 함수 실행</span>\n  hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 실행 순서 10 - hello 함수 호출 및 리턴 과정 모두 끝내고 \"main end\"호출</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main end\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">main start\nstart wrapper\nHello\nend wrapper\nmain end</code></pre></div>\n<br>\n<h3 id=\"동적으로-데이터를-추가해주는-예시\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B6%94%EA%B0%80%ED%95%B4%EC%A3%BC%EB%8A%94-%EC%98%88%EC%8B%9C\" aria-label=\"동적으로 데이터를 추가해주는 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적으로 데이터를 추가해주는 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 실행 순서 3 - 출력</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kwargs=\"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 실행 순서 4 - kwargs에 추가</span>\n  kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\n  <span class=\"token comment\"># 실행 순서 5 </span>\n  <span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> kwargs<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 5-1</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key=\"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 5-2</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value=\"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 실행 순서 1 - 출력</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 실행 순서 2</span>\n  test_func<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 실행 순서 6</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">start <span class=\"token comment\"># 1</span>\nkwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span> <span class=\"token comment\"># 3</span>\nkey<span class=\"token operator\">=</span>a <span class=\"token comment\"># 5-1</span>\nvalue<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token comment\"># 5-2</span>\nkey<span class=\"token operator\">=</span>b <span class=\"token comment\"># 5-1</span>\nvalue<span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token comment\"># 5-2</span>\nkey<span class=\"token operator\">=</span>c <span class=\"token comment\"># 5-1</span>\nvalue<span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token comment\"># 5-2</span>\nkey<span class=\"token operator\">=</span>d <span class=\"token comment\"># 5-1 동적으로 추가된 데이터</span>\nvalue<span class=\"token operator\">=</span><span class=\"token number\">4</span> <span class=\"token comment\"># 5-2</span>\nend <span class=\"token comment\"># 6</span></code></pre></div>","fields":{"slug":"/posts/til42","tagSlugs":["/tag/til/","/tag/python/","/tag/wecode/"]},"frontmatter":{"date":"2020-06-17T19:07:32.160Z","description":"로그인 데코레이터를 구현하기 전 데코레이터 실행 순서 짚고 넘어가기","tags":["til","python","wecode"],"title":"python - 데코레이터 복습","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til42"}}}