{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til52","result":{"data":{"markdownRemark":{"id":"01b2658e-da1b-59af-8907-762133c4c07a","html":"<p><a href=\"https://www.youtube.com/watch?v=tPjpcsgxgWc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker가 무엇인지, 왜 쓰는지 감을 잡는 데에 도움받은 영상</a></p>\n<h3 id=\"docker란\" style=\"position:relative;\"><a href=\"#docker%EB%9E%80\" aria-label=\"docker란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker란</h3>\n<p>도커는 컨테이너 가상화 시스템이다. 소프트웨어적으로 가상의 컴퓨터 시스템을 만드는 것.</p>\n<p>도커는 각 요소가 설치된 그 모습을 ‘image’라는 형태로 박제해서 저장한다. 박제한 image는 github에 push하는 것과 같은 원리로 dockerhub에 push해서 어디서든 pull해서 작업할 수 있다. 따라서 다른 팀원이 내가 push한 이미지를 끌어와서 본인 작업 공간에서 쓸 수 있다. 팀에서 github을 쓰는 방식과 같다.</p>\n<p>Miniconda로 가상환경을 만들어서 그 안에서 작업했듯이 docker는 ‘container’라는 가상 공간을 만들어서 박제한 image를 이용해 그 가상공간에 각 요소를 설치한다. Miniconda에서도 다른 가상환경을 생성해서 이동하면 그 전 공간에 설치했던 프로그램이 없듯이 도커 컨테이너도 마찬가지다. 각 컨테이너는 독립적으로 돌아간다.</p>\n<h3 id=\"hypervisor-가상화와-container-가상화-차이점\" style=\"position:relative;\"><a href=\"#hypervisor-%EA%B0%80%EC%83%81%ED%99%94%EC%99%80-container-%EA%B0%80%EC%83%81%ED%99%94-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"hypervisor 가상화와 container 가상화 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hypervisor 가상화와 Container 가상화 차이점</h3>\n<h4 id=\"hypervisor-가상화-흐름\" style=\"position:relative;\"><a href=\"#hypervisor-%EA%B0%80%EC%83%81%ED%99%94-%ED%9D%90%EB%A6%84\" aria-label=\"hypervisor 가상화 흐름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hypervisor 가상화 흐름</h4>\n<ul>\n<li>하드웨어 스펙 정하기</li>\n<li>OS 설치</li>\n<li>한 번 쓰는 데에 시간이 오래 걸리는 게 단점</li>\n<li>컴퓨터 한 대로 여러 대를 돌리는 것처럼 쓸 수 있기 때문에 비용 절감 차원에서 사용</li>\n<li>일단 플레이어를 만든 후 테이프/CD를 꽂아서 플레이 하는 것과 같은 원리</li>\n</ul>\n<h4 id=\"docker-가상화-흐름\" style=\"position:relative;\"><a href=\"#docker-%EA%B0%80%EC%83%81%ED%99%94-%ED%9D%90%EB%A6%84\" aria-label=\"docker 가상화 흐름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker 가상화 흐름</h4>\n<ul>\n<li>컨테이너 기반의 가상화 서비스</li>\n<li>플레이어를 만들지 않아도 원하는 테이프/CD를 바로 꽂아서 플레이할 수 있는 것과 같은 원리</li>\n</ul>\n<p>Docker 같은 컨테이너 가상환경이 핫한 이유는 클라우드 때문이다. 인프라(AWS 같은)를 거치지 않고 빠르게 배포 가능하다.</p>\n<p>docker 이미지\n적층형 구조 like git\n새로 업데이트 된 부분만 조각조각 쌓임</p>\n<p>CI/CD 서버가 중단되지 않고 실시간으로 배포할 수 있는 기술\n그것을 가능하게 해주는 것이 docker\n(적층형이라 새 버전으로 갈아끼울 수 있는 것)</p>\n<p>MSA 기능 단위로 인프라, 팀을 쪼개는 구조 (장애 요소 최소화하기 위해)\n그러나 관리 비용이 늘어난다는 단점</p>\n<p>docker 이미지 / 컨테이너 구분하기</p>\n<p><code class=\"language-text\">docker ps -a</code> 컨테이너 전체 리스트\n<code class=\"language-text\">docker images -a</code> 이미지 전체 리스트</p>\n<p>장고 프로젝트 폴더(메인 폴더)에 Dockerfile 생성\nFROM 오에스이름\nWORKDIR 도커 메인 경로</p>\n<p>COPY requirements.txt ./\nRUN pip install -r requirements.txt</p>\n<h1 id=\"gunicon-추가-필요\" style=\"position:relative;\"><a href=\"#gunicon-%EC%B6%94%EA%B0%80-%ED%95%84%EC%9A%94\" aria-label=\"gunicon 추가 필요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gunicon 추가 필요</h1>\n<p>EXPOSE 8000</p>\n<p>CMD </p>\n<p>보안이 약한 편. 이미지 탈취되면 바로 정보 유출되니까\n암호화 툴 사용 필요</p>\n<p>도커아이디/프로젝트명:버전번호태깅(예 - 0.1.0)</p>\n<p>—name 컨테이너 이름\n-d demon 계속 돌아가게\n-p 8000:8000 내 로컬 포트랑 도커 포트랑 매칭(port forwarding)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 기반이 될 이미지\n# docker hub에서 끌어옴\n# python 버전 3대 환경의 리눅스 운영체제\nFROM python:3 \n\n# 작업디렉토리(default)설정\n# 홈 디렉토리와 같은 개념\n# docker 이미지 파일 시스템 안에 리눅스가 담겨있고 그 안에 있는 디렉토리\nWORKDIR /usr/src/app \n\n## Install packages\n# 현재 패키지 설치 정보를 도커 이미지(working directory)에 복사\nCOPY requirements.txt ./ \n# 설치정보를 읽어 들여서 패키지를 설치\nRUN pip install -r requirements.txt\n\n## Copy all src files\n# 현재경로에 존재하는 모든 소스파일을 이미지에 복사\nCOPY . . \n\n\n## Run the application on the port 8080\n# docker가 사용할 포트\nEXPOSE 8000   \n\n\n# CMD [&quot;python&quot;, &quot;./setup.py&quot;, &quot;runserver&quot;, &quot;--host=0.0.0.0&quot;, &quot;-p 8000&quot;]\n# gunicorn을 사용해서 서버를 실행\nCMD [&quot;gunicorn&quot;, &quot;--bind&quot;, &quot;0.0.0.0:8000&quot;, &quot;example.wsgi:application&quot;]  </code></pre></div>","fields":{"slug":"/posts/til52","tagSlugs":["/tag/til/","/tag/docker/","/tag/aws/","/tag/rds/","/tag/deploy/"]},"frontmatter":{"date":"2020-07-16T15:30:32.160Z","description":"Docker를 이용해 프로젝트 배포하기","tags":["til","docker","aws","rds","deploy"],"title":"Docker 기본 개념과 사용법","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til52"}}}