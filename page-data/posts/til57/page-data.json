{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til57","result":{"data":{"markdownRemark":{"id":"9447dc07-39e9-5326-855d-5fbaf3c82396","html":"<p><a href=\"https://www.udemy.com/course/the-complete-guide-to-django-rest-framework-and-vue-js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Udemy</a> 강의를 들으면서, <a href=\"https://www.django-rest-framework.org/api-guide/serializers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DRF 공식문서</a>를 보면서, 그리고 구글링하면서 정리했다.</p>\n<h3 id=\"django-rest-framework---level-one\" style=\"position:relative;\"><a href=\"#django-rest-framework---level-one\" aria-label=\"django rest framework   level one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django REST Framework - Level One</h3>\n<h4 id=\"the-api_view-decorator---part-one\" style=\"position:relative;\"><a href=\"#the-api_view-decorator---part-one\" aria-label=\"the api_view decorator   part one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The @api_view Decorator - Part One</h4>\n<p>DRF에서는 API 뷰에 쓸 수 있는 두 가지 wrapper를 제공한다. 하나는 <code class=\"language-text\">@api_view</code> 데코레이터로 함수 기반(function based) API 뷰를 짤 때 쓴다. 다른 하나는 <code class=\"language-text\">APIView</code> 클래스로, 클래스 기반(class based) API 뷰를 짤 때 사용한다. 이 wrapper를 사용하면 request instance를 받는 데에 필요한 모든 코드를 손쉽게 사용할 수 있으며, 상황에 맞는 response를 내보내주는 것, 그리고 예외처리까지 가능하다.</p>\n<p>그렇다면 DRF를 이용해 짠 뷰는 메소드를 어떻게 구분해내는가? 요청한 request에 따라 결정되며 그것을 판별하는 장치가 <code class=\"language-text\">@api_view</code> 데코레이터다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> status\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>decorators <span class=\"token keyword\">import</span> api_view\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>response <span class=\"token keyword\">import</span> Response\n\n<span class=\"token keyword\">from</span> news<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Article\n<span class=\"token keyword\">from</span> news<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>serializers <span class=\"token keyword\">import</span> ArticleSerializer\n\n<span class=\"token decorator annotation punctuation\">@api_view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">article_list_create_api_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 데코레이터를 통해 request로 온 메소드와 일치하는지 판별 후,</span>\n  <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 유효한(active = True) 기사 객체만 불러온다.</span>\n    articles <span class=\"token operator\">=</span> Article<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 직렬화한 데이터를 리턴하기 위해 위에서 선언한 query set을 serializer에 인자로 넣는다.</span>\n    serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>articles<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>url을 설정한 뒤 서버를 띄워서 확인해보면 AttributeError가 뜬다. 왜일까? 에러 메시지를 확인해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Got AttributeError when attempting to get a value for field `author` on serializer `ArticleSerializer`.\nThe serializer field might be named incorrectly and not match any attribute or key on the `QuerySet` instance.\nOriginal exception text was: &#39;QuerySet&#39; object has no attribute &#39;author&#39;.</code></pre></div>\n<p>불러온 쿼리셋(list)을 단일 항목으로 직렬화하려고 해서 생기는 오류다. <code class=\"language-text\">serializer =</code> 부분에 <code class=\"language-text\">many = True</code>를 추가해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>articles<span class=\"token punctuation\">,</span> many <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이제 모든 article list가 뜨는 것을 확인할 수 있다.</p>\n<p><img src=\"/media/udemy-drf01-article-list.png\" alt=\"article list\"></p>\n<p>보다시피 DRF에서 API는 browsable하다. 기본적으로 웹 인터페이스를 가지고 있어서 개발자가 사용하기 매우 편리하다. 저 페이지 안에서</p>\n<ul>\n<li>request 메소드</li>\n<li>엔드포인트 주소</li>\n<li>status code 및 message</li>\n<li>해당 api에서 사용 가능한 메소드</li>\n</ul>\n<p>를 확인할 수 있다. 장고를 쓸 때에는 Postman에서 엔드포인트 및 자료 리턴 형태를 테스트했지만 DRF에서는 웹 브라우저에서도 그 작업이 가능하다.</p>\n<p>DRF의 편리한 점은 여기서 끝이 아니다! views.py 소스코드를 다시 들여다보면 장고를 쓸 때와는 어딘지 다른 점이 보인다. <code class=\"language-text\">return</code> 부분이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>response <span class=\"token keyword\">import</span> Response\n\n<span class=\"token triple-quoted-string string\">'''\n코드 중략\n'''</span>\n\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>꼬박꼬박 <code class=\"language-text\">return JsonResponse</code>를 붙여줘야 json 형태로 리턴할 수 있었는데 DRF에서는 <code class=\"language-text\">Response</code> 클래스만 사용하면 된다. request 맥락에 따라서 DRF가 알아서 가장 적절한 형태로 response를 보내기 때문이다! DRF 만세! 박수~~</p>\n<p>이제 post 메소드를 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\n코드 전략\n'''</span>\n\n<span class=\"token decorator annotation punctuation\">@api_view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">article_list_create_api_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n  <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">:</span>\n    articles <span class=\"token operator\">=</span> Article<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>articles<span class=\"token punctuation\">,</span> many <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">elif</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n    serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>data <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 장고와 달리 DRF에서는 request에서 데이터를 받을 때(request.data)</span>\n    <span class=\"token comment\"># 반드시 .is_valid() 여부를 체크해야 한다.</span>\n    <span class=\"token comment\"># valid하지 않을 때는 serializer.errors를 리턴한다.</span>\n    <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span>HTTP_201_CREATED<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span>HTTP_400_BAD_REQUEST<span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"/media/udemy-drf02-article-post.png\" alt=\"post method\"></p>\n<p>Allow 메소드에 POST가 추가되었으며 하단에 객체를 생성할 수 있는 폼이 생겼다. 폼에 json 형태로 작성해서 post 버튼을 누르면 새 인스턴스를 간편하게 추가할 수 있다. “id”와 “created<em>at”, “updated</em>at” 항목은 자동생성이므로 작성하지 않아도 괜찮다.</p>\n<p><img src=\"/media/udemy-drf03-article-posted.png\" alt=\"posted article\"></p>\n<p>post 클릭 후 하단 폼을 이용해 추가한 인스턴스를 확인할 수 있다.</p>\n<h4 id=\"the-api_view-decorator---part-two\" style=\"position:relative;\"><a href=\"#the-api_view-decorator---part-two\" aria-label=\"the api_view decorator   part two permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The @api_view Decorator - Part Two</h4>\n<p>이제 개별 인스턴스를 조회(get), 수정(put), 삭제(delete)할 수 있는 함수를 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> status\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>decorators <span class=\"token keyword\">import</span> api_view\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>response <span class=\"token keyword\">import</span> Response\n\n<span class=\"token keyword\">from</span> news<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Article\n<span class=\"token keyword\">from</span> news<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>serializers <span class=\"token keyword\">import</span> ArticleSerializer\n\n<span class=\"token decorator annotation punctuation\">@api_view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">article_list_create_api_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">'''\n  코드 중략\n  '''</span>\n\n<span class=\"token decorator annotation punctuation\">@api_view</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DELETE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">article_detail_api_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># try, except 대신 get_object_or_404를 import 해서 쓸 수도 있다. </span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># pk(인스턴스의 id)값을 받아 어떤 인스턴스인지 특정</span>\n    <span class=\"token comment\"># url slug로 pk값을 받도록 urls.py에서 설정해준다.</span>\n    article <span class=\"token operator\">=</span> Article<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>pk <span class=\"token operator\">=</span> pk<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 받은 pk값으로 조회했을 때 해당하는 인스턴스가 없다면 출력할 에러 코드와 메시지를 설정한다.</span>\n  <span class=\"token keyword\">except</span> Article<span class=\"token punctuation\">.</span>DoesNotExist<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'error'</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'code'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'message'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Article not found!\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span>HTTP_404_NOT_FOUND<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 만약 article이 존재한다면,</span>\n  <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">:</span>\n    serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">elif</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">:</span>\n    serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># request에서 data를 받았으니 .is_valid() 필수</span>\n    <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span>HTTP_400_BAD_REQUEST<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">elif</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'DELETE'</span><span class=\"token punctuation\">:</span>\n    article<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 인스턴스를 삭제한 뒤에는 204 NO CONTENT를 리턴</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span>HTTP_204_NO_CONTENT<span class=\"token punctuation\">)</span></code></pre></div>\n<p>url slug에 불러오고 싶은 인스턴스의 id 필드 값(value)에 해당하는 숫자를 입력해주면 조회할 수 있다. 수정, 삭제도 가능하다.</p>\n<p><img src=\"/media/udemy-drf04-article-detail.png\" alt=\"article detial view get\"></p>\n<p>없는 id를 입력하면 뷰에서 선언한 not found 메시지가 뜬다.</p>\n<p><img src=\"/media/udemy-drf05-article-not-found.png\" alt=\"article not found\"></p>","fields":{"slug":"/posts/til57","tagSlugs":["/tag/til/","/tag/django/","/tag/django-rest-framework/","/tag/drf/"]},"frontmatter":{"date":"2020-07-26T17:30:32.160Z","description":"RESTful API를 더욱 편하게 만들 수 있는 Django Rest Framework","tags":["til","django","django-rest-framework","drf"],"title":"Django Rest Framework 활용하기 2 - @api_view","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til57"}}}