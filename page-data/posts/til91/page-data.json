{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til91","result":{"data":{"markdownRemark":{"id":"0dc59460-c0d1-5da6-b584-c01de41581ac","html":"<p>JS 입문 강의 들을 때 호이스팅이 대체 뭐냐 싶었는데 지금 듣는 강의에서 너무 쉽게 설명해주셔서 바로 이해함.</p>\n<p>ES6 이전에는 상수와 변수를 선언할 때 모두 <code class=\"language-text\">var</code>를 사용했다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1번</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2번</span></code></pre></div>\n<p>이렇게 하면 1번 console.log에서 에러가 나야할 것 같지만 그렇지 않다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">undefined</span>  <span class=\"token comment\">// 1번에 해당</span>\nhello  <span class=\"token comment\">// 2번에 해당</span></code></pre></div>\n<p>이런 신통방통한 일이 일어난다. 왜?\n상수/변수를 <code class=\"language-text\">var</code>로 선언하면 실제로는 이렇게 선언하는 것이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 선언</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 할당</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>var 선언과 함수 선언에 해당하는 것을 모두 끌어올려서 해당 범위 최상단에 선언하는 것인데, 이를 <strong>호이스팅</strong>이라 한다.</p>\n<p>ES6에는 상수는 <code class=\"language-text\">const</code>, 변수는 <code class=\"language-text\">let</code>으로 구분해서 선언하는데, const와 let에서는 호이스팅이 일어나지 않아 변수 선언 전에 호출하면 ReferenceError가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(name);\n            ^\n\nReferenceError: Cannot access &#39;name&#39; before initialization\n    at Object.&lt;anonymous&gt; (/Users/NAON/Desktop/Coding/react/practice/prac/es6.js:1:13)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47</code></pre></div>","fields":{"slug":"/posts/til91","tagSlugs":["/tag/til/","/tag/javascript/"]},"frontmatter":{"date":"2021-02-17T20:41:32","description":"호이스팅이란?","tags":["til","javascript"],"title":"호이스팅(Hoisting)","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til91"}}}