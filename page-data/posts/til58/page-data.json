{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til58","result":{"data":{"markdownRemark":{"id":"ca82d47a-de92-5e28-9fec-0e2397d6aa33","html":"<p><a href=\"https://www.udemy.com/course/the-complete-guide-to-django-rest-framework-and-vue-js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Udemy</a> 강의를 들으면서, <a href=\"https://www.django-rest-framework.org/api-guide/serializers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DRF 공식문서</a>를 보면서, 그리고 구글링하면서 정리한 내용입니다.</p>\n<h3 id=\"django-rest-framework---level-one\" style=\"position:relative;\"><a href=\"#django-rest-framework---level-one\" aria-label=\"django rest framework   level one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django REST Framework - Level One</h3>\n<h4 id=\"the-apiview-class\" style=\"position:relative;\"><a href=\"#the-apiview-class\" aria-label=\"the apiview class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The APIView class</h4>\n<p>APIView는 매우 강력한 툴이다. APIView 하나로 굉장히 많은 메소드를 사용할 수 있기 때문이다. 하지만 지금 단계에서는 APIView 클래스 기초만 연습해보고 이후 강의에서 심화된 내용을 다룰 것이다.</p>\n<p>우선 APIView 클래스를 이용해 전체 article list에 관한 get, post 메소드를 구현해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> status\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> APIView\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>response <span class=\"token keyword\">import</span> Response\n\n<span class=\"token keyword\">from</span> news<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Article\n<span class=\"token keyword\">from</span> news<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>serializers <span class=\"token keyword\">import</span> ArticleSerializer\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleListCreateAPIView</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    articles <span class=\"token operator\">=</span> Article<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>articles<span class=\"token punctuation\">,</span> many <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>data <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span>HTTP_201_CREATED<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span>HTTP_400_BAD_REQUEST<span class=\"token punctuation\">)</span></code></pre></div>\n<p>함수 기반 api view와 대체로 코드가 비슷하지만 APIView 클래스를 사용했을 때가 좀 더 코드가 깔끔하고 메소드가 직관적이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\nimport 코드 생략\n'''</span>\n<span class=\"token comment\"># 앞서 함수 기반 api view 구현에서 썼던 try, except 대신 get_object_or_404를 import 해서 사용</span>\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>generics <span class=\"token keyword\">import</span> get_object_or_404\n\n<span class=\"token triple-quoted-string string\">'''\nimport 코드 생략\n'''</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleDetailAPIView</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># get_object 메소드로 우선 존재하는 인스턴스인지 판단해준다.</span>\n  <span class=\"token comment\"># 인스턴스가 존재한다면 그것을 리턴한다.</span>\n  <span class=\"token comment\"># 여기서 리턴한 인스턴스(article)는 아래 3개 메소드에서 공통으로 사용한다.</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">get_object</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    article <span class=\"token operator\">=</span> get_object_or_404<span class=\"token punctuation\">(</span>Article<span class=\"token punctuation\">,</span> pk <span class=\"token operator\">=</span> pk<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> article\n\n  <span class=\"token comment\"># 이하 코드는 함수 기반 api view와 유사</span>\n  <span class=\"token comment\"># 모든 메소드에서 pk를 인자로 받아 사용함</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    article <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_object<span class=\"token punctuation\">(</span>pk<span class=\"token punctuation\">)</span>\n    serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    article <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_object<span class=\"token punctuation\">(</span>pk<span class=\"token punctuation\">)</span>\n    serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span>HTTP_400_BAD_REQUEST<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    article <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_object<span class=\"token punctuation\">(</span>pk<span class=\"token punctuation\">)</span>\n    article<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span>HTTP_204_NO_CONTENT<span class=\"token punctuation\">)</span></code></pre></div>\n<p>함수 기반 api view와 동일한 결과를 출력한다.</p>\n<p><img src=\"/media/udemy-drf06-class-based-list.png\" alt=\"class based list view\"></p>\n<center>article list 출력</center>\n<p><img src=\"/media/udemy-drf08-class-based-detail.png\" alt=\"class based detail view\"></p>\n<center>pk값을 slug로 받아 특정 article 출력</center>\n<p><img src=\"/media/udemy-drf07-class-based-post.png\" alt=\"class based detail post\"></p>\n<center>새 article 생성</center>","fields":{"slug":"/posts/til58","tagSlugs":["/tag/til/","/tag/django/","/tag/django-rest-framework/","/tag/drf/"]},"frontmatter":{"date":"2020-07-26T20:01:32","description":"RESTful API를 더욱 편하게 만들 수 있는 Django Rest Framework","tags":["til","django","django-rest-framework","drf"],"title":"Django Rest Framework 활용하기 3 - APIView class","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til58"}}}