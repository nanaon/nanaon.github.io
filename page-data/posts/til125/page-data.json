{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til125","result":{"data":{"markdownRemark":{"id":"f9a411dc-e455-558d-9096-3d569b623977","html":"<h3 id=\"클래스-구성\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%EC%84%B1\" aria-label=\"클래스 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 구성</h3>\n<ul>\n<li>속성</li>\n<li>메소드</li>\n</ul>\n<p>‘사람’이 클래스라면 속성은 이름, 나이, 사는 곳 등이고 메소드는 걷다, 뛰다, 먹다 등이다.</p>\n<h3 id=\"클래스와-인스턴스-차이\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%B0%A8%EC%9D%B4\" aria-label=\"클래스와 인스턴스 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스와 인스턴스 차이</h3>\n<ul>\n<li>네임스페이스: 객체를 인스턴스화할 때 객체가 저장된 공간</li>\n<li>클래스 변수: 직접 사용 가능, 객체보다 먼저 생성</li>\n<li>인스턴스 변수: 객체마다 별도로 존재</li>\n</ul>\n<h3 id=\"클래스-선언하기\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0\" aria-label=\"클래스 선언하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 선언하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> 클래스명<span class=\"token punctuation\">:</span>\n  함수\n  함수\n  함수</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserInfo</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">print_user_info</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name: \"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">__init__</code>은 클래스를 초기화하는 매직메소드다. 인스턴스를 할당하는 순간 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">user1 <span class=\"token operator\">=</span> UserInfo<span class=\"token punctuation\">(</span><span class=\"token string\">'Park'</span><span class=\"token punctuation\">)</span>\nuser1<span class=\"token punctuation\">.</span>print_user_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nuser2 <span class=\"token operator\">=</span> UserInfo<span class=\"token punctuation\">(</span><span class=\"token string\">'Jeong'</span><span class=\"token punctuation\">)</span>\nuser1<span class=\"token punctuation\">.</span>print_user_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token number\">140344096541184</span>\n<span class=\"token number\">140344096540512</span></code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Park'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Jeong'</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"클래스-메소드와-인스턴스-메소드\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A9%94%EC%86%8C%EB%93%9C%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"클래스 메소드와 인스턴스 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 메소드와 인스턴스 메소드</h3>\n<p>func1은 클래스 메소드, self를 인자로 받는 func2는 인스턴스 메소드다. 어떤 차이가 있는지 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SelfTest</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'func1 called'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'func2 called'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">self_test <span class=\"token operator\">=</span> SelfTest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nSelfTest<span class=\"token punctuation\">.</span>func1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nself_test<span class=\"token punctuation\">.</span>func2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func1 called\nfunc2 called</code></pre></div>\n<p>func1과 func2를 호출하는 방식이 조금 다르다. 만약 반대 방식으로 호출한다면 TypeError가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">self_test<span class=\"token punctuation\">.</span>func1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TypeError: func1() takes 0 positional arguments but 1 was given</code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">SelfTest<span class=\"token punctuation\">.</span>func2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TypeError: func2() missing 1 required positional argument: &#39;self&#39;</code></pre></div>\n<p><strong>클래스 메소드는 개별 인스턴스에서 호출할 수 없다.</strong> 모든 인스턴스가 이 메소드를 공유한다.</p>\n<p><strong>인스턴스 메소드는 인자 없이는 호출할 수 없다.</strong> 어떤 인스턴스를 이용해야 하는지 지정하지 않았으므로 에러가 발생한다.</p>\n<h3 id=\"클래스-변수와-인스턴스-변수\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B3%80%EC%88%98%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B3%80%EC%88%98\" aria-label=\"클래스 변수와 인스턴스 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 변수와 인스턴스 변수</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">WareHouse</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 클래스 변수</span>\n  stock_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token comment\"># 창고가 하나 생길 때마다 창고 수 +1</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    WareHouse<span class=\"token punctuation\">.</span>stock_num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    WareHouse<span class=\"token punctuation\">.</span>stock_num <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>만든 클래스를 이용해 인스턴스를 할당하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">user1 <span class=\"token operator\">=</span> WareHouse<span class=\"token punctuation\">(</span><span class=\"token string\">'Moon'</span><span class=\"token punctuation\">)</span>\nuser2 <span class=\"token operator\">=</span> WareHouse<span class=\"token punctuation\">(</span><span class=\"token string\">'Kim'</span><span class=\"token punctuation\">)</span>\nuser3 <span class=\"token operator\">=</span> WareHouse<span class=\"token punctuation\">(</span><span class=\"token string\">'Yang'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>할당한 인스턴스를 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user3<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Moon'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Kim'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Yang'</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>같은 방식으로 클래스도 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>WareHouse<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'__module__'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'stock_num'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'__init__'</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>function WareHouse<span class=\"token punctuation\">.</span>__init__ at <span class=\"token number\">0x7fdbc011c820</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'__del__'</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>function WareHouse<span class=\"token punctuation\">.</span>__del__ at <span class=\"token number\">0x7fdbc011c8b0</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'__dict__'</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>attribute <span class=\"token string\">'__dict__'</span> of <span class=\"token string\">'WareHouse'</span> objects<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'__weakref__'</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>attribute <span class=\"token string\">'__weakref__'</span> of <span class=\"token string\">'WareHouse'</span> objects<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">stock_num</code> 키를 보면 값이 3인 것을 확인할 수 있다. 인스턴스 3개를 추가해주었으니 인스턴스 하나를 추가할 때마다 <code class=\"language-text\">__init__</code>메소드를 타 <code class=\"language-text\">stock_num</code> 수가 1씩 증가했다.</p>\n<br>\n<p>개별 인스턴스를 조금 더 파보자. 각 인스턴스에서 value를 뽑아낼 수도 있다. <code class=\"language-text\">__init__</code> 메소드에서 <code class=\"language-text\">self.name</code>은 <code class=\"language-text\">name</code> 변수로 할당한 점을 이용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user3<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Moon\nKim\nYang</code></pre></div>\n<br>\n<p>혹시 개별 인스턴스에서 창고 수(<code class=\"language-text\">stock_num</code>)도 뽑아낼 수 있을까?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">.</span>stock_num<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">.</span>stock_num<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user3<span class=\"token punctuation\">.</span>stock_num<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3\n3\n3</code></pre></div>\n<p>가능하다. 인스턴스 변수도 아닌데 어떻게 값을 가져올 수 있을까?</p>\n<p>위에서 언급했듯 <strong>클래스 메소드는 모든 인스턴스가 공유</strong>하기 때문에 호출 가능한 것이다. 인스턴스 자신의 네임스페이스에 있으면 그것을 출력하고, 없으면 클래스 네임스페이스로 가서 찾는다. 클래스 네임스페이스에 있으면 리턴하고, 그래도 없으면 에러를 리턴한다.</p>\n<p>마지막으로, 인스턴스 하나를 삭제해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">del</span> user1\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">.</span>stock_num<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user3<span class=\"token punctuation\">.</span>stock_num<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2\n2</code></pre></div>\n<p><code class=\"language-text\">__del__</code> 매직메소드도 잘 타고 있는 것을 확인할 수 있다.</p>","fields":{"slug":"/posts/til125","tagSlugs":["/tag/til/","/tag/python/"]},"frontmatter":{"date":"2021-03-21T00:52:32","description":"파이썬 클래스, 인스턴스 관련","tags":["til","python"],"title":"파이썬 기억 더듬기 (5) - 클래스, 인스턴스","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til125"}}}