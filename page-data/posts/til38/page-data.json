{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til38","result":{"data":{"markdownRemark":{"id":"e13d59fd-6a4a-5098-a31f-2c76273f1015","html":"<p>이번 실습에서 집중한 것은 데이터 테이블 생성, Foreign key 사용하기, 데이터 신규 입력, 추가, 삭제다.\n먼저 아래처럼 Aquery로 모델링을 했다. models.py에서 어떤 클래스를 생성할지, 어느 테이블을 Foreign key로 연결할지 구조를 잡아둔 뒤 코드를 작성하면 훨씬 명확해서 시행착오를 줄여준다.</p>\n<p><img src=\"/media/aquery-sb.png\" alt=\"aquery\"></p>\n<br>\n<h3 id=\"데이터-테이블-구조-짜기-foreign-key-사용하기\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%85%8C%EC%9D%B4%EB%B8%94-%EA%B5%AC%EC%A1%B0-%EC%A7%9C%EA%B8%B0-foreign-key-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"데이터 테이블 구조 짜기 foreign key 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 테이블 구조 짜기, Foreign key 사용하기</h3>\n<p>해당하는 앱의 models.py 파일에서 데이터 테이블 이름, 열(필드) 이름, 필드값이 될 데이터 타입과 속성 등을 정의해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Menu</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># name이라는 이름으로 열을 만드는데, 열에 들어갈 데이터는 문자열 타입, 최대 길이는 영문자 기준 45자라는 뜻이다.</span>\n  \n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n    db_table <span class=\"token operator\">=</span> <span class=\"token string\">'menu'</span>\n  <span class=\"token comment\"># 데이터 테이블 이름을 지정한다. 따로 정해주지 않으면 장고에서 '앱이름_클래스이름'으로 만든다.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Category</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  menu <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Menu<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># menu열은 Menu라는 클래스에서 생성한 menu 테이블 데이터를 끌어다 쓴다. 모든 데이터는 고유 id값을 가지고 있기 때문에 그것을 기준으로 데이터를 매칭해준다.</span>\n  name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n    db_table <span class=\"token operator\">=</span> <span class=\"token string\">'category'</span></code></pre></div>\n<br>\n<h3 id=\"데이터-테이블-생성하기\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"데이터 테이블 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 테이블 생성하기</h3>\n<p>manage.py 파일을 이용할 것이므로 manage.py 파일이 있는 위치에서 실행해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\"># 변경 사항 감지해서 migrations 디렉토리 내에 initial 파일 생성\npython manage.py makemigrations\n\n# makemigtaions를 통해 감지한 변경 사항을 반영해 DB에 테이블을 새로 생성하거나 테이블 이름, 열 이름 등을 변경함\npython manage.py migrate</code></pre></div>\n<br>\n<h3 id=\"데이터-신규-입력\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8B%A0%EA%B7%9C-%EC%9E%85%EB%A0%A5\" aria-label=\"데이터 신규 입력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 신규 입력</h3>\n<p>장고에 기본으로 내장된 python shell을 사용했다. 데이터를 밀어넣기 위해 models.py 파일 안 클래스들을 최초 1회 import 해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\">from drinks.models import Menu, Category, 기타 클래스들 추가추가\n\n# menu 테이블에 &#39;음료&#39; 데이터 입력. 이 테이블에 첫 번째로 입력된 데이터이므로 id값은 1이 된다.\n&gt;&gt;&gt; Menu.objects.create(name=&#39;음료&#39;)\n\n# category 테이블의 menu 열 항목은 menu 테이블을 참조하므로 Foreign key로 끌어온다.\n# &#39;음료&#39; 메뉴 안 &#39;콜드 브루&#39; 카테고리이므로 menu 테이블에서 id값이 1인 객체를 가져와서 menu 열에 할당해준다.\n&gt;&gt;&gt; Category.objects.create(menu=Menu.objects.filter(id=1)[0], name=&#39;콜드 브루&#39;)</code></pre></div>\n<br>\n<h3 id=\"입력한-데이터-확인\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EB%A0%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%99%95%EC%9D%B8\" aria-label=\"입력한 데이터 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력한 데이터 확인</h3>\n<p>입력한 데이터는 장고 내장 DB인 sqlite3를 이용했다. 표 형태로 보기 위해서 사전에 아래 명령어를 입력해줬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\">headers. on\nmode. column</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\"># migrate로 생성한 모든 테이블 목록\n.tables\n\n# 결과값\ndjango_admin_log            django_content_type\nauth_group                  django_migrations\nauth_group_permissions      django_session\nauth_permission             auth_user\nauth_user_groups            auth_user_user_permissions\nmenu                        category</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\"># menu 테이블 안 모든 데이터 호출\nselect * from menu;\n\n# 결과값\nid          name\n----------  ----------\n1           음료</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\"># category 테이블 안 모든 데이터 호출\nselect * from category;\n\n# 결과값\nid          name        menu_id\n----------  ----------  ----------\n1           콜드 브루        1</code></pre></div>\n<br>\n<h3 id=\"기존-데이터-행에-새로운-데이터-추가하기\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%96%89%EC%97%90-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"기존 데이터 행에 새로운 데이터 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 데이터 행에 새로운 데이터 추가하기</h3>\n<p>drink 테이블 열에 fk 값을 추가해 size 테이블 정보를 끌어오려고 한다. 우선 models.py 파일에서 Drink 클래스를 수정한다. 참조할 테이블은 참조하는 테이블보다 반드시 위에 있어야 한다. 그 반대라면 fk로 끌어올 값이 없으므로 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># size 테이블 추가</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span>\n  size_ml <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  size_oz <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n    db_table <span class=\"token operator\">=</span> <span class=\"token string\">'size'</span>\n\n<span class=\"token comment\"># 기존 열 category, name, nutrition에 size 열 추가</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Drink</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  category <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Category<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n  name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span>\n  nutrition <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Nutrition<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>SET_NULL<span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  size <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Size<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>SET_NULL<span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n    db_table <span class=\"token operator\">=</span> <span class=\"token string\">'drink'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\"># drink 테이블에서 id값이 1인 객체 불러오기\n&gt;&gt;&gt; drink1 = Drink.objects.get(id=1)\n\n# drink 테이블의 size열에 size 테이블에서 가져온 데이터 추가하기\n&gt;&gt;&gt; drink1.size = Size.objects.filter(id=1)[0]\n\n# 테이블에 데이터 저장\n&gt;&gt;&gt; drink1.save()</code></pre></div>\n<p>저장한 데이터를 다시 sqlite3에서 확인해보면 이렇게 출력된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\">select * from drink;\n\n# 결과값\nid          name         category_id  size_id     nutrition_id\n----------  -----------  -----------  ----------  ------------\n1           나이트로 바닐라 크림  1            1           1</code></pre></div>\n<p>참고로 size 테이블의 데이터는 아래와 같이 생성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\">select * from size;\n\nid          name        size_ml     size_oz\n----------  ----------  ----------  ----------\n1           Tall(톨)     355         12\n2           Grande(그란데  473         16</code></pre></div>\n<br>\n<h3 id=\"이미-저장한-데이터-삭제하기\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%AF%B8-%EC%A0%80%EC%9E%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\" aria-label=\"이미 저장한 데이터 삭제하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미 저장한 데이터 삭제하기</h3>\n<p>filter 명령어를 통해 객체를 특정한 뒤 삭제해준다. 만약 size 테이블에서 그란데 사이즈 데이터를 삭제하고 싶다면, id값이 2인 객체를 찾아 삭제하거나 name값이 ‘Grande(그란데)‘인 객체를 찾아 삭제하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\">&gt;&gt;&gt; Size.objects.filter(id=2).delete()\n# 또는\n&gt;&gt;&gt; Size.objects.filter(name=&#39;Grande(그란데)&#39;).delete()</code></pre></div>\n<br>\n<h3 id=\"특정-필드값만-삭제하기\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A0%95-%ED%95%84%EB%93%9C%EA%B0%92%EB%A7%8C-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\" aria-label=\"특정 필드값만 삭제하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특정 필드값만 삭제하기</h3>\n<p>null값을 허용한 필드에서만 삭제가 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"s\"><pre class=\"language-s\"><code class=\"language-s\"># drink 테이블에서 id값이 1인 데이터의 size 값만 삭제\nDrink.objects.filter(id=1).update(size=None)\n\n# 결과값\nid          name         category_id  size_id     nutrition_id\n----------  -----------  -----------  ----------  ------------\n1           나이트로 바닐라 크림  1                        1\n2           나이트로 쇼콜라 클라  1            1           2\n3           아이스 커피       2            1           3</code></pre></div>","fields":{"slug":"/posts/til38","tagSlugs":["/tag/til/","/tag/django/","/tag/aquery/","/tag/modeling/","/tag/wecode/"]},"frontmatter":{"date":"2020-06-13T21:57:32.169Z","description":"Aquery로 모델링한 것을 바탕으로 스타벅스 메뉴 모델링 및 데이터 테이블 생성하기 실습","tags":["til","django","aquery","modeling","wecode"],"title":"django - 스타벅스 음료 메뉴 모델링 실습","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til38"}}}