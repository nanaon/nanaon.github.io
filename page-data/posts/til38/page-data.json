{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til38","result":{"data":{"markdownRemark":{"id":"3ba0278a-d913-5424-b20e-457fa8da91c4","html":"<h3 id=\"set-형식\" style=\"position:relative;\"><a href=\"#set-%ED%98%95%EC%8B%9D\" aria-label=\"set 형식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set 형식</h3>\n<p>Set은 dictionary와 동일하게 {}로 감싼다. 단, {key: value} 형식이 아니라 {element1, element2, element3} 형식이다.</p>\n<br>\n<h3 id=\"set-특징\" style=\"position:relative;\"><a href=\"#set-%ED%8A%B9%EC%A7%95\" aria-label=\"set 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set 특징</h3>\n<ol>\n<li>비순차적 순열 자료구조\nSet은 list와 달리 순서(=인덱스)가 존재하지 않는다. 데이터를 비순차적으로 저장한다. list는 삽입 순서대로 인덱스 번호가 부여되어 순서를 가지지만 set은 삽입 순서대로 저장되지 않는다.</li>\n<li>수정 가능\nSet을 이미 선언했더라도 요소를 삭제하거나 추가할 수 있다. 단, 요소를 추가할 때 <code class=\"language-text\">set이름.append(요소)</code> 형식이 아니라 <code class=\"language-text\">set이름.add(요소)</code>로 추가해야한다.</li>\n<li>중복 비허용\n동일한 값을 삽입할 수 없다. 만약 set 내에 이미 있는 요소를 또 삽입한다면 새로 삽입된 값을 대체한다.</li>\n</ol>\n<br>\n<h3 id=\"set을-사용하면-좋은-경우\" style=\"position:relative;\"><a href=\"#set%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EA%B2%BD%EC%9A%B0\" aria-label=\"set을 사용하면 좋은 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set을 사용하면 좋은 경우</h3>\n<ul>\n<li>중복된 값을 골라내야 할 때</li>\n<li>빠르게 lookup 해야할 때</li>\n<li>그러면서 요소 순서는 상관없을 때</li>\n</ul>\n<h3 id=\"frozenset이란\" style=\"position:relative;\"><a href=\"#frozenset%EC%9D%B4%EB%9E%80\" aria-label=\"frozenset이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>frozenset이란?</h3>\n<p>Set은 요소 추가, 수정이 가능한 자료구조다. <code class=\"language-text\">frozenset</code>은 선언 이후 수정이 불가능하다.</p>\n<br>\n<h3 id=\"dictionary와-hash\" style=\"position:relative;\"><a href=\"#dictionary%EC%99%80-hash\" aria-label=\"dictionary와 hash permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dictionary와 hash</h3>\n<p>Dictionary는 key - value 형태로 값을 저장할 수 있는 자료구조다. 이를 연관 배열(Associative array) 또는 해시(Hash)라고 한다.</p>\n<p>해시 함수(hash function)는 문자열을 받아서 숫자를 반환하는 함수다. 함수는 문자열에 대해 숫자를 할당한다. input값이 같으면 반드시 할당하는 숫자도 같아야 한다. 그러므로 set에서 중복 요소를 허용하지 않는 것이다. 반대로 input값이 다르면 반드시 할당하는 숫자도 달라야 한다.</p>\n<p>Dictionary는 hash table/hash map이라고도 한다. Dictionary에 요소가 추가된 순서와 관계 없이 key값의 hash값을 구한 후 해당 hash값이 속한 bucket에 값을 저장한다. 그렇기 때문에 dictionary와 set은 비순차적 자료구조가 되는 것이다.</p>\n<br>\n<h3 id=\"dictionary-특징\" style=\"position:relative;\"><a href=\"#dictionary-%ED%8A%B9%EC%A7%95\" aria-label=\"dictionary 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dictionary 특징</h3>\n<ol>\n<li>비순차적 순열 자료구조\nSet과 마찬가지로 특정 순서대로 데이터를 리턴하지는 않는다. 그러므로 Dictionary에서는 key값으로 value를 찾아야 한다.</li>\n</ol>\n<p><code class=\"language-text\">my_dict = {1 : &#39;one&#39;, &#39;two&#39; : 2, 3 : 3.0, 1: &#39;one_one&#39;}</code></p>\n<p>my<em>dict 딕셔너리에서 “two” 키의 값 2를 리턴하고 싶다면 `my</em>dict[1]<code class=\"language-text\">이 아니라</code>my<em>dict[‘two’]<code class=\"language-text\">로  찾아야 한다.</code>my</em>dict[1]<code class=\"language-text\">의 리턴 값은</code>‘one’` 이다.</p>\n<ol start=\"2\">\n<li>수정 가능\nDictionary를 이미 선언했더라도 요소를 삭제하거나 추가할 수 있다.\n<code class=\"language-text\">my_dict</code> 딕셔너리에 새 요소를 추가하고 싶다면,</li>\n</ol>\n<p><code class=\"language-text\">my_dict[&#39;new key&#39;] = &#39;new value&#39;</code></p>\n<p>새로운 key값에 value를 할당해주면 된다.</p>\n<ol start=\"3\">\n<li>중복 비허용\nKey값은 중복될 수 없다. 중복된 key가 삽입되면 새 key가 기존 key와 value를 대체한다.</li>\n</ol>\n<h3 id=\"dictionary를-사용하면-좋은-경우\" style=\"position:relative;\"><a href=\"#dictionary%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EA%B2%BD%EC%9A%B0\" aria-label=\"dictionary를 사용하면 좋은 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dictionary를 사용하면 좋은 경우</h3>\n<ul>\n<li>키와 값을 묶어서 데이터를 표현해야 할 때 (예: 데이터베이스)</li>\n</ul>","fields":{"slug":"/posts/til38","tagSlugs":["/tag/til/","/tag/python/","/tag/wecode/"]},"frontmatter":{"date":"2020-06-15T23:02:32.160Z","description":"자료 구조 종류의 일부인 set과 dictionary, 그리고 데이터 처리 방식인 hash에 대해서 알아본다.","tags":["til","python","wecode"],"title":"Python - 자료 구조 2 (set, dictionary, hash)","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til38"}}}