{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til84","result":{"data":{"markdownRemark":{"id":"beaa8d09-8c8e-5c8b-a9e6-f45f3070bd32","html":"<h3 id=\"6장-데이터링크-계층\" style=\"position:relative;\"><a href=\"#6%EC%9E%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A7%81%ED%81%AC-%EA%B3%84%EC%B8%B5\" aria-label=\"6장 데이터링크 계층 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6장. 데이터링크 계층</h3>\n<h4 id=\"1-프로토콜의-기초\" style=\"position:relative;\"><a href=\"#1-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%98-%EA%B8%B0%EC%B4%88\" aria-label=\"1 프로토콜의 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 프로토콜의 기초</h4>\n<h4 id=\"강의-목표\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%98-%EB%AA%A9%ED%91%9C\" aria-label=\"강의 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>강의 목표</h4>\n<ul>\n<li>라우팅 기능과 주요 프로토콜 이해</li>\n</ul>\n<h4 id=\"연결-구성\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EA%B2%B0-%EA%B5%AC%EC%84%B1\" aria-label=\"연결 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연결 구성</h4>\n<p><img src=\"/media/network24.JPG\" alt=\"연결 구성도\"></p>\n<ul>\n<li>점대점(point-to-point): 직접 묶여있어 받을 주소를 지칭할 필요 없음</li>\n<li>멀티드롭(multi drop): 주소(address) 개념 필요</li>\n</ul>\n<h4 id=\"프레임-종류\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A0%88%EC%9E%84-%EC%A2%85%EB%A5%98\" aria-label=\"프레임 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프레임 종류</h4>\n<ul>\n<li>\n<p><strong>정보 프레임</strong></p>\n<ul>\n<li><strong>I 프레임</strong> (Information)</li>\n<li><strong>상위 계층이 전송 요구한 데이터를 송신</strong>하는 용도</li>\n<li>순서번호, 송수신 호스트 정보 등이 포함됨</li>\n</ul>\n</li>\n<li>\n<p><strong>긍정 응답 프레임</strong></p>\n<ul>\n<li><strong>ACK 프레임</strong> (Acknowledge)</li>\n<li><strong>전송 데이터가 올바르게 도착했음을 회신</strong>하는 용도</li>\n<li>데이터를 수신한 호스트가 데이터를 송신한 호스트에게 전송</li>\n</ul>\n</li>\n<li>\n<p><strong>부정 응답 프레임</strong></p>\n<ul>\n<li><strong>NAK 프레임</strong> (Negative Acknowledge)</li>\n<li><strong>전송 데이터가 깨져서 도착했음을 회신</strong>하는 용도</li>\n<li>데이터를 수신한 호스트가 데이터를 송신한 호스트에게 전송</li>\n<li>데이터를 송신한 호스트는 <strong>원래 데이터를 재전송하여 오류 복구</strong></li>\n</ul>\n</li>\n<li>긍정 응답, 부정 응답 프레임 모두 회신하고자 하는 <strong>I 프레임 순서 번호 포함</strong>. 제대로 도착한 프레임과 오류가 발생한 프레임 판단 가능</li>\n</ul>\n<p>몇 가지 프로토콜을 예시로 들어 각 상황에서 어떻게 동작하는지 알아보자.</p>\n<h4 id=\"오류-흐름-제어가-없는-프로토콜-단순-프로토콜\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%ED%9D%90%EB%A6%84-%EC%A0%9C%EC%96%B4%EA%B0%80-%EC%97%86%EB%8A%94-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EB%8B%A8%EC%88%9C-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"오류 흐름 제어가 없는 프로토콜 단순 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류, 흐름 제어가 없는 프로토콜 (단순 프로토콜)</h4>\n<ul>\n<li>\n<p>가정(조건)</p>\n<ul>\n<li><strong>단방향 통신</strong>: 송신 호스트에서 수신 호스트 <strong>한쪽으로만 데이터 전송</strong></li>\n<li><strong>전송 오류가 없는 물리 매체</strong>: 오류 제어 기능이 필요 없음</li>\n<li><strong>무한 개의 수신 버퍼</strong>: 흐름 제어 기능이 필요 없음</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/media/network25.JPG\" alt=\"단순 프로토콜\"></p>\n<ul>\n<li>송신 호스트는 <strong>원하는 만큼 자유롭게 프레임을 전송</strong>할 수 있음</li>\n<li>프레임 분실/변형 오류가 발생하지 않으므로 오류 제어 없음</li>\n<li>수신 버퍼가 무한이므로 분실 오류 없음</li>\n<li>순서번호도 불필요</li>\n<li>하지만 이런 프로토콜은 현실적으로 불가능</li>\n</ul>\n<h4 id=\"오류-제어가-없는-프로토콜-정지-대기-프로토콜\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EC%A0%9C%EC%96%B4%EA%B0%80-%EC%97%86%EB%8A%94-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%A0%95%EC%A7%80-%EB%8C%80%EA%B8%B0-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"오류 제어가 없는 프로토콜 정지 대기 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 제어가 없는 프로토콜 (정지-대기 프로토콜)</h4>\n<ul>\n<li>\n<p>가정(조건)</p>\n<ul>\n<li><strong>단방향 통신</strong>: 송신 호스트에서 수신 호스트 <strong>한쪽으로만 데이터 전송</strong></li>\n<li><strong>전송 오류가 없는 물리 매체</strong>: 오류 제어 기능이 필요 없음</li>\n<li><strong>유한 개의 수신 버퍼</strong>: 버퍼 부족으로 프레임 분실 가능</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/media/network26.JPG\" alt=\"정지-대기 프로토콜\"></p>\n<ul>\n<li>\n<p>정지대기(STOP-AND-WAIT)란?</p>\n<ul>\n<li>하나의 프레임 전송 후 응답 대기</li>\n<li>전송 효율이 떨어지므로 잘 사용하지 않음</li>\n</ul>\n</li>\n<li><strong>수신 버퍼 수가 유한하므로 흐름 제어(STOP-AND-WAIT) 필요</strong></li>\n<li>이전 프레임을 잘 받았다는 <strong>긍정 응답 기능</strong>과 수신 호스트가 송신 호스트의 <strong>전송 시점을 지정하기 위한 ACK 프레임 필요</strong> (오류 제어 개념이 아님)</li>\n<li>하지만 이 응답 프레임마저 분실될 수 있어 프레임을 또 보낼 수 있기 때문에(중복 수신) <strong>순서 번호 필요</strong></li>\n<li>가장 단순한 프로토콜</li>\n</ul>\n<h4 id=\"단방향-프로토콜\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"단방향 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단방향 프로토콜</h4>\n<ul>\n<li>\n<p>가정(조건)</p>\n<ul>\n<li><strong>단방향 통신</strong>: 송신 호스트에서 수신 호스트 <strong>한쪽으로만 데이터 전송</strong></li>\n<li><strong>전송 매체 오류 발생 가능</strong></li>\n<li><strong>버퍼 유한</strong></li>\n</ul>\n</li>\n<li>NAK가 없는 경우 1\n<img src=\"/media/network27.JPG\" alt=\"단방향 프로토콜 - NAK가 없는 경우 1\"> - 정보 프레임 분실 - 주어진 시간 내 응답(ACK 또는 NAK)이 오지 않았기 때문에 분실로 인지하고 프레임 재전송 (타임아웃 기능)</li>\n<li>NAK가 없는 경우 2\n<img src=\"/media/network28.JPG\" alt=\"단방향 프로토콜 - NAK가 없는 경우 2\"> - ACK 프레임 분실 - 수신 호스트로부터 응답이 오지 않은 경우와 동일하게 처리 - i번 프레임을 수신했다는 응답을 보냈는데 또 전송된 것으로 응답이 분실됐음을 판단하여 응답을 재전송하는 것으로 오류 극복</li>\n<li>NAK가 없는 경우 3\n<img src=\"/media/network29.JPG\" alt=\"단방향 프로토콜 - NAK가 없는 경우 3\"> - 정보 프레임 변형 - 따라서 수신 호스트에서 응답이 나가지 않음 - 위 두 가지 케이스와 동일하게 처리</li>\n<li>NAK가 있는 경우 1\n<img src=\"/media/network30.JPG\" alt=\"단방향 프로토콜 - NAK가 있는 경우 1\"> - 정보 프레임 변형 - 변형된 프레임을 무시하여 프레임 분실 오류와 동일하게 처리 - NAK가 없는 경우와 동일하게 처리 (타임아웃으로 재전송)</li>\n<li>NAK가 있는 경우 2\n<img src=\"/media/network31.JPG\" alt=\"단방향 프로토콜 - NAK가 있는 경우 2\"> - 정보 프레임 변형 - NAK를 이용하여 데이터 오류 통보 - 통보 받은 송신 호스트가 데이터 재전송 - 타임아웃이 되기 전 데이터를 재전송하므로 시간이 덜 걸리므로 NAK 응답이 없는 경우보다 더 효율적 - 그러나 다른 요인에 의해 NAK를 사용하지 못하는 경우도 있음</li>\n</ul>","fields":{"slug":"/posts/til84","tagSlugs":["/tag/til/","/tag/network/"]},"frontmatter":{"date":"2021-01-17T14:41:32","description":"오류 제어, 흐름 제어의 원리와 동작 방식","tags":["til","network"],"title":"컴퓨터 네트워크 강의 - 6장. 데이터링크 계층 (1) 프로토콜의 기초","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til84"}}}