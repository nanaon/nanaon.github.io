{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til68","result":{"data":{"markdownRemark":{"id":"1d070402-1590-5342-87c6-36564ee08ef6","html":"<p><a href=\"https://www.udemy.com/course/the-complete-guide-to-django-rest-framework-and-vue-js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Udemy</a> 강의를 들으면서, <a href=\"https://www.django-rest-framework.org/api-guide/serializers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DRF 공식문서</a>를 보면서, 그리고 구글링하면서 정리한 내용입니다.</p>\n<h3 id=\"django-rest-framework---level-one\" style=\"position:relative;\"><a href=\"#django-rest-framework---level-one\" aria-label=\"django rest framework   level one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django REST Framework - Level One</h3>\n<h4 id=\"the-modelserializer-class\" style=\"position:relative;\"><a href=\"#the-modelserializer-class\" aria-label=\"the modelserializer class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The ModelSerializer Class</h4>\n<p>ModelSerializer는 장고 ModelForm 클래스와 비슷하게 내가 짠 모델을 바탕으로 Serializer를 쉽고 빠르게 짤 수 있게 해준다.</p>\n<p>ModelSerializer의 가장 큰 장점은 코드 길이를 획기적으로 줄일 수 있다는 것과 api에 보내지길 원하는 필드를 선택할 수 있다는 점, 그리고 필드를 추가할 수 있다는 점이다.</p>\n<p>ModelSerializer에서는 Serializer 방식처럼 필드를 하나하나 다 써줄 필요가 없다. 또한 create, update 메소드를 내장하고 있어서 코드 길이가 매우 짧다.</p>\n<p>Serializer와 비교해서 코드를 얼마나 줄일 수 있는지 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>Serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>read_only <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  author <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  title <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  description <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  body <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  location <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  publication_date <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  active <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  created_at <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>read_only <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  updated_at <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>read_only <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> validated_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> Article<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>validated_data<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> validated_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    instance<span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'description'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'location'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>publication_date <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'publication_date'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>publication_date<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span>\n    instance<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> instance</code></pre></div>\n<p>ModelSerializer를 썼을 때는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Article\n    fields <span class=\"token operator\">=</span> <span class=\"token string\">\"__all__\"</span></code></pre></div>\n<p>Article 테이블 모든 필드를 불러오는 코드는 이게 끝이다. 처음 이 코드를 봤을 때 사기가 아닌가 생각했다. 새 article post도 되고 put도 된다.</p>\n<h4 id=\"출력할-필드-지정하기\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EB%A0%A5%ED%95%A0-%ED%95%84%EB%93%9C-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"출력할 필드 지정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출력할 필드 지정하기</h4>\n<p>ModelSerializer에서는 api에 표시할 필드를 지정할 수도 있다. 반대로 제외할 필드를 지정해도 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Article\n    <span class=\"token comment\"># 출력할 필드를 tuple 형태로 지정</span>\n    fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'description'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Article\n    <span class=\"token comment\"># 제외할 필드를 tuple 형태로 지정</span>\n    exclude <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"validation-하기\" style=\"position:relative;\"><a href=\"#validation-%ED%95%98%EA%B8%B0\" aria-label=\"validation 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>validation 하기</h4>\n<p>validate 메소드도 그대로 사용할 수 있다. 설정한 조건(title과 description은 같으면 안 됨)에 맞지 않으면 인스턴스가 생성되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Article\n    exclude <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''check that description and title are different'''</span>\n    <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'description'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">raise</span> serializers<span class=\"token punctuation\">.</span>ValidationError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Title and Description must be different from one another.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">validate_title</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">raise</span> serializers<span class=\"token punctuation\">.</span>ValidationError<span class=\"token punctuation\">(</span><span class=\"token string\">\"The title has to be less than 60 characters long.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> value</code></pre></div>\n<h4 id=\"인스턴스-생성-시각-관련-작업\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1-%EC%8B%9C%EA%B0%81-%EA%B4%80%EB%A0%A8-%EC%9E%91%EC%97%85\" aria-label=\"인스턴스 생성 시각 관련 작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스 생성 시각 관련 작업</h4>\n<p>article이 발행된 시간으로부터 얼마나 지났는지도 Json 형태로 같이 리턴할 수 있다. serializers.py를 건들여보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  time_since_publication <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>SerializerMethodField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token triple-quoted-string string\">'''\n  코드 후략\n  '''</span></code></pre></div>\n<p>아래와 같이 발행 시점으로부터 며칠 혹은 몇 시간이 지났다고 값을 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"time_since_publication\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3 hours, 30 minutes\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/posts/til68","tagSlugs":["/tag/til/","/tag/django/","/tag/django-rest-framework/"]},"frontmatter":{"date":"2020-08-24T22:05:32","description":"RESTful API를 더욱 편하게 만들 수 있는 Django Rest Framework","tags":["til","django","django-rest-framework"],"title":"Django Rest Framework 활용하기 5 - The ModelSerializer Class","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til68"}}}