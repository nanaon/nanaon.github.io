{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til69","result":{"data":{"markdownRemark":{"id":"04c5232c-718d-5991-9682-f8fb7aef2c6d","html":"<p><a href=\"https://www.udemy.com/course/the-complete-guide-to-django-rest-framework-and-vue-js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Udemy</a> 강의를 들으면서, <a href=\"https://www.django-rest-framework.org/api-guide/serializers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DRF 공식문서</a>를 보면서, 그리고 구글링하면서 정리한 내용입니다.</p>\n<h3 id=\"django-rest-framework---level-one\" style=\"position:relative;\"><a href=\"#django-rest-framework---level-one\" aria-label=\"django rest framework   level one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django REST Framework - Level One</h3>\n<h4 id=\"nested-relationships\" style=\"position:relative;\"><a href=\"#nested-relationships\" aria-label=\"nested relationships permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nested Relationships</h4>\n<p>ForeignKey를 이용해 두 테이블을 연결하는 방법을 알아보자. 장고에서 FK를 걸던 방식과 동일하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token comment\"># 추가</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Journalist</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  first_name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n  last_name  <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n  biography  <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span>blank <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># ForeignKey 필드로 변경</span>\n  author          <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Journalist<span class=\"token punctuation\">,</span>\n                                      on_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span>\n                                      related_name <span class=\"token operator\">=</span> <span class=\"token string\">'articles'</span><span class=\"token punctuation\">)</span>\n  title            <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n  description      <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n  body             <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  location         <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">120</span><span class=\"token punctuation\">)</span>\n  publication_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  active           <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>default <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  created_at       <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  updated_at       <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span></code></pre></div>\n<p>Journalist 테이블 생성 후, Article 테이블 내 CharField였던 author 필드 속성을 ForeignKey로 바꿔주고 Journalist와 연결해준다.</p>\n<p><img src=\"/media/udemy-drf14-nested_relationship1.png\" alt=\"Nested relationship\"></p>\n<p>Journalist 테이블의 1번에 해당하는 저자가 발행한 기사임을 확인할 수 있다. 이것을 좀 더 명확하게 표시할 수도 있다.</p>\n<p>serializers.py에서 author 항목을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  time_since_publication <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>SerializerMethodField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 추가</span>\n  author <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>StringRelatedField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"/media/udemy-drf15-nested_relationship2.png\" alt=\"Nested relationship\"></p>\n<p>author 항목에 integer 말고 이름이 표시된다. models.py에 <code class=\"language-text\">__str__</code> 메소드를 이용해 first<em>name과 last</em>name이 출력되도록 지정했기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">  <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span></code></pre></div>\n<p>출력되는 이름을 지정하지 않았다면 <code class=\"language-text\">&quot;Journalist object (1)&quot;</code> 이렇게 객체로 출력된다.</p>\n<h4 id=\"참조하는-테이블의-모든-필드-보기\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0%ED%95%98%EB%8A%94-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EB%AA%A8%EB%93%A0-%ED%95%84%EB%93%9C-%EB%B3%B4%EA%B8%B0\" aria-label=\"참조하는 테이블의 모든 필드 보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조하는 테이블의 모든 필드 보기</h4>\n<p>author 이름만 출력하는 것 말고도 참고하는 테이블 행의 모든 값을 볼 수도 있다.</p>\n<p>serializers.py에 JournalistSerializer 클래스를 추가하고, ArticleSerializer에 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Journalist 테이블 데이터를 직렬화 할 클래스 추가</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">JournalistSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Journalist\n    <span class=\"token comment\"># 테이블 내 모든 필드 출력</span>\n    fields <span class=\"token operator\">=</span> <span class=\"token string\">'__all__'</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  time_since_publication <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>SerializerMethodField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># author = serializers.StringRelatedField()에서 변경</span>\n  author <span class=\"token operator\">=</span> JournalistSerializer<span class=\"token punctuation\">(</span>read_onle <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"/media/udemy-drf16-nested_relationship3.png\" alt=\"Nested relationship\"></p>\n<p>author Jane Doe에 대한 Journalist 테이블 내 모든 값이 출력된다.</p>\n<p>반대로 Journalist api에서도 해당 journalist의 모든 Article을 볼 수도 있다. Journalist api를 생성하기 위해 serializers.py와 views.py, urls.py를 손봐준다.</p>\n<p>먼저 serializers.py다. JournalistSerializer가 ArticleSerializer를 끌어와야 하므로 순서를 바꿔준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  time_since_publication <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>SerializerMethodField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 필드를 없애주지 않으면 'JournalistSerializer'가 정의되지 않았으므로 NameError가 발생한다.</span>\n  <span class=\"token comment\">#author = JournalistSerializer(read_onle = True)</span>\n\n  <span class=\"token triple-quoted-string string\">'''\n  이하 ArticleSerializer 코드 생략\n  '''</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">JournalistSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 한 저자가 여러 article을 가질 수 있으므로 many = True 속성 추가</span>\n  articles <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>many <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> read_only <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Journalist\n    fields <span class=\"token operator\">=</span> <span class=\"token string\">'__all__'</span></code></pre></div>\n<p>다음은 views.py에서 JournalistListCreateAPIView 클래스를 만들어준다. 이전에 만들었던 ArticleListCreateAPIView 클래스와 뼈대는 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JournalistListCreateAPIView</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 모든 저자를 불러올 것이므로 ORM은 .all()을 사용한다.</span>\n    journalists <span class=\"token operator\">=</span> Journalist<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    serializer <span class=\"token operator\">=</span> JournalistSerializer<span class=\"token punctuation\">(</span>journalists<span class=\"token punctuation\">,</span> many <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    serializer <span class=\"token operator\">=</span> JournalistSerializer<span class=\"token punctuation\">(</span>data <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span>HTTP_201_CREATED<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span>HTTP_400_BAD_REQUEST<span class=\"token punctuation\">)</span></code></pre></div>\n<p>urls.py에서 api url도 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token triple-quoted-string string\">'''\n  이전 path 생략\n  '''</span>\n  path<span class=\"token punctuation\">(</span><span class=\"token string\">'journalists/'</span><span class=\"token punctuation\">,</span>\n    JournalistListCreateAPIView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">'journalist-list'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">localhost:포트번호/api/journalists/</code>로 접속하면 아래처럼 journalist와 해당 journalist의 모든 article이 출력되는 것을 볼 수 있다.</p>\n<p><img src=\"/media/udemy-drf17-nested_relationship4.png\" alt=\"Nested relationship\"></p>\n<h4 id=\"하이퍼링크로-연결하기\" style=\"position:relative;\"><a href=\"#%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC%EB%A1%9C-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-label=\"하이퍼링크로 연결하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하이퍼링크로 연결하기</h4>\n<p>HyperlinkedRelatedField를 이용하면 journalist의 article을 링크로 연결할 수도 있다. serializers.py와 views.py를 수정해준다.</p>\n<p>먼저 serializers.py에서 articles 항목을 HyperlinkedRelatedField로 바꿔준다. view_name에는 urls.py에서 name으로 설정한 값을 넣어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JournalistSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  articles <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>HyperlinkedRelatedField<span class=\"token punctuation\">(</span>many <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                                 read_only <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                                 view_name <span class=\"token operator\">=</span> <span class=\"token string\">'article-detail'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Journalist\n    fields <span class=\"token operator\">=</span> <span class=\"token string\">'__all__'</span></code></pre></div>\n<p>views.py에는 context를 추가한다. context가 있어야만 article에 접근하는 절대(absolute) URL을 빌드할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JournalistListCreateAPIView</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    journalists <span class=\"token operator\">=</span> Journalist<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># context 추가</span>\n    serializer <span class=\"token operator\">=</span> JournalistSerializer<span class=\"token punctuation\">(</span>journalists<span class=\"token punctuation\">,</span>\n                                      many <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                      context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'request'</span> <span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    serializer <span class=\"token operator\">=</span> JournalistSerializer<span class=\"token punctuation\">(</span>data <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span>HTTP_201_CREATED<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">.</span>HTTP_400_BAD_REQUEST<span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"/media/udemy-drf18-nested_relationship5.png\" alt=\"Nested relationship\"></p>\n<p>Json 형태로 함께 출력되던 article이 링크로 대체됐다. 이 링크를 클릭하면 해당하는 article 인스턴스의 세부 내용을 볼 수 있다.</p>\n<p><img src=\"/media/udemy-drf19-nested_relationship6.png\" alt=\"Nested relationship\"></p>","fields":{"slug":"/posts/til69","tagSlugs":["/tag/til/","/tag/django/","/tag/django-rest-framework/"]},"frontmatter":{"date":"2020-08-25T10:41:32","description":"RESTful API를 더욱 편하게 만들 수 있는 Django Rest Framework","tags":["til","django","django-rest-framework"],"title":"Django Rest Framework 활용하기 6 - Nested Relationships","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til69"}}}