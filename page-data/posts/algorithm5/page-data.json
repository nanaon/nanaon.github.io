{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/algorithm5","result":{"data":{"markdownRemark":{"id":"8477a187-8564-52a2-9d38-b939ff720bc5","html":"<p><strong><a href=\"https://leetcode.com/problems/two-sum/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LeetCode 1번 Two Sum</a></strong></p>\n<h3 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h3>\n<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>\n<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>\n<h3 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Given nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>, <span class=\"token number\">7</span>, <span class=\"token number\">11</span>, <span class=\"token number\">15</span><span class=\"token punctuation\">]</span>, target <span class=\"token operator\">=</span> <span class=\"token number\">9</span>,\n\nBecause nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> + nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> + <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span>,\n<span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>.</code></pre></div>\n<h3 id=\"내-풀이\" style=\"position:relative;\"><a href=\"#%EB%82%B4-%ED%92%80%EC%9D%B4\" aria-label=\"내 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내 풀이</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span></code></pre></div>\n<p>어제 풀었던 백준 블랙잭 문제처럼 완전탐색 방식으로 접근했다.</p>\n<p>공간 복잡도 점수는 상위 20%쯤인데 시간 복잡도가 O(n<sup>2</sup>)이 되면서 하위 10%쯤 됐다… 다른 사람은 어떻게 풀었나 봤다. 가장 좋아요를 많이 받은 파이썬 답변이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    h <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      n <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> num\n      <span class=\"token keyword\">if</span> n <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> h<span class=\"token punctuation\">:</span>\n        h<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span></code></pre></div>\n<ol>\n<li>빈 딕셔너리를 먼저 만들어주고 주어진 리스트를 enumerate 함수를 써서 반복문을 돌린다.</li>\n<li>n이라는 변수에 target(합)과 요소를 뺀 값을 대입해준다. 이 n이 찾아야 할 값이다.</li>\n<li>딕셔너리 h에 n이 없으면 딕셔너리에 저장한다. key는 요소, value는 nums 리스트 안에서의 인덱스값이다. (<code class=\"language-text\">dictionary_name[key]=value</code>)</li>\n<li>딕셔너리 h에 n이 있으면 딕셔너리 내에서 value, 즉 리스트 내에서 n의 인덱스값과 i의 인덱스값을 출력한다.</li>\n</ol>\n<p>WOW… 어떻게 이렇게 생각하지. 코드 이해하는 데에도 한참 걸렸다. 여러 가지 자료구조를 어떻게 다루는지 머리에 잘 정리해놔야 이렇게 쓸 수 있겠지.</p>","fields":{"slug":"/posts/algorithm5","tagSlugs":["/tag/til/","/tag/algorithm/","/tag/algorithm-quiz/"]},"frontmatter":{"date":"2020-08-23T13:54:32","description":"LeetCode 문제 복기","tags":["til","algorithm","algorithm-quiz"],"title":"LeetCode - 1번 Two Sum","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/algorithm5"}}}