{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til34","result":{"data":{"markdownRemark":{"id":"376be470-0fb3-59e2-8243-a69c091ee79d","html":"<p>장고 동작 원리 등 장고 기초 지식은 따로 포스팅하고, 오늘은 장고 실습 중 겪었던 우여곡절을 우선 기록한다.</p>\n<h3 id=\"실습-프로젝트-진행-순서\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A7%84%ED%96%89-%EC%88%9C%EC%84%9C\" aria-label=\"실습 프로젝트 진행 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습 프로젝트 진행 순서</h3>\n<ol>\n<li>미니콘다 가상환경 생성 <code class=\"language-text\">conda create -n 가상환경이름 python=버전</code></li>\n<li>장고 설치 <code class=\"language-text\">pip install django</code></li>\n<li>프로젝트 생성 <code class=\"language-text\">django-admin startproject 프로젝트명</code></li>\n<li>앱 생성 <code class=\"language-text\">python manage.py startapp 앱이름</code></li>\n<li>메인 디렉토리 내 setting.py에서 <code class=\"language-text\">INSTALLED_APPS</code> 항목에 앱 추가 <code class=\"language-text\">앱이름.apps.클래스명</code> 클래스명은 앱 디렉토리의 apps.py에서 확인 가능 </li>\n<li>앱 디렉토리 내 views.py에서 request가 들어왔을 때 화면에 띄워줄 내용 세팅</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 엔드포인트 뷰를 꾸릴 때 항상 사용하는 대표적인 요소</span>\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http  <span class=\"token keyword\">import</span> JsonResponse\n\n<span class=\"token comment\"># get 요청이 들어왔을 때 출력할 것</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MainView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"필드명\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"값\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<ol start=\"7\">\n<li>앱 디렉토리에 urls.py를 생성해서 클라이언트가 <code class=\"language-text\">주소/앱이름</code>을 요청했을 때 views.py에서 세팅한 내용이 보이도록 설정</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>views  <span class=\"token keyword\">import</span> MainView\n\n<span class=\"token comment\"># 메인도메인/앱이름 경로로 들어왔을 때 MainView 클래스 안 return값 보여줌</span>\n<span class=\"token comment\"># path('', MainView.as_view())에서 ''부분에 uri 값 추가 가능</span>\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> MainView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<br>\n<ol start=\"8\">\n<li>메인 디렉토리 urls.py에 앱 디렉토리 내 urls.py를 연결</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 장고에서 기본으로 지원하는 어드민 사이트 관련</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin\n\n<span class=\"token comment\"># include 추가로 임포트</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path<span class=\"token punctuation\">,</span> include\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\"># 장고에서 기본으로 지원하는 어드민 사이트 관련</span>\n  path<span class=\"token punctuation\">(</span><span class=\"token string\">'admin/'</span><span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\"># 메인도메인/앱이름/ 부분에서 '앱이름/' 입력 및 앱 디렉토리 내 urls.py 파일 경로 지정</span>\n  path<span class=\"token punctuation\">(</span><span class=\"token string\">'앱이름/'</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">(</span><span class=\"token string\">'앱이름.urls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<br>\n<ol start=\"9\">\n<li>models.py에서 클라이언트가 입력한 정보를 담을 테이블 생성</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token comment\"># 여기서 만든 클래스는 장고-db에서 임포트 한 models 패키지의 Model 클래스를 상속 받음</span>\n<span class=\"token keyword\">class</span> 클래스이름<span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 속성 타입(정수, 문자열 등)에 따라 데이터 길이나 조건 명시</span>\n  속성<span class=\"token number\">1</span> <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span>최대길이값<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 문자열</span>\n  속성<span class=\"token number\">2</span> <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 정수</span>\n  속성<span class=\"token number\">3</span> <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DataTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 시간 (최초 발행시간. 변경 X)</span>\n  속성<span class=\"token number\">4</span> <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DataTimeField<span class=\"token punctuation\">(</span>auto_now <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 시간 (업데이트 시간)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<br>\n<ol start=\"10\">\n<li>DB 테이블에 반영하기 <code class=\"language-text\">python manage.py makemigrations</code> 후 <code class=\"language-text\">python manage.py migrate</code></li>\n</ol>\n<br>\n<ol start=\"11\">\n<li>views.py가 models.py에서 정보를 가져오거나(<code class=\"language-text\">GET</code>) 입력할 수 있도록(<code class=\"language-text\">POST</code>) 연결</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse\n<span class=\"token comment\"># 추가</span>\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models      <span class=\"token keyword\">import</span> 클래스명\n\n<span class=\"token comment\"># MainView 클래스가 이미 가지고 있는 post, get 메서드 정의</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MainView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n        Users<span class=\"token punctuation\">(</span>\n              속성<span class=\"token number\">1</span>     <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'필드1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              속성<span class=\"token number\">2</span>    <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'필드2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 데이터 테이블에 저장</span>\n        \n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'SUCCESS'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<ol start=\"12\">\n<li>httpie로 데이터 입력해서 테스트 해보기</li>\n</ol>\n<p><code class=\"language-text\">http -v &#39;서버 띄운 로컬 주소&#39; name=유저이름 email=이메일주소 password=비밀번호</code></p>\n<br>\n<ol start=\"13\">\n<li>입력한 데이터를 화면에서 확인할 수 있도록 views.py 안 <code class=\"language-text\">get</code> 메서드 수정</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user_data <span class=\"token operator\">=</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># user_data는 query set 형태이므로 객체 형태로 만들어서 출력해주기 위해서는 list로 만들어주어야 함</span>\n\t\t    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>user_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>참고) 서버 띄우기 <code class=\"language-text\">python manage.py runserver 포트번호</code> 후 <code class=\"language-text\">로컬주소/포트번호/앱이름</code>으로 접속하면 입력한 데이터 확인 가능</p>\n<br>\n<h3 id=\"어려웠던-점\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%A0%A4%EC%9B%A0%EB%8D%98-%EC%A0%90\" aria-label=\"어려웠던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어려웠던 점</h3>\n<p>csrf 에러가 발생해 settings.py 내 <code class=\"language-text\">MIDDLEWARE</code> 항목 중 csrf 관련 부분을 주석처리 했지만 계속 에러가 발생했다. 이거 때문인가? 저거 때문인가? 하면서 이것저것 설정을 바꾸다보니 403부터 500까지 다채로운 에러를 만났다. 하지만 문제는 오탈자 때문이었다. <code class=\"language-text\">Users</code>로 작성했어야 하는 걸 <code class=\"language-text\">User</code>로 작성했던 것… 에러 중 에러는 역시 휴먼에러다!</p>","fields":{"slug":"/posts/til34","tagSlugs":["/tag/til/","/tag/django/","/tag/wecode/"]},"frontmatter":{"date":"2020-06-10T22:30:32.169Z","description":"장고 입문의 입문의 입문 단계를 힘겹게 통과하는 과정을 담았다.","tags":["til","django","wecode"],"title":"django - django 기초 실습","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til34"}}}