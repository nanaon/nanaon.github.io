{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til34","result":{"data":{"markdownRemark":{"id":"376be470-0fb3-59e2-8243-a69c091ee79d","html":"<p>장고 동작 원리 등 장고 기초 지식은 따로 포스팅하고, 오늘은 장고 실습 중 겪었던 우여곡절을 우선 기록한다.</p>\n<h3 id=\"실습-프로젝트-진행-순서\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A7%84%ED%96%89-%EC%88%9C%EC%84%9C\" aria-label=\"실습 프로젝트 진행 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습 프로젝트 진행 순서</h3>\n<ol>\n<li>미니콘다 가상환경 생성 <code class=\"language-text\">conda create -n 가상환경이름 python=버전</code></li>\n<li>장고 설치 <code class=\"language-text\">pip install django</code></li>\n<li>프로젝트 생성 <code class=\"language-text\">django-admin startproject 프로젝트명</code></li>\n<li>앱 생성 <code class=\"language-text\">python manage.py startapp 앱이름</code></li>\n<li>메인 디렉토리 내 setting.py에서 <code class=\"language-text\">INSTALLED_APPS</code> 항목에 앱 추가 <code class=\"language-text\">앱이름.apps.클래스명</code> 클래스명은 앱 디렉토리의 apps.py에서 확인 가능 </li>\n<li>\n<p>앱 디렉토리 내 views.py에서 request가 들어왔을 때 화면에 띄워줄 내용 세팅</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 엔드포인트 뷰를 꾸릴 때 항상 사용하는 대표적인 요소</span>\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http  <span class=\"token keyword\">import</span> JsonResponse\n<span class=\"token comment\"># 여기까지</span></code></pre></div>\n</li>\n</ol>\n<h1 id=\"get-요청이-들어왔을-때-출력할-것\" style=\"position:relative;\"><a href=\"#get-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%93%A4%EC%96%B4%EC%99%94%EC%9D%84-%EB%95%8C-%EC%B6%9C%EB%A0%A5%ED%95%A0-%EA%B2%83\" aria-label=\"get 요청이 들어왔을 때 출력할 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>get 요청이 들어왔을 때 출력할 것</h1>\n<p>class MainView(View):\ndef get(self, request):\nreturn JsonResponse({“필드명”:“값”}, status=200)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">7. 앱 디렉토리에 urls.py를 생성해서 클라이언트가 `주소/앱이름`을 요청했을 때 views.py에서 세팅한 내용이 보이도록 설정\n```python\nfrom django.urls import path\nfrom .views  import MainView\n\n# 메인도메인/앱이름 경로로 들어왔을 때 MainView 클래스 안 return값 보여줌\n# path(&#39;&#39;, MainView.as_view())에서 &#39;&#39;부분에 uri 값 추가 가능\nurlpatterns = [\n    path(&#39;&#39;, MainView.as_view())\n]</code></pre></div>\n<ol start=\"8\">\n<li>\n<p>메인 디렉토리 urls.py에 앱 디렉토리 내 urls.py를 연결</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 장고에서 기본으로 지원하는 어드민 사이트 관련</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin</code></pre></div>\n</li>\n</ol>\n<h1 id=\"include-추가로-임포트\" style=\"position:relative;\"><a href=\"#include-%EC%B6%94%EA%B0%80%EB%A1%9C-%EC%9E%84%ED%8F%AC%ED%8A%B8\" aria-label=\"include 추가로 임포트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>include 추가로 임포트</h1>\n<p>from django.urls import path, include</p>\n<p>urlpatterns = [</p>\n<h1 id=\"장고에서-기본으로-지원하는-어드민-사이트-관련\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EA%B3%A0%EC%97%90%EC%84%9C-%EA%B8%B0%EB%B3%B8%EC%9C%BC%EB%A1%9C-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EC%96%B4%EB%93%9C%EB%AF%BC-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EA%B4%80%EB%A0%A8\" aria-label=\"장고에서 기본으로 지원하는 어드민 사이트 관련 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장고에서 기본으로 지원하는 어드민 사이트 관련</h1>\n<p>  path(‘admin/’, admin.site.urls),</p>\n<h1 id=\"메인도메인앱이름-부분에서-앱이름-입력-및-앱-디렉토리-내-urlspy-파일-경로-지정\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%9D%B8%EB%8F%84%EB%A9%94%EC%9D%B8%EC%95%B1%EC%9D%B4%EB%A6%84-%EB%B6%80%EB%B6%84%EC%97%90%EC%84%9C-%EC%95%B1%EC%9D%B4%EB%A6%84-%EC%9E%85%EB%A0%A5-%EB%B0%8F-%EC%95%B1-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EB%82%B4-urlspy-%ED%8C%8C%EC%9D%BC-%EA%B2%BD%EB%A1%9C-%EC%A7%80%EC%A0%95\" aria-label=\"메인도메인앱이름 부분에서 앱이름 입력 및 앱 디렉토리 내 urlspy 파일 경로 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메인도메인/앱이름/ 부분에서 ‘앱이름/’ 입력 및 앱 디렉토리 내 urls.py 파일 경로 지정</h1>\n<p>  path(‘앱이름/’, include(‘앱이름.urls’))\n]</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">9. models.py에서 클라이언트가 입력한 정보를 담을 테이블 생성\n```python\nfrom django.db import models\n\n# 여기서 만든 클래스는 장고-db에서 임포트 한 models 패키지의 Model 클래스를 상속 받음\nclass 클래스이름(models.Model):\n  # 속성 타입(정수, 문자열 등)에 따라 데이터 길이나 조건 명시\n  속성1 = models.CharField(max_length=최대길이값) # 문자열\n  속성2 = models.IntegerField(default=0) # 정수\n  속성3 = models.DataTimeField(auto_now_add = True) # 시간 (최초 발행시간. 변경 X)\n  속성4 = models.DataTimeField(auto_now = True) # 시간 (업데이트 시간)\n  ...</code></pre></div>\n<ol start=\"10\">\n<li>DB 테이블에 반영하기 <code class=\"language-text\">python manage.py makemigrations</code> - <code class=\"language-text\">python manage.py migrate</code></li>\n<li>\n<p>views.py가 models.py에서 정보를 가져오거나(<code class=\"language-text\">GET</code>) 입력할 수 있도록(<code class=\"language-text\">POST</code>) 연결</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse\n<span class=\"token comment\"># 추가</span>\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models      <span class=\"token keyword\">import</span> 클래스명</code></pre></div>\n</li>\n</ol>\n<h1 id=\"mainview-클래스가-이미-가지고-있는-post-get-메서드-정의\" style=\"position:relative;\"><a href=\"#mainview-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%9D%B4%EB%AF%B8-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EB%8A%94-post-get-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A0%95%EC%9D%98\" aria-label=\"mainview 클래스가 이미 가지고 있는 post get 메서드 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MainView 클래스가 이미 가지고 있는 post, get 메서드 정의</h1>\n<p>class MainView(View):\ndef post(self, request):\ndata = json.loads(request.body)\nUsers(\n속성1     = data[‘필드1’],\n속성2    = data[‘필드2’],\n).save() # 데이터 테이블에 저장</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    return JsonResponse({&#39;message&#39;:&#39;SUCCESS&#39;}, status=200)\n\ndef get(self, request):\n\t    return JsonResponse({&quot;Hello&quot;:&quot;World&quot;}, status=200)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">12. httpie로 데이터 입력해서 테스트 해보기 `http -v &#39;서버 띄운 로컬 주소&#39; name=유저이름 email=이메일주소 password=비밀번호`\n\n13. 입력한 데이터를 화면에서 확인할 수 있도록 views.py 안 `get` 메서드 수정\n```python\ndef get(self, request):\n        user_data = Users.objects.values()\n        # user_data는 query set 형태이므로 객체 형태로 만들어서 출력해주기 위해서는 list로 만들어주어야 함\n\t\t    return JsonResponse({&#39;users&#39;:list(user_data)}, status=200)</code></pre></div>\n<p>참고) 서버 띄우기 <code class=\"language-text\">python manage.py runserver 포트번호</code> 후 <code class=\"language-text\">로컬주소/포트번호/앱이름</code>으로 접속하면 입력한 데이터 확인 가능</p>\n<br>\n<h3 id=\"어려웠던-점\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%A0%A4%EC%9B%A0%EB%8D%98-%EC%A0%90\" aria-label=\"어려웠던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어려웠던 점</h3>\n<p>csrf 에러가 발생해 settings.py 내 <code class=\"language-text\">MIDDLEWARE</code> 항목 중 csrf 관련 부분을 주석처리 했지만 계속 에러가 발생했다. 이거 때문인가? 저거 때문인가? 하면서 이것저것 설정을 바꾸다보니 403부터 500까지 다채로운 에러를 만났다. 하지만 문제는 오탈자 때문이었다. <code class=\"language-text\">Users</code>로 작성했어야 하는 걸 <code class=\"language-text\">User</code>로 작성했던 것… 에러 중 에러는 역시 휴먼에러다!</p>","fields":{"slug":"/posts/til34","tagSlugs":["/tag/til/","/tag/django/","/tag/wecode/"]},"frontmatter":{"date":"2020-06-10T22:30:32.169Z","description":"장고 입문의 입문의 입문 단계를 힘겹게 통과하는 과정을 담았다.","tags":["til","django","wecode"],"title":"django - django 기초 실습","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til34"}}}