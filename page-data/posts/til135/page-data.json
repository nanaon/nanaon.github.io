{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til135","result":{"data":{"markdownRemark":{"id":"5a476a7d-753c-55d9-aa6b-b5d4d91126da","html":"<p>함수를 정의해 사용할 때 호출함수와 피호출함수 사이에서 자료를 전달하는 방식은 값에 의한 자료 전달(call by value)과 참조에 의한 자료 전달(call by reference) 방식으로 나뉜다.</p>\n<h2 id=\"값에-의한-자료-전달call-by-value\" style=\"position:relative;\"><a href=\"#%EA%B0%92%EC%97%90-%EC%9D%98%ED%95%9C-%EC%9E%90%EB%A3%8C-%EC%A0%84%EB%8B%ACcall-by-value\" aria-label=\"값에 의한 자료 전달call by value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값에 의한 자료 전달(call by value)</h2>\n<p>C 언어에서 기본적인 자료 전달 방식이다. 실매개변수와 형식매개변수 사이에서 값 자체가 전달되는 방식이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">fcn1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 함수 호출(실매개변수)</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">fcn1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 함수 정의(형식매개변수)</span></code></pre></div>\n<p>선언한 함수 fcn1을 실행(<code class=\"language-text\">fcn1(10, 20)</code>)하면 10과 20이라는 값이 형식매개변수로 그대로 복사된다. 따라서 피호출함수의 형식매개변수 값이 바뀌더라도 호출함수의 실매개변수 값에는 영향을 미치지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"호출 전 a = %d, b = %d \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"호출 후 a = %d, b = %d \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n  temp <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n  y <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"함수 내 x = %d, y = %d \\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">호출 전 a = 3, b = 5\n함수 내 x = 5, y = 3\n호출 후 a = 3, b = 5</code></pre></div>\n<p>함수 내부에서는 값이 바뀌었지만 호출 전과 후 a, b 값은 3, 5로 변화가 없다.</p>\n<h2 id=\"참조에-의한-자료-전달-방법call-by-reference\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0%EC%97%90-%EC%9D%98%ED%95%9C-%EC%9E%90%EB%A3%8C-%EC%A0%84%EB%8B%AC-%EB%B0%A9%EB%B2%95call-by-reference\" aria-label=\"참조에 의한 자료 전달 방법call by reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조에 의한 자료 전달 방법(call by reference)</h2>\n<p>호출함수와 피호출함수간 실매개변수 값이 들어있는 주소값을 전달하므로, 전달 후 바뀐 형식매개변수 값을 되돌려받을 수 있다. 실매개변수와 형식매개변수 모두 같은 기억 장소를 가리키고 있으므로 형식매개변수 값이 바뀐 후 호출함수로 되돌아갔을 때 실매개변수 값은 바뀐 형식매개변수 값을 갖게 된다.</p>\n<p>참조에 의한 자료 전달 방식에서는 실매개변수 앞에 주소를 나타내는 연산자 <strong>&#x26;</strong>를 붙여야 한다. 또한 형식매개변수는 <strong>*</strong>를 붙여 주소를 참조하는 포인터 변수로 선언해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 주소를 받을 수 있는 포인터 변수로 선언</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"호출 전 a = %d, b = %d \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 주소값 전달을 위해 주소 연산자 붙임</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"호출 후 a = %d, b = %d \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">wap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n  temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>y <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"함수 내 x = %d, y = %d \\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">호출 전 a = 3, b = 5\n함수 내 x = 5, y = 3\n호출 후 a = 5, b = 3</code></pre></div>\n<p>형식매개변수 값이 변했더니 실매개변수 값도 따라서 변했다.</p>\n<h3 id=\"참고-파이썬은-어떤-방식일까\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%80-%EC%96%B4%EB%96%A4-%EB%B0%A9%EC%8B%9D%EC%9D%BC%EA%B9%8C\" aria-label=\"참고 파이썬은 어떤 방식일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고) 파이썬은 어떤 방식일까?</h3>\n<p>파이썬은 <strong>call by assignment</strong> 방식이다. 인자로 넘겨지는 객체 종류에 따라서 call by reference 방식, call by value 방식이 갈린다.</p>\n<ul>\n<li><strong>int, float, str, tuple</strong> 등 <strong>immutable 객체</strong>는 값이 복사되어 <strong>call by value 방식</strong>으로 넘겨지고,</li>\n<li><strong>list, dict, set</strong> 등 <strong>mutable 객체</strong>는 <strong>call by reference 방식</strong>으로 넘겨진다. </li>\n</ul>","fields":{"slug":"/posts/til135","tagSlugs":["/tag/til/","/tag/c/"]},"frontmatter":{"date":"2021-04-28T22:57:32","description":"매개변수 사이 자료 전달 방법","tags":["til","c"],"title":"call by value와 call by reference","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til135"}}}