{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til70","result":{"data":{"markdownRemark":{"id":"14db96ae-7c0b-56d7-b8fc-c7530a34a222","html":"<p>사용자 프로필 사진을 S3로 바로 업로드하는 기능을 DRF로 구현해봤다.</p>\n<p>우선 models.py다. 장고 User 모델을 상속하기에는 쓰는 필드보다 안 쓰는 필드가 더 많아서 AbstractBaseUser를 상속했다. 그런데 자꾸 <code class=\"language-text\">is_staff</code> attribute가 없다는 에러가 나서 필드 마지막에 억지로 추가해줬다. 난 <code class=\"language-text\">is_admin</code>만 있으면 된다고!</p>\n<p>유저 닉네임은 어떻게 할까 고민하다가 ‘user12345’ 이런 식으로 ‘user’ + 랜덤 숫자로 지정해줬다. 장고였으면 저걸 views.py에서 구현해줬겠지만 아직 DRF 햇햇햇햇병아리라 어떻게 해야할지 몰라서 일단 모델에 때려넣었다. 더 공부하면서 적당한 것으로 수정할 예정. 일단 이미지 업로드에 관한 포스팅이므로 유저 모델에 대해서는 나중에 다루겠다.</p>\n<p>이미지 필드에서 <code class=\"language-text\">upload_to=upload_image</code>로 지정했는데, <code class=\"language-text\">upload_image</code>는 utils.py에 작성한 함수다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>AbstractBaseUser<span class=\"token punctuation\">,</span> PermissionsMixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  email          <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>EmailField<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">(</span><span class=\"token string\">'email_address'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                     unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  date_joined    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">(</span><span class=\"token string\">'date joined'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> auto_now_add<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  nickname       <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">(</span><span class=\"token string\">'nickname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n                                    default<span class=\"token operator\">=</span><span class=\"token string\">'user'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">99999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                    unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  profile_image  <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ImageField<span class=\"token punctuation\">(</span>upload_to<span class=\"token operator\">=</span>upload_image<span class=\"token punctuation\">,</span>\n                                     editable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  is_active      <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  is_social_user <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  is_staff       <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  objects <span class=\"token operator\">=</span> UserManager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  USERNAME_FIELD  <span class=\"token operator\">=</span> <span class=\"token string\">'email'</span>\n  REQUIRED_FIELDS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>utils.py에 저장한 이미지 업로드 함수다.</p>\n<p>파일 이름이랑 저장 경로를 어디로 할까 고민하다가 그냥 버킷 최상위 디렉토리에 바로 저장하는 것으로 결정했다. 어차피 이번 프로젝트용 버킷인데다 유저(인스턴스) id 값으로 디렉토리를 만들어버리면 왠지 개인정보(?)를 카테고라이징 해둔 것 같아서 일단 주석처리 해뒀다.</p>\n<p>파일 이름은 ‘업로드 날짜_랜덤숫자’ 형태로 지정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">upload_image</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">import</span> os\n  <span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> randint\n  <span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>timezone <span class=\"token keyword\">import</span> now\n  filename_base<span class=\"token punctuation\">,</span> filename_ext <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'%s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">#instance.id,</span>\n      now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y%m%d'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'_'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">,</span><span class=\"token number\">99999999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 settings.py</p>\n<p>우선 커스텀 유저 모델을 등록해줬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">AUTH_USER_MODEL <span class=\"token operator\">=</span> <span class=\"token string\">'account.User'</span></code></pre></div>\n<p>그리고 기본 파일 스토리지를 S3로 지정해줬다. 액세스 키나 시크릿 키같은 민감정보는 전부 my_settings.py에 따로 저장했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DEFAULT_FILE_STORAGE <span class=\"token operator\">=</span> <span class=\"token string\">'storages.backends.s3boto3.S3Boto3Storage'</span>\nAWS_S3_SECURE_URLS <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\nAWS_QUERYSTRING_AUTH <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\nAWS_S3_ACCESS_KEY_ID <span class=\"token operator\">=</span> my_settings<span class=\"token punctuation\">.</span>S3<span class=\"token punctuation\">[</span><span class=\"token string\">'aws_access_key_id'</span><span class=\"token punctuation\">]</span>\nAWS_S3_SECRET_ACCESS_KEY <span class=\"token operator\">=</span> my_settings<span class=\"token punctuation\">.</span>S3<span class=\"token punctuation\">[</span><span class=\"token string\">'aws_secret_access_key'</span><span class=\"token punctuation\">]</span>\nAWS_STORAGE_BUCKET_NAME <span class=\"token operator\">=</span> my_settings<span class=\"token punctuation\">.</span>S3<span class=\"token punctuation\">[</span><span class=\"token string\">'aws_bucket'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>어드민 화면에서 업로드 테스트를 해봤다.</p>\n<p><img src=\"/media/s3-upload1.png\" alt=\"s3 image upload\"></p>\n<p>사진을 선택하고 SAVE 하면,</p>\n<p><img src=\"/media/s3-upload2.png\" alt=\"s3 image upload\"></p>\n<p>지정한 파일 이름 형식대로 파일이 저장된다. S3와 CloudFront를 연동했기 때문에 이미지는 CloudFront를 통해 확인해보자.</p>\n<p><img src=\"/media/s3-upload3.png\" alt=\"s3 image upload\"></p>\n<p>업로드가 잘 되었다 짝짝짝</p>","fields":{"slug":"/posts/til70","tagSlugs":["/tag/til/","/tag/django/","/tag/django-rest-framework/","/tag/aws/","/tag/s-3/"]},"frontmatter":{"date":"2020-08-27T22:52:32","description":"Django와 Django REST Framework 활용 연습","tags":["til","django","django-rest-framework","aws","s3"],"title":"Django에서 AWS S3로 이미지 바로 업로드 하기","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til70"}}}