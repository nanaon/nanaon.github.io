{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til50","result":{"data":{"markdownRemark":{"id":"a2484968-4ef0-5c19-9726-01506c529af3","html":"<h3 id=\"restful-api\" style=\"position:relative;\"><a href=\"#restful-api\" aria-label=\"restful api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful API</h3>\n<p><strong>REST(REpresentational State Transfer)</strong>란 웹에 존재하는 모든 자원(이미지, 동영상, 데이터 등)에 고유한 URI를 부여하여 자원에 대한 주소를 지정하는 방법론 또는 규칙을 말한다. <strong>RESTful API</strong>는 REST 특징을 지키면서 API를 제공한다는 의미다.</p>\n<p>RESTful API는 요청을 보내는 주소만으로도 무슨 요청인지 누구나 대략 알 수 있다. REST 규칙은 아래와 같다.</p>\n<ul>\n<li>명사만 사용<br></li>\n<li>\n<p><code class=\"language-text\">/</code>(slash)는 계층 관계를 나타낼 때만 사용. 그 외의 경우는 쿼리스트링을 사용<br></p>\n<ul>\n<li><code class=\"language-text\">product/category/3</code> 프로덕트 하위 카테고리 중 3번째. 특정 테이블의 특정 데이터를 찾아가는 주소<br></li>\n<li><code class=\"language-text\">product?category=3</code> 카테고리 id가 3인 것. 원하는 정보를 보기 위한 필터링 개념<br></li>\n<li><code class=\"language-text\">product?category=3&amp;name=men</code> 카테고리 id가 3인 것 중 ‘men’이 들어간 것 전부 호출<br></li>\n</ul>\n</li>\n<li><code class=\"language-text\">_</code>(underscore)는 사용하지 않음<br></li>\n<li>대문자보다는 소문자 사용<br></li>\n</ul>\n<p><em>참고) 이렇게 만든 API 주소는 도메인과는 다르다. 도메인은 클라이언트가 사용하는 것이고 API 주소는 프론트가 백에 요청할 때 사용한다.</em></p>\n<h3 id=\"요청을-보낼-때-사용하는-메소드\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%B2%AD%EC%9D%84-%EB%B3%B4%EB%82%BC-%EB%95%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"요청을 보낼 때 사용하는 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요청을 보낼 때 사용하는 메소드</h3>\n<p>여러 메소드가 있지만 RESTful API에서는 주로 4가지 메소드를 사용한다.</p>\n<ul>\n<li><code class=\"language-text\">POST</code> 쓰기(Create)<br></li>\n<li><code class=\"language-text\">GET</code> 읽기(Read)<br></li>\n<li><code class=\"language-text\">PUT</code> 수정(Update)<br></li>\n<li><code class=\"language-text\">DELETE</code> 삭제(Delete)<br></li>\n</ul>\n<p><em>참고) <code class=\"language-text\">PATCH</code>는 부분 수정할 때 사용하는 메소드지만 보통 PUT 메소드로 통합해서 사용한다. 바뀌지 않는 value는 똑같은 value로 덮어씌워지고 변경사항이 있는 것만 반영된다.</em></p>","fields":{"slug":"/posts/til50","tagSlugs":["/tag/til/","/tag/django/"]},"frontmatter":{"date":"2020-07-01T18:30:32.160Z","description":"REST 규칙에 맞는 API 주소 작성하기","tags":["til","django"],"title":"django - RESTful API","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til50"}}}