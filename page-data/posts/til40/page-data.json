{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til40","result":{"data":{"markdownRemark":{"id":"ac2fa329-a403-5c49-8f56-7bf089c08cd1","html":"<h3 id=\"회원가입-및-비밀번호-암호화-프로세스\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EB%B0%8F-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-%EC%95%94%ED%98%B8%ED%99%94-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\" aria-label=\"회원가입 및 비밀번호 암호화 프로세스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회원가입 및 비밀번호 암호화 프로세스</h3>\n<ol>\n<li>request body를 통해 유저가 가입 시 입력한 비밀번호를 받아서 encoding</li>\n<li>bcrypt로 비밀번호 hashing 및 salting</li>\n<li>hasing + salting한 비밀번호를 decoding해서 DB에 저장</li>\n</ol>\n<h4 id=\"1-request-body를-통해-유저가-입력한-비밀번호를-받아서-encoding\" style=\"position:relative;\"><a href=\"#1-request-body%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%9C%A0%EC%A0%80%EA%B0%80-%EC%9E%85%EB%A0%A5%ED%95%9C-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8%EB%A5%BC-%EB%B0%9B%EC%95%84%EC%84%9C-encoding\" aria-label=\"1 request body를 통해 유저가 입력한 비밀번호를 받아서 encoding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. request body를 통해 유저가 입력한 비밀번호를 받아서 encoding</h4>\n<p>유저가 ‘user1234’라는 비밀번호로 가입을 했다고 가정하자. hashing과 salting을 해주기 위해 문자열에서 byte 타입으로 변환해준다. 이 과정을 인코딩이라 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">password <span class=\"token operator\">=</span> <span class=\"token string\">'user1234'</span>\nencoded_password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">print(encoded_password)</code>로 출력한 인코딩 결과값은 이렇게 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token string\">b'user1234'</span></code></pre></div>\n<h4 id=\"2-bcrypt로-비밀번호-hashing-및-salting\" style=\"position:relative;\"><a href=\"#2-bcrypt%EB%A1%9C-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-hashing-%EB%B0%8F-salting\" aria-label=\"2 bcrypt로 비밀번호 hashing 및 salting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. bcrypt로 비밀번호 hashing 및 salting</h4>\n<p>hashing은 단방향 암호화 방식이다. 같은 값을 해싱하면 해싱값 또한 항상 같다. 따라서 해싱값 데이터가 쌓이면 역으로 암호가 드러나는 위험성이 있다. 이 점을 보완하기 위해 salting 과정을 추가해서 더 복잡하게 암호화 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> bcrypt\n\nhashed_password <span class=\"token operator\">=</span> bcrypt<span class=\"token punctuation\">.</span>hashpw<span class=\"token punctuation\">(</span>encoded_password<span class=\"token punctuation\">,</span> bcrypt<span class=\"token punctuation\">.</span>gensalt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">print(hashed_password)</code>로 출력한 인코딩 결과값은 이렇게 나온다. 암호화에 성공했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token string\">b'$2b$12$PS77USI4OnMydAuPoPCoK.9rCCOghSmMrR82Xn6L3x2xRYaeA7i8m'</span></code></pre></div>\n<h4 id=\"3-hasing--salting한-비밀번호를-decoding해서-db에-저장\" style=\"position:relative;\"><a href=\"#3-hasing--salting%ED%95%9C-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8%EB%A5%BC-decoding%ED%95%B4%EC%84%9C-db%EC%97%90-%EC%A0%80%EC%9E%A5\" aria-label=\"3 hasing  salting한 비밀번호를 decoding해서 db에 저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. hasing + salting한 비밀번호를 decoding해서 DB에 저장</h4>\n<p>DB에 비밀번호를 저장할 때 반드시 암호화한 형태를 저장해야 한다. 2번에서 마지막 결과값을 보면 byte 타입으로 인코딩 되어있음을 알 수 있는데, DB에 저장할 때는 다시 string 타입으로 디코딩 해줘야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">decoded_hashed_password <span class=\"token operator\">=</span> hash_password<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">print(decoded_hashed_password)</code>로 출력한 인코딩 결과값은 이렇게 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$<span class=\"token number\">2b</span>$<span class=\"token number\">12</span>$Q<span class=\"token punctuation\">.</span>bIZfHuJPgPICdJbcO8r<span class=\"token punctuation\">.</span>6xHBhXuhNXYSuSfQuOQXPV<span class=\"token operator\">/</span>c<span class=\"token punctuation\">.</span>5hF38K</code></pre></div>\n<p>이것을 DB에 저장하는 것까지 회원가입 프로세스다. 이제 유저가 로그인 시 입력한 비밀번호와 DB에 저장된 암호화된 비밀번호 일치 여부를 어떻게 확인하는지 살펴보자.</p>\n<br>\n<h3 id=\"로그인-시-인증-프로세스\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%8B%9C-%EC%9D%B8%EC%A6%9D-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\" aria-label=\"로그인 시 인증 프로세스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 시 인증 프로세스</h3>\n<ol>\n<li>request body를 통해 유저가 로그인 시 입력한 아이디 또는 비밀번호를 받아서 DB 테이블에서 유저 정보 찾기</li>\n<li>bcrypt로 입력 받은 비밀번호와 DB 테이블에 있는 암호화 비밀번호가 일치하는지 확인</li>\n</ol>\n<br>\n<h3 id=\"로그인-유저-인가-프로세스\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%9C%A0%EC%A0%80-%EC%9D%B8%EA%B0%80-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\" aria-label=\"로그인 유저 인가 프로세스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 유저 인가 프로세스</h3>\n<ol>\n<li>로그인 성공 시 토큰 부여</li>\n</ol>\n<br>\n<h3 id=\"실제-구현\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%9C-%EA%B5%AC%ED%98%84\" aria-label=\"실제 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실제 구현</h3>\n<p><a href=\"https://naon.me/posts/til37\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">기존에 만들어둔 회원가입, 로그인 코드</a>의 views.py를 아래와 같이 수정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse<span class=\"token punctuation\">,</span> HttpResponse\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Users\n\n<span class=\"token keyword\">import</span> bcrypt\n<span class=\"token keyword\">import</span> jwt\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MainView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Welcome to'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Westagram'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sign-up'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'/users/sign-up'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Log-in'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'/users/log-in'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SignUpView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 가입 시 유저가 입력한 아이디, 비밀번호 값을 request body를 통해 받는다.</span>\n    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 유저가 입력한 비밀번호값 data['password']을 byte 타입으로 인코딩 한 후</span>\n    <span class=\"token comment\"># bcrypt를 이용해 hasing과 salting을 해준다.</span>\n    hased_pw <span class=\"token operator\">=</span> bcrypt<span class=\"token punctuation\">.</span>hashpw<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bcrypt<span class=\"token punctuation\">.</span>gensalt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 해싱한 암호를 다시 디코딩 해서 DB에 저장 가능한 형태로 만들어준다.</span>\n    decoded_hashed_pw <span class=\"token operator\">=</span> hased_pw<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'ID_IS_REQUIRED'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n            \n      <span class=\"token keyword\">elif</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'PASSWORD_IS_REQUIRED'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n            \n      <span class=\"token keyword\">elif</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'ID_EXISTS'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">409</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\"># 유저가 입력한 아이디가 기존 아이디와 겹치지 않는다면 if문 안 코드를 실행한다.</span>\n      <span class=\"token keyword\">elif</span> <span class=\"token keyword\">not</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 유저가 입력한 아이디는 DB에 그대로 저장해주고, 비밀번호는 위에서 암호화 한 형태로 저장한다.</span>\n        Users<span class=\"token punctuation\">(</span>\n          username <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          password <span class=\"token operator\">=</span> decoded_hashed_pw\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'WELCOME'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'INVALID_ID'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># get 메서드 생략</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LogInView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 로그인 시 유저가 입력한 아이디, 비밀번호 값을 request body를 통해 받는다.</span>\n    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 로그인 시 입력한 아이디 값 data['username']에 맞는 유저 정보가 DB에 존재한다면 if문 안 코드를 실행한다.</span>\n      <span class=\"token keyword\">if</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># 객체 형태로 바로 리턴되는 get을 이용해 유저가 입력한 아이디 값에 해당하는 객체를 구해준다.</span>\n        user_id <span class=\"token operator\">=</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 유저가 입력한 비밀번호와 DB에 저장된 비밀번호가 일치하는지 비교해준다.</span>\n        <span class=\"token comment\"># 비교는 둘 다 byte 타입인 상태에서 해야한다.</span>\n        <span class=\"token keyword\">if</span> bcrypt<span class=\"token punctuation\">.</span>checkpw<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># user_id 객체의 PK값인 id를 특정 알고리즘을 사용해 암호화하여 토큰을 생성한다.</span>\n          <span class=\"token comment\"># 여기서의 id는 유저 아이디가 아니라 DB 테이블 상 고유값 id다.</span>\n          access_token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span>user_id<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'secret'</span><span class=\"token punctuation\">,</span> algorithm<span class=\"token operator\">=</span><span class=\"token string\">'HS256'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token comment\"># 정상적으로 동작하면 토큰과 함께 status code 200을 리턴한다.</span>\n          <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">:</span> access_token<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'비밀번호가 틀립니다.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n          \n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'아이디가 없습니다.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'INVALID_USER'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\"># get 메서드 생략</span></code></pre></div>\n<br>\n<h3 id=\"어려웠던-점\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%A0%A4%EC%9B%A0%EB%8D%98-%EC%A0%90\" aria-label=\"어려웠던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어려웠던 점</h3>\n<p>처음에는 인증, 인가 과정이 views에서 일어나는지 models에서 일어나는지조차 판단하기 어려웠다. 이번 주 코드카타 짝 덕분에 아래와 같이 인증 프로세스를 정리했고, 테이블을 보니 수정/추가해야 할 코드가 명확해졌다.</p>\n<p><img src=\"/media/web-auth.JPG\" alt=\"process-table\"></p>\n<p>유저 정보가 든 데이터 테이블 구조 자체를 바꿀 일이 없으므로 작업은 오로지 views.py에서만 진행하면 된다.</p>","fields":{"slug":"/posts/til40","tagSlugs":["/tag/til/","/tag/django/","/tag/python/","/tag/wecode/","/tag/bcrypt/"]},"frontmatter":{"date":"2020-06-16T23:07:32","description":"bcrpyt와 JWT를 이용해 기존에 구현했던 회원가입, 로그인 기능 발전시키기","tags":["til","django","python","wecode","bcrypt"],"title":"django - 인증, 인가 실습","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til40"}}}