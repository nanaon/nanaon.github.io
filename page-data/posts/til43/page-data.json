{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til43","result":{"data":{"markdownRemark":{"id":"a44c9056-dd74-53ca-888a-e42aba746556","html":"<p><a href=\"https://naon.me/posts/til40\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">지난 번 인증, 인가 실습</a>에서 조금 더 발전시켰다. 모두 views 내에서 이루어졌던 인가 과정을 분리해 데코레이터로 만들어주었고, 뭉뚱그려 출력되던 에러 메시지도 에러 케이스를 세분화해 에러를 특정할 수 있도록 수정했다.</p>\n<h3 id=\"유효한-토큰인지-검증하는-데코레이터\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%ED%9A%A8%ED%95%9C-%ED%86%A0%ED%81%B0%EC%9D%B8%EC%A7%80-%EA%B2%80%EC%A6%9D%ED%95%98%EB%8A%94-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0\" aria-label=\"유효한 토큰인지 검증하는 데코레이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유효한 토큰인지 검증하는 데코레이터</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> jwt\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Users\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># request 헤더에서 토큰 가져오기. </span>\n    auth_token <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 토큰 값이 아예 안 들어왔을 때 401 코드 처리 및 메시지 출력</span>\n    <span class=\"token keyword\">if</span> auth_token <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Enter the token.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 받은 토큰 디코딩해서 user id 정보 출력하기</span>\n      payload <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>auth_token<span class=\"token punctuation\">,</span> <span class=\"token string\">'secret'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># 위에서 디코딩한 user id 숫자만 추출해서 DB에 있는지 대조</span>\n      <span class=\"token keyword\">if</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span>payload<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># id 숫자를 user에 할당</span>\n        user <span class=\"token operator\">=</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span>payload<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 데이터 테이블에 열 이름과 값 동적 추가</span>\n        request<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user\n        <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># signiture 부분이 잘못됐을 때 401 코드 처리 및 메시지 출력</span>\n    <span class=\"token keyword\">except</span> jwt<span class=\"token punctuation\">.</span>InvalidSignatureError<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Invalid token. Check the suffix.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># header 부분이 잘못됐을 때 401 코드 처리 및 메시지 출력</span>\n    <span class=\"token keyword\">except</span> jwt<span class=\"token punctuation\">.</span>DecodeError<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Invalid token. Check the prefix.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> wrapper</code></pre></div>\n<br>\n<h3 id=\"코멘트-viewspy-파일에-데코레이터-붙이기\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%A9%98%ED%8A%B8-viewspy-%ED%8C%8C%EC%9D%BC%EC%97%90-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%EB%B6%99%EC%9D%B4%EA%B8%B0\" aria-label=\"코멘트 viewspy 파일에 데코레이터 붙이기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코멘트 views.py 파일에 데코레이터 붙이기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse<span class=\"token punctuation\">,</span> HttpResponse\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Comments\n<span class=\"token comment\"># 데코레이터를 다른 파일에 작성했으므로 임포트 해야함</span>\n<span class=\"token keyword\">from</span> users<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> auth \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CommentView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># auth 데코레이터 장식</span>\n  <span class=\"token decorator annotation punctuation\">@auth</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 데이터 테이블에 동적으로 생성해준 데이터를 끌어와서 user에 할당해줌</span>\n      <span class=\"token comment\"># print 찍어보면 {'username_id' : 1 } 같은 형식임</span>\n      user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>user\n      <span class=\"token comment\"># request body로부터 받아올 데이터 (유저 입력값)</span>\n      data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># 프론트에서 코멘트가 공백일 때 게시 버튼이 활성화되지 않도록 1차로 막고 백에서 2차로 막아줌</span>\n      <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'comment'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n      \n      <span class=\"token comment\"># FK로 끌어온 username에(즉, 데이터 테이블 열 이름은 username_id) 유저 id 숫자만 뽑아서 할당</span>\n      <span class=\"token comment\"># comment는 유저가 입력한 값을 request body에서 받아옴</span>\n      Comments<span class=\"token punctuation\">(</span>\n        username_id <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n        comment <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'comment'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'comment'</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'comment'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 프론트에서 key 이름을 잘못 지정해서 보냈을 때 출력할 에러 코드와 메시지</span>\n    <span class=\"token comment\"># as e로 조건 걸어주면 e에 올바른 key 값이 리턴됨   </span>\n    <span class=\"token keyword\">except</span> KeyError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> e <span class=\"token operator\">+</span> <span class=\"token string\">'Invalid key. The key name is comment.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Something wrong.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># get 생략</span></code></pre></div>\n<br>\n<h3 id=\"users-viewspy-예외-조건-세분화\" style=\"position:relative;\"><a href=\"#users-viewspy-%EC%98%88%EC%99%B8-%EC%A1%B0%EA%B1%B4-%EC%84%B8%EB%B6%84%ED%99%94\" aria-label=\"users viewspy 예외 조건 세분화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>users views.py 예외 조건 세분화</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> bcrypt\n<span class=\"token keyword\">import</span> jwt\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse<span class=\"token punctuation\">,</span> HttpResponse\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Users\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MainView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Welcome to'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Westagram'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sign-up'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'/users/sign-up'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Log-in'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'/users/log-in'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SignUpView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      hased_pw <span class=\"token operator\">=</span> bcrypt<span class=\"token punctuation\">.</span>hashpw<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bcrypt<span class=\"token punctuation\">.</span>gensalt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      decoded_hashed_pw <span class=\"token operator\">=</span> hased_pw<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'username is required.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n            \n      <span class=\"token keyword\">elif</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'password is required.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n            \n      <span class=\"token keyword\">elif</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'username already exists.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">409</span><span class=\"token punctuation\">)</span>\n            \n      <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Users<span class=\"token punctuation\">(</span>\n          username <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          password <span class=\"token operator\">=</span> decoded_hashed_pw\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'WELCOME, '</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">except</span> IntegrityError<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'username already exists.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">409</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 프론트에서 key 이름을 잘못 지정해서 보냈을 때 출력할 에러 코드와 메시지</span>\n    <span class=\"token comment\"># as e로 조건 걸어주면 e에 올바른 key 값이 리턴됨</span>\n    <span class=\"token keyword\">except</span> KeyError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' is right key name. The key names are username and password.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Something wrong.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># get 생략</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LogInView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">if</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>   \n        user_id <span class=\"token operator\">=</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                \n        <span class=\"token keyword\">if</span> bcrypt<span class=\"token punctuation\">.</span>checkpw<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n          access_token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span>user_id<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'secret'</span><span class=\"token punctuation\">,</span> algorithm<span class=\"token operator\">=</span><span class=\"token string\">'HS256'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token comment\"># 토큰 같은 값 리턴 시 부가 메시지 없이 value란에는 value만 넣어서 리턴해야 함</span>\n          <span class=\"token comment\"># 그래야 프론트에서 깔끔하게 처리 가능</span>\n          <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'WELCOME BACK, '</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'token'</span> <span class=\"token punctuation\">:</span> access_token<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Wrong password.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Wrong username.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 프론트에서 key 이름을 잘못 지정해서 보냈을 때 출력할 에러 코드와 메시지</span>\n    <span class=\"token comment\"># as e로 조건 걸어주면 e에 올바른 key 값이 리턴됨</span>\n    <span class=\"token keyword\">except</span> KeyError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' is right key name. The key names are username and password.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># get 생략</span></code></pre></div>\n<br>\n<h3 id=\"어려웠던-점\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%A0%A4%EC%9B%A0%EB%8D%98-%EC%A0%90\" aria-label=\"어려웠던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어려웠던 점</h3>\n<p>에러 케이스를 세분화하기 위해 정확히 어떤 에러가 뜨는지 알아야 했다. 이때 <code class=\"language-text\">except Exceptions as e</code>를 아주 유용하게 잘 써먹었다. 하지만 유독 토큰 값이 아예 입력되지 않거나, 틀린 토큰이 입력됐을 때 뜨는 에러를 잡아내기가 어려웠는데, 알고보니 <code class=\"language-text\">except</code>를 데코레이터에서 걸어줬어야 했다. 데코레이터 단에서 이미 토큰 검증 등의 토큰과 관련한 작업을 마치기 때문이다. 데코레이터를 왜 만드는지 잘 생각해보면 어떤 기능이 들어가야할지 알 수 있을 것이다.</p>\n<p>그리고 데이터 테이블에 동적으로 값을 추가해주는 개념이 잘 안 잡힌다. 코드를 보면 읽을 수는 있는데, 내가 혼자 적으려면 아직 컨닝이 필요한 부분…</p>","fields":{"slug":"/posts/til43","tagSlugs":["/tag/til/","/tag/django/","/tag/python/","/tag/wecode/"]},"frontmatter":{"date":"2020-06-19T22:00:32.160Z","description":"데코레이터를 사용해 사용자 인가하기, except 조건 세분화하기","tags":["til","django","python","wecode"],"title":"django - 인증, 인가 실습 심화","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til43"}}}