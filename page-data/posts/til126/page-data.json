{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til126","result":{"data":{"markdownRemark":{"id":"ffe0790c-a95e-5928-a5cb-9faf7c90db15","html":"<h3 id=\"상속이란\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D%EC%9D%B4%EB%9E%80\" aria-label=\"상속이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속이란?</h3>\n<ul>\n<li>부모 클래스 - 수퍼 클래스</li>\n<li>자식 클래스 - 서브 클래스</li>\n</ul>\n<p>부모 클래스를 상속받은 자식 클래스는 부모 클래스의 모든 속성과 메소드를 사용할 수 있다.</p>\n<p>자동차는 여러 종류가 있지만 모든 자동차는 차량 종류(세단이냐 SUV냐 등), 차량 색과 같은 속성을 가지고 있다. 이런 공통 속성을 부모 클래스에서 지정해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"Parent Class\"\"\"</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tp<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>tp <span class=\"token operator\">=</span> tp\n    self<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'부모 클래스!'</span></code></pre></div>\n<br>\n<p>부모 클래스에서 차량 타입, 색 속성을 지정했으니 이것을 이용해 개별 차량 클래스를 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BMWCar</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"Sub Class\"\"\"</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> car_name<span class=\"token punctuation\">,</span> tp<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># super는 부모 클래스를 의미. tp와 color를 부모 클래스에 넘겨준다.</span>\n    <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>car_name <span class=\"token operator\">=</span> car_name\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">show_model</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'자식 클래스 차량 모델명은: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>car_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BenzCar</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"Sub Class\"\"\"</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> car_name<span class=\"token punctuation\">,</span> tp<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>car_name <span class=\"token operator\">=</span> car_name\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">show_model</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'자식 클래스 차량 모델명은: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>car_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span></code></pre></div>\n<br>\n<p>이제 클래스라는 붕어빵 틀을 만들었으니 인스턴스라는 붕어를 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">model1 <span class=\"token operator\">=</span> BMWCar<span class=\"token punctuation\">(</span><span class=\"token string\">'520d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sedan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">BMWCar</code> 클래스를 이용해 차량 모델 520d, 차량 타입 세단, 차량 색깔 검은색인 개별 차량 인스턴스를 만들었다.</p>\n<p>자식 클래스에는 차량 모델명을 제외하고는 다른 속성을 지정하지 않았지만 부모 클래스로부터 속성을 불러와서 쓰기 때문에 model1을 출력해보면 타입, 색 정보도 알아낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model1<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model1<span class=\"token punctuation\">.</span>tp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model1<span class=\"token punctuation\">.</span>car_name<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">black\nsedan\n520d</code></pre></div>\n<br>\n<p>자식 클래스에는 없는 <code class=\"language-text\">show()</code> 메소드도 부모 클래스로부터 불러올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model1<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">부모 클래스!</code></pre></div>\n<br>\n<p>자식 클래스에만 있는 <code class=\"language-text\">show_model()</code> 메소드는 당연히 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model1<span class=\"token punctuation\">.</span>show_model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">자식 클래스 차량 모델명은: 520d</code></pre></div>\n<br>\n<p><code class=\"language-text\">model1</code> 객체를 출력해보면, 자식 클래스에서 초기화한 속성도 가지고 있고 부모 클래스에서 초기화한 속성도 상속받아서 가지고 있음을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model1<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">{</span><span class=\"token string\">'tp'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'sedan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'color'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'car_name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'520d'</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"메소드-오버라이딩\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-label=\"메소드 오버라이딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드 오버라이딩</h3>\n<p>부모 클래스에서 선언한 메소드를 자식 클래스에서 커스텀해서 사용하는 것을 말한다.</p>\n<p>부모 클래스의 <code class=\"language-text\">show()</code> 메소드를 자식 클래스에서도 선언해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BenzCar</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"Sub Class\"\"\"</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> car_name<span class=\"token punctuation\">,</span> tp<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>car_name <span class=\"token operator\">=</span> car_name\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">show_model</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'자식 클래스 차량 모델명은: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>car_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Car Info: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>car_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>tp<span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span></code></pre></div>\n<br>\n<p>우선, <code class=\"language-text\">BenzCar</code> 클래스를 이용해 객체 인스턴스를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">model2 <span class=\"token operator\">=</span> BenzCar<span class=\"token punctuation\">(</span><span class=\"token string\">'c220d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sedan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'silver'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<p>이제 <code class=\"language-text\">show()</code> 메소드를 호출해본다. 이전에는 부모 클래스의 메소드를 불러왔다면 이번에는 자식 클래스에서 다시 선언한 <code class=\"language-text\">show()</code> 메소드를 불러온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model2<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Car Info: c220d, sedan, silver</code></pre></div>\n<h3 id=\"상속-관계-정보-알아보기\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D-%EA%B4%80%EA%B3%84-%EC%A0%95%EB%B3%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\"상속 관계 정보 알아보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속 관계 정보 알아보기</h3>\n<p><code class=\"language-text\">mro()</code> 함수는 해당 클래스 상속 정보를 리스트 형태로 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>BMWCar<span class=\"token punctuation\">.</span>mro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>BenzCar<span class=\"token punctuation\">.</span>mro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.BMWCar'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.Car'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'object'</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.BenzCar'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.Car'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'object'</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>object 클래스는 모든 클래스의 부모이므로 모든 클래스에서 출력된다.</p>\n<h3 id=\"다중-상속\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%A4%91-%EC%83%81%EC%86%8D\" aria-label=\"다중 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다중 상속</h3>\n<p>여러 클래스를 상속받아 그 속성을 전부 사용할 수도 있다. 하지만 지나친 다중 상속은 코드 파악을 어렵게 만든다. 보통 2개 클래스를 상속받아서 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">,</span> Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">,</span> Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">pass</span></code></pre></div>\n<p>M 클래스는 클래스 B, A, Z를 상속받는데, A 클래스는 클래스 X, Y를 상속받았고, B 클래스는 클래스 Y, Z를 상속받았으므로 M 클래스는 모든 클래스 속성을 다 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">.</span>mro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.M'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.B'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> \\\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.A'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.X'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> \\\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.Y'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.Z'</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'object'</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span></code></pre></div>","fields":{"slug":"/posts/til126","tagSlugs":["/tag/til/","/tag/python/"]},"frontmatter":{"date":"2021-03-21T16:38:32","description":"상속, 다중 상속 관련","tags":["til","python"],"title":"파이썬 기억 더듬기 (6) - 클래스 상세","socialImage":"/naon.png"}}},"pageContext":{"slug":"/posts/til126"}}}